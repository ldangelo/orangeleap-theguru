DELIMITER $$

DROP PROCEDURE GENERATE_VIEWS;$$

CREATE PROCEDURE GENERATE_VIEWS(VIEWNAME VARCHAR(255))
BEGIN
	DECLARE CSR_END INT DEFAULT 0;
	DECLARE VAR_VIEW_DROP_TEXT VARCHAR(1000);
	DECLARE VAR_VIEW_SELECT_TEXT LONGTEXT;
	DECLARE VAR_VIEW_FROM_TEXT VARCHAR(8000);
	DECLARE VAR_TABLE_NAME VARCHAR(255);
	DECLARE VAR_FIRST_FIELD BIT;
	DECLARE VAR_NEW_LINE VARCHAR(10);
	DECLARE VAR_TAB VARCHAR(10);

	-- THEGURU_VIEW Variables
	DECLARE VAR_VIEW_ID INTEGER;
	DECLARE VAR_VIEW_NAME VARCHAR(255);
	DECLARE VAR_VIEW_DISPLAY_TEXT VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_IS_VIEW BIT;
	DECLARE VAR_PRIMARY_TABLE_ALIAS VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_COLUMN_PREFIX VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_INCLUDE_ALL_FIELDS BIT;
	DECLARE VAR_VIEW_SQL_OVERRIDE TEXT;
    DECLARE VAR_WHERE_CLAUSE VARCHAR(8000);

	-- INFORMATION_SCHEMA.COLUMNS Variables
	DECLARE VAR_FIELD_NAME VARCHAR(255);
	DECLARE VAR_FIELD_TYPE VARCHAR(255);

	-- THEGURU_JOIN Variables
	DECLARE VAR_JOIN_ID INTEGER;
	DECLARE VAR_JOIN_TYPE VARCHAR(20);
	DECLARE VAR_JOIN_TABLE VARCHAR(255);
	DECLARE VAR_JOIN_TABLE_IS_VIEW BIT;
	DECLARE VAR_JOIN_TABLE_ALIAS VARCHAR(255);
	DECLARE VAR_JOIN_TABLE_COLUMN_PREFIX VARCHAR(255);
	DECLARE VAR_JOIN_CRITERIA VARCHAR(2000);
	DECLARE VAR_JOIN_TABLE_INCLUDE_ALL_FIELDS BIT;

	-- THEGURU_TABLE_ADDITIONAL_FIELD Variables
	DECLARE VAR_ADDITIONAL_FIELD_TABLE_NAME VARCHAR(255);
	DECLARE VAR_ADDITIONAL_FIELD_FIELD_TEXT VARCHAR(2000);
	DECLARE VAR_ADDITIONAL_FIELD_FIELD_ALIAS VARCHAR(255);


	DECLARE CSR_VIEWS CURSOR FOR
		SELECT
			VIEW_ID, VIEW_NAME, VIEW_DISPLAY_TEXT, PRIMARY_TABLE, PRIMARY_TABLE_IS_VIEW, PRIMARY_TABLE_ALIAS, PRIMARY_TABLE_COLUMN_PREFIX, INCLUDE_ALL_FIELDS, WHERE_CLAUSE, SQL_OVERRIDE
		FROM THEGURU_VIEW
		WHERE VIEW_NAME = VIEWNAME OR VIEWNAME IS NULL
		ORDER BY SORT_ORDER;

	DECLARE CSR_FIELDS CURSOR FOR
		SELECT
			COLUMN_NAME, DATA_TYPE
		FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '') AND TABLE_NAME = VAR_TABLE_NAME;

	DECLARE CSR_JOINS CURSOR FOR
		SELECT
			JOIN_ID, JOIN_TYPE, JOIN_TABLE, JOIN_TABLE_IS_VIEW, JOIN_TABLE_ALIAS, JOIN_TABLE_COLUMN_PREFIX, JOIN_CRITERIA, INCLUDE_ALL_FIELDS
		FROM THEGURU_VIEW_JOIN
		WHERE THEGURU_VIEW_JOIN.VIEW_ID = VAR_VIEW_ID;

	DECLARE CSR_ADDITIONAL_FIELDS CURSOR FOR
		SELECT
			TABLE_NAME, FIELD_TEXT, FIELD_ALIAS
		FROM THEGURU_TABLE_ADDITIONAL_FIELD
		WHERE THEGURU_TABLE_ADDITIONAL_FIELD.TABLE_NAME = VAR_TABLE_NAME;

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET CSR_END = 1;

	SET VAR_FIRST_FIELD = TRUE;
	SET VAR_NEW_LINE = '\n';
	SET VAR_TAB = '\t';

	DELETE FROM THEGURU_GENERATED_VIEWS;

	-- Iterate through the views
	OPEN CSR_VIEWS;

	VIEWS_LOOP: LOOP
		FETCH CSR_VIEWS INTO
			VAR_VIEW_ID, VAR_VIEW_NAME, VAR_VIEW_DISPLAY_TEXT, VAR_PRIMARY_TABLE, VAR_PRIMARY_TABLE_IS_VIEW, VAR_PRIMARY_TABLE_ALIAS, VAR_PRIMARY_TABLE_COLUMN_PREFIX, VAR_PRIMARY_TABLE_INCLUDE_ALL_FIELDS, VAR_WHERE_CLAUSE, VAR_VIEW_SQL_OVERRIDE;

		IF CSR_END THEN
			LEAVE VIEWS_LOOP;
		END IF;

		SET VAR_FIRST_FIELD = TRUE;
		SET VAR_VIEW_DROP_TEXT = (SELECT CONCAT('DROP VIEW IF EXISTS ', VAR_VIEW_NAME, ';'));

		IF LENGTH(IFNULL(VAR_VIEW_SQL_OVERRIDE, '')) = 0 THEN
			SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_NEW_LINE, 'CREATE VIEW ', VAR_VIEW_NAME, VAR_NEW_LINE,
				'AS', VAR_NEW_LINE, VAR_TAB, 'SELECT'));
			SET VAR_VIEW_FROM_TEXT = (SELECT CONCAT('FROM ', VAR_PRIMARY_TABLE, ' AS ', VAR_PRIMARY_TABLE_ALIAS));

			SET VAR_TABLE_NAME = VAR_PRIMARY_TABLE;

			IF VAR_PRIMARY_TABLE_INCLUDE_ALL_FIELDS THEN
				--  Iterate through the fields of the primary table
				OPEN CSR_FIELDS;
				PRIMARY_FIELDS_LOOP: LOOP
					FETCH CSR_FIELDS INTO
						VAR_FIELD_NAME, VAR_FIELD_TYPE;

					IF CSR_END THEN
						LEAVE PRIMARY_FIELDS_LOOP;
					END IF;

					IF VAR_FIRST_FIELD THEN
						SET VAR_FIRST_FIELD = FALSE;
					ELSE
						SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, ','));
					END IF;

					SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, VAR_NEW_LINE, VAR_TAB, VAR_TAB, VAR_PRIMARY_TABLE_ALIAS, '.', VAR_FIELD_NAME, ' AS ', VAR_PRIMARY_TABLE_COLUMN_PREFIX, VAR_FIELD_NAME));

				END LOOP;
				SET CSR_END = 0;
				CLOSE CSR_FIELDS;
			END IF;
      
			OPEN CSR_ADDITIONAL_FIELDS;
			ADDITIONAL_FIELDS_LOOP: LOOP
				FETCH CSR_ADDITIONAL_FIELDS INTO
					VAR_ADDITIONAL_FIELD_TABLE_NAME, VAR_ADDITIONAL_FIELD_FIELD_TEXT, VAR_ADDITIONAL_FIELD_FIELD_ALIAS;

				IF CSR_END THEN
					LEAVE ADDITIONAL_FIELDS_LOOP;
				END IF;

				IF VAR_FIRST_FIELD THEN
					SET VAR_FIRST_FIELD = FALSE;
				ELSE
					SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, ','));
				END IF;

				SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, VAR_NEW_LINE, VAR_TAB, VAR_TAB, REPLACE(VAR_ADDITIONAL_FIELD_FIELD_TEXT, '${ALIAS_REPLACEMENT}', VAR_PRIMARY_TABLE_ALIAS), ' AS ', VAR_PRIMARY_TABLE_COLUMN_PREFIX, VAR_ADDITIONAL_FIELD_FIELD_ALIAS));
			END LOOP;
			SET CSR_END = 0;
			CLOSE CSR_ADDITIONAL_FIELDS;


			-- Iterate through the join tables
			OPEN CSR_JOINS;

			JOINS_LOOP: LOOP
				FETCH CSR_JOINS INTO
					VAR_JOIN_ID, VAR_JOIN_TYPE, VAR_JOIN_TABLE, VAR_JOIN_TABLE_IS_VIEW, VAR_JOIN_TABLE_ALIAS, VAR_JOIN_TABLE_COLUMN_PREFIX, VAR_JOIN_CRITERIA, VAR_JOIN_TABLE_INCLUDE_ALL_FIELDS;

				IF CSR_END THEN
					LEAVE JOINS_LOOP;
				END IF;

				SET VAR_VIEW_FROM_TEXT = (SELECT CONCAT(VAR_VIEW_FROM_TEXT, VAR_NEW_LINE, VAR_TAB, LTRIM(CONCAT(VAR_JOIN_TYPE, ' ')), 'JOIN ', VAR_JOIN_TABLE, ' AS ', VAR_JOIN_TABLE_ALIAS,
					' ON ', VAR_JOIN_CRITERIA));

				SET VAR_TABLE_NAME = VAR_JOIN_TABLE;
				IF VAR_JOIN_TABLE_INCLUDE_ALL_FIELDS THEN
					--  Iterate through the fields of the join table
					OPEN CSR_FIELDS;
					PRIMARY_FIELDS_LOOP: LOOP
						FETCH CSR_FIELDS INTO
							VAR_FIELD_NAME, VAR_FIELD_TYPE;

						IF CSR_END THEN
							LEAVE PRIMARY_FIELDS_LOOP;
						END IF;

						IF VAR_FIRST_FIELD THEN
							SET VAR_FIRST_FIELD = FALSE;
						ELSE
							SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, ','));
						END IF;

						SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, VAR_NEW_LINE, VAR_TAB, VAR_TAB, VAR_JOIN_TABLE_ALIAS, '.', VAR_FIELD_NAME, ' AS ', VAR_JOIN_TABLE_COLUMN_PREFIX, VAR_FIELD_NAME));
					END LOOP;
					SET CSR_END = 0;
					CLOSE CSR_FIELDS;
				END IF;

				OPEN CSR_ADDITIONAL_FIELDS;
				ADDITIONAL_FIELDS_LOOP: LOOP
					FETCH CSR_ADDITIONAL_FIELDS INTO
					VAR_ADDITIONAL_FIELD_TABLE_NAME, VAR_ADDITIONAL_FIELD_FIELD_TEXT, VAR_ADDITIONAL_FIELD_FIELD_ALIAS;

					IF CSR_END THEN
						LEAVE ADDITIONAL_FIELDS_LOOP;
					END IF;

					IF VAR_FIRST_FIELD THEN
						SET VAR_FIRST_FIELD = FALSE;
					ELSE
						SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, ','));
					END IF;

					SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, VAR_NEW_LINE, VAR_TAB, VAR_TAB, REPLACE(VAR_ADDITIONAL_FIELD_FIELD_TEXT, '${ALIAS_REPLACEMENT}', VAR_JOIN_TABLE_ALIAS), ' AS ', VAR_JOIN_TABLE_COLUMN_PREFIX, VAR_ADDITIONAL_FIELD_FIELD_ALIAS));
				END LOOP;
				SET CSR_END = 0;
				CLOSE CSR_ADDITIONAL_FIELDS;

			END LOOP;
			SET CSR_END = 0;
			CLOSE CSR_JOINS;

			IF LENGTH(IFNULL(VAR_WHERE_CLAUSE, '')) > 0 THEN
				SET VAR_VIEW_FROM_TEXT = (SELECT CONCAT(VAR_VIEW_FROM_TEXT, VAR_NEW_LINE, VAR_TAB, 'WHERE ', VAR_WHERE_CLAUSE));
			END IF;
		ELSE
			SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_NEW_LINE, 'CREATE VIEW ', VAR_VIEW_NAME, VAR_NEW_LINE,
				'AS', VAR_NEW_LINE, VAR_VIEW_SQL_OVERRIDE));
			SET VAR_VIEW_FROM_TEXT = '';
		END IF;

		INSERT THEGURU_GENERATED_VIEWS
			(VIEW_TEXT)
		SELECT
			VAR_VIEW_DROP_TEXT;

		INSERT THEGURU_GENERATED_VIEWS
			(VIEW_TEXT)
		SELECT
			CONCAT(VAR_VIEW_SELECT_TEXT, VAR_NEW_LINE, VAR_TAB, VAR_VIEW_FROM_TEXT, VAR_NEW_LINE, ';');

    SET @execString = CONCAT('CALL ', REPLACE(DATABASE(), 'theguru', '.'), 'CREATE_VIEW(''', VAR_VIEW_DROP_TEXT, ''');');
		PREPARE statement FROM @execString;
		EXECUTE statement;
		DEALLOCATE PREPARE statement;

		SET @execString = CONCAT('CALL ', REPLACE(DATABASE(), 'theguru', '.'), 'CREATE_VIEW(''', REPLACE(VAR_VIEW_SELECT_TEXT, '''', ''''''), VAR_NEW_LINE, VAR_TAB, REPLACE(VAR_VIEW_FROM_TEXT, '''', ''''''), VAR_NEW_LINE, ';'');');
		PREPARE statement FROM @execString;
		EXECUTE statement;
		DEALLOCATE PREPARE statement;

	END LOOP;
	CLOSE CSR_VIEWS;

END;$$
