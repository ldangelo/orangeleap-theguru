DELIMITER $$

DROP PROCEDURE IF EXISTS UPDATE_THEGURU_FIELD_DEFINITIONS_COMPARISON$$

CREATE PROCEDURE UPDATE_THEGURU_FIELD_DEFINITIONS_COMPARISON()
BEGIN
	DECLARE CSR_END INT DEFAULT 0;

    -- THEGURU_FIELD_DEFINITIONS Variables
    DECLARE VAR_FIELD_ID INT;
    DECLARE VAR_VIEW_NAME VARCHAR(255);
    DECLARE VAR_FIELD_GROUP VARCHAR(255);
    DECLARE VAR_COLUMN_NAME VARCHAR(1000);
    DECLARE VAR_ALIAS_NAME VARCHAR(255);
    DECLARE VAR_DISPLAY_TEXT VARCHAR(255);
    DECLARE VAR_FIELD_TYPE INT;
    DECLARE VAR_PRIMARY_KEY VARCHAR(255);

	DECLARE CSR_VIEWS CURSOR FOR
        SELECT DISTINCT VIEW_NAME FROM THEGURU_FIELD_DEFINITIONS;

	DECLARE CSR_FIELDS CURSOR FOR
        SELECT FIELD_ID, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY FROM THEGURU_FIELD_DEFINITIONS
        WHERE VIEW_NAME = VAR_VIEW_NAME;

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET CSR_END = 1;


    -- Update the alias names for fields where the column name matches, but the alias is different
    -- This will handle some instances where the generated alias name is different than the original, but the field is the same
    UPDATE THEGURU_FIELD_DEFINITIONS_COMPARISON, THEGURU_FIELD_DEFINITIONS
    SET THEGURU_FIELD_DEFINITIONS_COMPARISON.NEW_ALIAS_NAME = THEGURU_FIELD_DEFINITIONS.ALIAS_NAME
    WHERE THEGURU_FIELD_DEFINITIONS.COLUMN_NAME = THEGURU_FIELD_DEFINITIONS_COMPARISON.COLUMN_NAME
    AND THEGURU_FIELD_DEFINITIONS.VIEW_NAME = THEGURU_FIELD_DEFINITIONS_COMPARISON.VIEW_NAME
    AND THEGURU_FIELD_DEFINITIONS.ALIAS_NAME <> THEGURU_FIELD_DEFINITIONS_COMPARISON.ALIAS_NAME
    AND THEGURU_FIELD_DEFINITIONS.ALIAS_NAME IS NOT NULL;

    UPDATE REPORTFIELD
    SET ALIAS_NAME = (SELECT NEW_ALIAS_NAME FROM THEGURU_FIELD_DEFINITIONS_COMPARISON WHERE REPORTFIELD.REPORTFIELD_ID = THEGURU_FIELD_DEFINITIONS_COMPARISON.REPORTFIELD_ID)
    WHERE REPORTFIELD_ID IN (SELECT REPORTFIELD_ID FROM THEGURU_FIELD_DEFINITIONS_COMPARISON WHERE NEW_ALIAS_NAME IS NOT NULL);

    UPDATE THEGURU_FIELD_DEFINITIONS_COMPARISON
    SET ALIAS_NAME = NEW_ALIAS_NAME
    WHERE NEW_ALIAS_NAME IS NOT NULL;


	OPEN CSR_VIEWS;
	VIEWS_LOOP: LOOP
		FETCH CSR_VIEWS INTO
			VAR_VIEW_NAME;

		IF CSR_END THEN
			LEAVE VIEWS_LOOP;
		END IF;

        -- Mark all the fields as to be deleted for this view and the process will reset the flag as it updates each field
        -- Those that don't get updated were not in the generated fields and should be deleted
        UPDATE THEGURU_FIELD_DEFINITIONS_COMPARISON
        SET TO_BE_DELETED = 1
        WHERE VIEW_NAME = VAR_VIEW_NAME;

        OPEN CSR_FIELDS;
        FIELDS_LOOP: LOOP
            FETCH CSR_FIELDS INTO
                VAR_FIELD_ID, VAR_FIELD_GROUP, VAR_COLUMN_NAME, VAR_ALIAS_NAME, VAR_DISPLAY_TEXT, VAR_FIELD_TYPE, VAR_PRIMARY_KEY ;

            IF CSR_END THEN
                LEAVE FIELDS_LOOP;
            END IF;

            -- If the field exists in the comparison table based on the alias name, update it, if not, add it.
            IF EXISTS
            (SELECT * FROM THEGURU_FIELD_DEFINITIONS_COMPARISON
            WHERE VIEW_NAME = VAR_VIEW_NAME
            AND ALIAS_NAME = VAR_ALIAS_NAME) THEN
                UPDATE THEGURU_FIELD_DEFINITIONS_COMPARISON
                SET FIELD_GROUP = VAR_FIELD_GROUP,
                COLUMN_NAME = VAR_COLUMN_NAME,
                ALIAS_NAME = VAR_ALIAS_NAME,
                DISPLAY_NAME = VAR_DISPLAY_TEXT,
                FIELD_TYPE = VAR_FIELD_TYPE,
                PRIMARY_KEYS = VAR_PRIMARY_KEY,
                TO_BE_DELETED = 0
                WHERE VIEW_NAME = VAR_VIEW_NAME
                AND ALIAS_NAME = VAR_ALIAS_NAME;
            ELSE
                INSERT THEGURU_FIELD_DEFINITIONS_COMPARISON
                    (VIEW_NAME, FIELD_GROUP, REPORTFIELD_ID, COLUMN_NAME, ALIAS_NAME, DISPLAY_NAME, FIELD_TYPE, PRIMARY_KEYS, TO_BE_DELETED)
                SELECT
                    VAR_VIEW_NAME, VAR_FIELD_GROUP, NULL, VAR_COLUMN_NAME, VAR_ALIAS_NAME, VAR_DISPLAY_TEXT, VAR_FIELD_TYPE, VAR_PRIMARY_KEY, 0;
            END IF;
        END LOOP;
        CLOSE CSR_FIELDS;
        SET CSR_END = 0;

	END LOOP;
	CLOSE CSR_VIEWS;
	SET CSR_END = 0;
END;
$$


DROP PROCEDURE IF EXISTS UPDATE_REPORTFIELD_FIELD_DEFINITIONS$$

CREATE PROCEDURE UPDATE_REPORTFIELD_FIELD_DEFINITIONS()
BEGIN
    DROP TABLE IF EXISTS THEGURU_FIELD_DEFINITIONS_COMPARISON;

    CREATE TABLE THEGURU_FIELD_DEFINITIONS_COMPARISON
    SELECT
        REPORTDATASUBSOURCE.VIEW_NAME,
        REPORTFIELDGROUP.NAME AS FIELD_GROUP,
        REPORTFIELD.REPORTFIELD_ID,
        REPORTFIELD.COLUMN_NAME,
        REPORTFIELD.ALIAS_NAME,
        REPORTFIELD.DISPLAY_NAME,
        REPORTFIELD.FIELD_TYPE,
        REPORTFIELD.PRIMARY_KEYS
    FROM REPORTDATASUBSOURCE
    JOIN REPORTFIELDGROUP_REPORTDATASUBSOURCE ON reportDataSubSource_REPORTSUBSOURCE_ID = REPORTDATASUBSOURCE.REPORTSUBSOURCE_ID
    JOIN REPORTFIELDGROUP ON REPORTFIELDGROUP_REPORTFIELDGROUP_ID = REPORTFIELDGROUP.REPORTFIELDGROUP_ID
    JOIN REPORTFIELD_REPORTFIELDGROUP ON REPORTFIELD_REPORTFIELDGROUP.reportFieldGroup_REPORTFIELDGROUP_ID = REPORTFIELDGROUP.REPORTFIELDGROUP_ID
    JOIN REPORTFIELD ON fields_REPORTFIELD_ID = REPORTFIELD.REPORTFIELD_ID
    WHERE REPORTDATASUBSOURCE.VIEW_NAME IN (SELECT VIEW_NAME FROM THEGURU_FIELD_DEFINITIONS)
    ORDER BY REPORTFIELDGROUP.NAME, REPORTFIELD.DISPLAY_NAME;

    ALTER TABLE THEGURU_FIELD_DEFINITIONS_COMPARISON ADD NEW_ALIAS_NAME VARCHAR(255);

    ALTER TABLE THEGURU_FIELD_DEFINITIONS_COMPARISON ADD TO_BE_DELETED BIT;

    ALTER TABLE THEGURU_FIELD_DEFINITIONS_COMPARISON ADD COLUMN THEGURU_FIELD_DEFINITIONS_COMPARISON_ID INT NOT NULL AUTO_INCREMENT,
    ADD PRIMARY KEY (THEGURU_FIELD_DEFINITIONS_COMPARISON_ID);

    CREATE INDEX IDX_THEGURU_FIELD_DEFINITIONS_COMPARISON_NEW_ALIAS_NAME ON THEGURU_FIELD_DEFINITIONS_COMPARISON(REPORTFIELD_ID);
    CREATE INDEX IDX_THEGURU_FIELD_DEFINITIONS_COMPARISON_SEARCH_VIEW_NAME ON THEGURU_FIELD_DEFINITIONS_COMPARISON (VIEW_NAME);
    CREATE INDEX IDX_THEGURU_FIELD_DEFINITIONS_COMPARISON_SEARCH_ALIAS_NAME ON THEGURU_FIELD_DEFINITIONS_COMPARISON (ALIAS_NAME);
    
   	-- Remove any extra exclusions based on view name
	DELETE FROM THEGURU_FIELD_DEFINITIONS
	WHERE EXISTS
	(SELECT * FROM THEGURU_TABLE_FIELD_EXCLUSIONS
	WHERE THEGURU_TABLE_FIELD_EXCLUSIONS.TABLE_NAME = THEGURU_FIELD_DEFINITIONS.VIEW_NAME
	AND THEGURU_TABLE_FIELD_EXCLUSIONS.FIELD_NAME = THEGURU_FIELD_DEFINITIONS.ALIAS_NAME);

    CALL UPDATE_THEGURU_FIELD_DEFINITIONS_COMPARISON();
    CALL UPDATE_REPORTFIELD_FROM_THEGURU_FIELD_DEFINITIONS_COMPARISON();

	DROP TABLE IF EXISTS THEGURU_FIELD_DEFINITIONS_COMPARISON;
END;
$$
