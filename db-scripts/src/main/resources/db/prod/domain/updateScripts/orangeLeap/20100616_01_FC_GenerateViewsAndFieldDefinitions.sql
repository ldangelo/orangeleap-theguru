DELIMITER $$

DROP PROCEDURE IF EXISTS GENERATE_FIELD_DEFINITIONS$$

CREATE PROCEDURE GENERATE_FIELD_DEFINITIONS(VIEWNAME VARCHAR(255))
BEGIN
	DECLARE CSR_END INT DEFAULT 0;
	DECLARE VAR_VIEW_DROP_TEXT VARCHAR(1000);
	DECLARE VAR_VIEW_SELECT_TEXT VARCHAR(8000);
	DECLARE VAR_VIEW_FROM_TEXT VARCHAR(8000);
	DECLARE VAR_TABLE_NAME VARCHAR(255);
	DECLARE VAR_FIRST_FIELD BIT;
	DECLARE VAR_NEW_LINE VARCHAR(10);
	DECLARE VAR_TAB VARCHAR(10);

	-- THEGURU_VIEW Variables
	DECLARE VAR_VIEW_ID INTEGER;
	DECLARE VAR_VIEW_NAME VARCHAR(255);
	DECLARE VAR_VIEW_DISPLAY_TEXT VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_IS_VIEW BIT;
	DECLARE VAR_PRIMARY_TABLE_ALIAS VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_COLUMN_PREFIX VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_FIELD_GROUP_PREFIX VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_FIELD_GROUP_OVERRIDE VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_PARENT_ENTITY_TYPE VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_SUB_FIELD_NAME VARCHAR(255);
    DECLARE VAR_PRIMARY_TABLE_DEFAULT_PAGE_TYPE VARCHAR(255);

	-- INFORMATION_SCHEMA.COLUMNS Variables
	DECLARE VAR_FIELD_NAME VARCHAR(255);
	DECLARE VAR_FIELD_TYPE VARCHAR(255);

	-- DATASUBSOURCE Variables
	DECLARE VAR_REPORTSUBSOURCE_ID INT;
	DECLARE VAR_DATASUBSOURCE_VIEW_NAME VARCHAR(255);

	DECLARE CSR_VIEWS CURSOR FOR
		SELECT
			VIEW_ID, VIEW_NAME, VIEW_DISPLAY_TEXT, PRIMARY_TABLE, PRIMARY_TABLE_IS_VIEW, PRIMARY_TABLE_ALIAS, PRIMARY_TABLE_COLUMN_PREFIX, FIELD_GROUP_PREFIX, FIELD_GROUP_OVERRIDE, PARENT_ENTITY_TYPE, SUB_FIELD_NAME, DEFAULT_PAGE_TYPE
		FROM THEGURU_VIEW
		WHERE VIEW_NAME = VAR_DATASUBSOURCE_VIEW_NAME
		ORDER BY SORT_ORDER;

	DECLARE CSR_DATASUBSOURCES CURSOR FOR
		SELECT REPORTSUBSOURCE_ID, VIEW_NAME
		FROM REPORTDATASUBSOURCE
		WHERE LENGTH(VIEW_NAME) <= 255
    AND (VIEW_NAME = VIEWNAME OR VIEWNAME IS NULL)
;

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET CSR_END = 1;

	SET max_sp_recursion_depth=50;
	SET VAR_FIRST_FIELD = TRUE;
	SET VAR_NEW_LINE = '\r\n';
	SET VAR_TAB = '\t';


	DROP TABLE IF EXISTS TEMP_OL_FIELD_DEFINITIONS;
	SET @execString = CONCAT('CREATE TABLE TEMP_OL_FIELD_DEFINITIONS', VAR_NEW_LINE,
		'SELECT', VAR_NEW_LINE,
		'  FIELD_ORDER, FIELD_DEFINITION.FIELD_DEFINITION_ID, SECONDARY_FIELD_DEFINITION_ID, SECTION_DEFINITION.DEFAULT_LABEL AS SECTION_LABEL,', VAR_NEW_LINE,
		'  PAGE_TYPE, SECTION_ORDER, FIELD_DEFINITION.DEFAULT_LABEL AS FIELD_LABEL, ENTITY_TYPE, FIELD_NAME, FIELD_TYPE, REFERENCE_TYPE', VAR_NEW_LINE,
		'FROM ', REPLACE(DATABASE(), 'theguru', '.'), 'SECTION_FIELD', VAR_NEW_LINE,
		'JOIN ', REPLACE(DATABASE(), 'theguru', '.'), 'SECTION_DEFINITION ON SECTION_DEFINITION.SECTION_DEFINITION_ID = SECTION_FIELD.SECTION_DEFINITION_ID', VAR_NEW_LINE,
		'JOIN ', REPLACE(DATABASE(), 'theguru', '.'), 'FIELD_DEFINITION ON FIELD_DEFINITION.FIELD_DEFINITION_ID = SECTION_FIELD.FIELD_DEFINITION_ID;');
	PREPARE statement FROM @execString;
	EXECUTE statement;
	DEALLOCATE PREPARE statement;

	DELETE FROM THEGURU_FIELD_DEFINITIONS;

	-- Iterate through the data sub sources
	OPEN CSR_DATASUBSOURCES;
	DATASUBSOURCES_LOOP: LOOP
		FETCH CSR_DATASUBSOURCES INTO
			VAR_REPORTSUBSOURCE_ID, VAR_DATASUBSOURCE_VIEW_NAME;

		IF CSR_END THEN
			LEAVE DATASUBSOURCES_LOOP;
		END IF;

		-- Iterate through the views (should only be 1)
		OPEN CSR_VIEWS;

		VIEWS_LOOP: LOOP
			FETCH CSR_VIEWS INTO
				VAR_VIEW_ID, VAR_VIEW_NAME, VAR_VIEW_DISPLAY_TEXT, VAR_PRIMARY_TABLE, VAR_PRIMARY_TABLE_IS_VIEW, VAR_PRIMARY_TABLE_ALIAS, VAR_PRIMARY_TABLE_COLUMN_PREFIX, VAR_PRIMARY_TABLE_FIELD_GROUP_PREFIX, VAR_PRIMARY_TABLE_FIELD_GROUP_OVERRIDE, VAR_PRIMARY_TABLE_PARENT_ENTITY_TYPE, VAR_PRIMARY_TABLE_SUB_FIELD_NAME, VAR_PRIMARY_TABLE_DEFAULT_PAGE_TYPE;

			IF CSR_END THEN
				LEAVE VIEWS_LOOP;
			END IF;

			CALL GENERATE_FIELD_DEFINITIONS_PROCESS_TABLE(VAR_VIEW_NAME, VAR_VIEW_NAME, TRUE, VAR_PRIMARY_TABLE_COLUMN_PREFIX, VAR_PRIMARY_TABLE_FIELD_GROUP_PREFIX, VAR_PRIMARY_TABLE_FIELD_GROUP_OVERRIDE, VAR_PRIMARY_TABLE_PARENT_ENTITY_TYPE, VAR_PRIMARY_TABLE_SUB_FIELD_NAME, VAR_PRIMARY_TABLE_DEFAULT_PAGE_TYPE, FALSE);

		END LOOP;
		CLOSE CSR_VIEWS;
		SET CSR_END = 0;

	END LOOP;
	CLOSE CSR_DATASUBSOURCES;
	SET CSR_END = 0;

    CALL UPDATE_REPORTFIELD_FIELD_DEFINITIONS();

 	DROP TABLE IF EXISTS TEMP_OL_FIELD_DEFINITIONS;

END;$$


DROP PROCEDURE IF EXISTS GENERATE_FIELD_DEFINITIONS_PROCESS_TABLE$$

CREATE PROCEDURE GENERATE_FIELD_DEFINITIONS_PROCESS_TABLE(VIEWNAME VARCHAR(255), TABLENAME VARCHAR(255), ISVIEW BIT, TABLECOLUMNPREFIX VARCHAR(255), FIELDGROUPPREFIX VARCHAR(255), FIELDGROUPOVERRIDE VARCHAR(255), PARENTENTITYTYPE VARCHAR(255), SUBFIELDNAME VARCHAR(255), DEFAULTPAGETYPE VARCHAR(255), USEPARENTFIELDGROUPPREFIXES BIT)
BEGIN
	DECLARE CSR_END INT DEFAULT 0;

	-- THEGURU_VIEW Variables
	DECLARE VAR_VIEW_ID INTEGER;
	DECLARE VAR_VIEW_NAME VARCHAR(255);
	DECLARE VAR_VIEW_DISPLAY_TEXT VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_IS_VIEW BIT;
	DECLARE VAR_PRIMARY_TABLE_ALIAS VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_COLUMN_PREFIX VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_FIELD_GROUP_PREFIX VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_FIELD_GROUP_OVERRIDE VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_PARENT_ENTITY_TYPE VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_SUB_FIELD_NAME VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_DEFAULT_PAGE_TYPE VARCHAR(255);

	-- THEGURU_JOIN Variables
	DECLARE VAR_JOIN_ID INTEGER;
	DECLARE VAR_JOIN_TYPE VARCHAR(20);
	DECLARE VAR_JOIN_TABLE VARCHAR(255);
	DECLARE VAR_JOIN_TABLE_IS_VIEW BIT;
	DECLARE VAR_JOIN_TABLE_ALIAS VARCHAR(255);
	DECLARE VAR_JOIN_TABLE_COLUMN_PREFIX VARCHAR(255);
	DECLARE VAR_JOIN_CRITERIA VARCHAR(2000);
	DECLARE VAR_JOIN_TABLE_FIELD_GROUP_PREFIX VARCHAR(255);
	DECLARE VAR_JOIN_TABLE_FIELD_GROUP_OVERRIDE VARCHAR(255);
	DECLARE VAR_JOIN_TABLE_PARENT_ENTITY_TYPE VARCHAR(255);
	DECLARE VAR_JOIN_TABLE_SUB_FIELD_NAME VARCHAR(255);
	DECLARE VAR_JOIN_TABLE_DEFAULT_PAGE_TYPE VARCHAR(255);
  DECLARE VAR_JOIN_TABLE_USE_PARENT_FIELD_GROUP_PREFIXES BIT;

	DECLARE CSR_JOINS CURSOR FOR
		SELECT
			JOIN_ID, JOIN_TYPE, JOIN_TABLE, JOIN_TABLE_IS_VIEW, JOIN_TABLE_ALIAS, JOIN_TABLE_COLUMN_PREFIX, JOIN_CRITERIA, FIELD_GROUP_PREFIX, FIELD_GROUP_OVERRIDE, PARENT_ENTITY_TYPE, SUB_FIELD_NAME, DEFAULT_PAGE_TYPE, USE_PARENT_FIELD_GROUP_PREFIXES
		FROM THEGURU_VIEW_JOIN
		WHERE THEGURU_VIEW_JOIN.VIEW_ID = VAR_VIEW_ID
		AND INCLUDE_ALL_FIELDS = TRUE;

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET CSR_END = 1;

	IF ISVIEW THEN
		SELECT PRIMARY_TABLE, PRIMARY_TABLE_IS_VIEW, PRIMARY_TABLE_COLUMN_PREFIX, FIELD_GROUP_PREFIX, FIELD_GROUP_OVERRIDE, PARENT_ENTITY_TYPE, SUB_FIELD_NAME, DEFAULT_PAGE_TYPE
		INTO VAR_PRIMARY_TABLE, VAR_PRIMARY_TABLE_IS_VIEW, VAR_PRIMARY_TABLE_COLUMN_PREFIX, VAR_PRIMARY_TABLE_FIELD_GROUP_PREFIX, VAR_PRIMARY_TABLE_FIELD_GROUP_OVERRIDE, VAR_PRIMARY_TABLE_PARENT_ENTITY_TYPE, VAR_PRIMARY_TABLE_SUB_FIELD_NAME, VAR_PRIMARY_TABLE_DEFAULT_PAGE_TYPE
		FROM THEGURU_VIEW WHERE VIEW_NAME = TABLENAME;
		-- Check if the viewname = tablename and if it does not, pass the TABLECOLUMNPREFIX into the call.  Otherwise, the TABLECOLUMNPREFIX and the VAR_PRIMARY_TABLE_COLUMN_PREFIX will be the same and will duplicate
		CALL GENERATE_FIELD_DEFINITIONS_PROCESS_TABLE(VIEWNAME, VAR_PRIMARY_TABLE, VAR_PRIMARY_TABLE_IS_VIEW, CONCAT(CASE WHEN VIEWNAME <> TABLENAME THEN IFNULL(TABLECOLUMNPREFIX, '') ELSE '' END, IFNULL(VAR_PRIMARY_TABLE_COLUMN_PREFIX, '')), CONCAT(IFNULL(FIELDGROUPPREFIX, ''), IFNULL(VAR_PRIMARY_TABLE_FIELD_GROUP_PREFIX,'')), VAR_PRIMARY_TABLE_FIELD_GROUP_OVERRIDE, VAR_PRIMARY_TABLE_PARENT_ENTITY_TYPE, VAR_PRIMARY_TABLE_SUB_FIELD_NAME, VAR_PRIMARY_TABLE_DEFAULT_PAGE_TYPE, USEPARENTFIELDGROUPPREFIXES);
        SET CSR_END = 0;
	ELSE
		CALL GENERATE_FIELD_DEFINITIONS_BUILD_FIELDS(VIEWNAME, TABLENAME, CONCAT(CASE WHEN VIEWNAME <> TABLENAME THEN IFNULL(TABLECOLUMNPREFIX, '') ELSE '' END, IFNULL(VAR_PRIMARY_TABLE_COLUMN_PREFIX, '')), FIELDGROUPPREFIX, FIELDGROUPOVERRIDE, PARENTENTITYTYPE, SUBFIELDNAME, DEFAULTPAGETYPE);
        SET CSR_END = 0;
	END IF;

	SET VAR_VIEW_ID = (SELECT VIEW_ID FROM THEGURU_VIEW WHERE VIEW_NAME = TABLENAME);

	-- Iterate through the join tables
	OPEN CSR_JOINS;

	JOINS_LOOP: LOOP
		FETCH CSR_JOINS INTO
			VAR_JOIN_ID, VAR_JOIN_TYPE, VAR_JOIN_TABLE, VAR_JOIN_TABLE_IS_VIEW, VAR_JOIN_TABLE_ALIAS, VAR_JOIN_TABLE_COLUMN_PREFIX, VAR_JOIN_CRITERIA, VAR_JOIN_TABLE_FIELD_GROUP_PREFIX, VAR_JOIN_TABLE_FIELD_GROUP_OVERRIDE, VAR_JOIN_TABLE_PARENT_ENTITY_TYPE, VAR_JOIN_TABLE_SUB_FIELD_NAME, VAR_JOIN_TABLE_DEFAULT_PAGE_TYPE, VAR_JOIN_TABLE_USE_PARENT_FIELD_GROUP_PREFIXES;

		IF CSR_END THEN
			LEAVE JOINS_LOOP;
		END IF;

    -- If the parent specified to use the parent field group prefixes, then use that setting
    IF (USEPARENTFIELDGROUPPREFIXES) THEN
      SET VAR_JOIN_TABLE_USE_PARENT_FIELD_GROUP_PREFIXES = USEPARENTFIELDGROUPPREFIXES;
    END IF;

		IF VAR_JOIN_TABLE_IS_VIEW THEN
			SELECT PRIMARY_TABLE, PRIMARY_TABLE_IS_VIEW, PRIMARY_TABLE_COLUMN_PREFIX, FIELD_GROUP_PREFIX, PARENT_ENTITY_TYPE, SUB_FIELD_NAME, DEFAULT_PAGE_TYPE
			INTO VAR_PRIMARY_TABLE, VAR_PRIMARY_TABLE_IS_VIEW, VAR_PRIMARY_TABLE_COLUMN_PREFIX, VAR_PRIMARY_TABLE_FIELD_GROUP_PREFIX, VAR_PRIMARY_TABLE_PARENT_ENTITY_TYPE, VAR_PRIMARY_TABLE_SUB_FIELD_NAME, VAR_PRIMARY_TABLE_DEFAULT_PAGE_TYPE
			FROM THEGURU_VIEW WHERE VIEW_NAME = VAR_JOIN_TABLE;
			CALL GENERATE_FIELD_DEFINITIONS_PROCESS_TABLE(VIEWNAME, VAR_JOIN_TABLE, TRUE, CASE WHEN USEPARENTFIELDGROUPPREFIXES = TRUE THEN CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), VAR_JOIN_TABLE_COLUMN_PREFIX) ELSE VAR_JOIN_TABLE_COLUMN_PREFIX END, CASE WHEN USEPARENTFIELDGROUPPREFIXES = TRUE THEN CONCAT(IFNULL(FIELDGROUPPREFIX, ''), VAR_JOIN_TABLE_FIELD_GROUP_PREFIX) ELSE VAR_JOIN_TABLE_FIELD_GROUP_PREFIX END, VAR_JOIN_TABLE_FIELD_GROUP_OVERRIDE, VAR_JOIN_TABLE_PARENT_ENTITY_TYPE, VAR_JOIN_TABLE_SUB_FIELD_NAME, VAR_JOIN_TABLE_DEFAULT_PAGE_TYPE, VAR_JOIN_TABLE_USE_PARENT_FIELD_GROUP_PREFIXES);
			-- CALL GENERATE_FIELD_DEFINITIONS_PROCESS_TABLE(VIEWNAME, VAR_PRIMARY_TABLE, VAR_PRIMARY_TABLE_IS_VIEW, VAR_PRIMARY_TABLE_COLUMN_PREFIX, CONCAT(IFNULL(FIELDGROUPPREFIX, ''), IFNULL(VAR_JOIN_TABLE_FIELD_GROUP_PREFIX, '')), VAR_JOIN_TABLE_FIELD_GROUP_OVERRIDE, VAR_PRIMARY_TABLE_PARENT_ENTITY_TYPE, VAR_PRIMARY_TABLE_SUB_FIELD_NAME, VAR_PRIMARY_TABLE_DEFAULT_PAGE_TYPE);
            SET CSR_END = 0;
		ELSE
			CALL GENERATE_FIELD_DEFINITIONS_BUILD_FIELDS(VIEWNAME, VAR_JOIN_TABLE, CONCAT(CASE WHEN VIEWNAME <> TABLENAME THEN IFNULL(TABLECOLUMNPREFIX, '') ELSE '' END, IFNULL(VAR_JOIN_TABLE_COLUMN_PREFIX, '')), CONCAT(IFNULL(FIELDGROUPPREFIX, ''), IFNULL(VAR_JOIN_TABLE_FIELD_GROUP_PREFIX,'')), VAR_JOIN_TABLE_FIELD_GROUP_OVERRIDE, VAR_JOIN_TABLE_PARENT_ENTITY_TYPE, VAR_JOIN_TABLE_SUB_FIELD_NAME, VAR_JOIN_TABLE_DEFAULT_PAGE_TYPE);
            SET CSR_END = 0;
		END IF;
	END LOOP;
	CLOSE CSR_JOINS;
	SET CSR_END = 0;
END;
$$


DROP PROCEDURE IF EXISTS GENERATE_FIELD_DEFINITIONS_BUILD_FIELDS$$

CREATE PROCEDURE `GENERATE_FIELD_DEFINITIONS_BUILD_FIELDS`(VIEWNAME VARCHAR(255), TABLENAME VARCHAR(255), TABLECOLUMNPREFIX VARCHAR(255), FIELDGROUPPREFIX VARCHAR(255), FIELDGROUPOVERRIDE VARCHAR(255), PARENTENTITYTYPE VARCHAR(255), SUBFIELDNAME VARCHAR(255), DEFAULTPAGETYPE VARCHAR(255))
BEGIN
	DECLARE CSR_END INT DEFAULT 0;
	DECLARE VAR_FIELD_ORDER INT;
	DECLARE VAR_FIELD_DEFINITION_ID VARCHAR(255);
	DECLARE VAR_SECONDARY_FIELD_DEFINITION_ID VARCHAR(255);
	DECLARE VAR_SECTION_LABEL VARCHAR(255);
	DECLARE VAR_SECTION_ORDER INT;
	DECLARE VAR_FIELD_LABEL VARCHAR(255);
	DECLARE VAR_ENTITY_TYPE VARCHAR(255);
	DECLARE VAR_FIELD_NAME VARCHAR(255);
	DECLARE VAR_FIELD_TYPE VARCHAR(255);
	DECLARE VAR_REFERENCE_TYPE VARCHAR(255);
	
	DECLARE VAR_COLUMN_NAME VARCHAR(255);
	DECLARE VAR_COLUMN_TYPE VARCHAR(255);
    
	DECLARE VAR_FIELD_GROUP VARCHAR(255);
    DECLARE VAR_DISPLAY_NAME VARCHAR(255);
	DECLARE VAR_ADDITIONAL_DEF_COLUMN_NAME VARCHAR(4000);
    DECLARE VAR_ALIAS_NAME VARCHAR(255);
    DECLARE VAR_ADDITIONAL_DEF_FIELD_TYPE INT;
	DECLARE CSR_FIELD_DEFINITIONS CURSOR FOR
    SELECT DISTINCT
		FIELD_ORDER, FIELD_DEFINITION_ID, SECONDARY_FIELD_DEFINITION_ID, SECTION_LABEL, SECTION_ORDER,
		FIELD_LABEL, ENTITY_TYPE, FIELD_NAME, FIELD_TYPE, REFERENCE_TYPE
    FROM TEMP_OL_FIELD_DEFINITIONS
    WHERE ENTITY_TYPE = GET_ENTITY_TYPE_FOR_TABLE(TABLENAME)
    AND FIELD_NAME NOT IN (SELECT FIELD_NAME FROM THEGURU_TABLE_FIELD_EXCLUSIONS WHERE TABLE_NAME = TABLENAME)
    AND FIELD_NAME LIKE '%customFieldMap%'
    AND PAGE_TYPE NOT LIKE '%View'
	UNION
    SELECT DISTINCT
		FIELD_ORDER, FIELD_DEFINITION_ID, SECONDARY_FIELD_DEFINITION_ID, SECTION_LABEL, SECTION_ORDER,
		FIELD_LABEL, ENTITY_TYPE, SUBSTRING(SECONDARY_FIELD_DEFINITION_ID, LOCATE(CONCAT(SUBFIELDNAME, '.'), SECONDARY_FIELD_DEFINITION_ID) + LENGTH(CONCAT(SUBFIELDNAME, '.')), LENGTH(SECONDARY_FIELD_DEFINITION_ID)), FIELD_TYPE, REFERENCE_TYPE
    FROM TEMP_OL_FIELD_DEFINITIONS
	WHERE ENTITY_TYPE = PARENTENTITYTYPE
	AND FIELD_NAME = SUBFIELDNAME
    AND SECONDARY_FIELD_DEFINITION_ID LIKE '%customFieldMap%'
	AND SECONDARY_FIELD_DEFINITION_ID NOT IN (SELECT FIELD_NAME FROM THEGURU_TABLE_FIELD_EXCLUSIONS WHERE TABLE_NAME = TABLENAME)
    AND PAGE_TYPE NOT LIKE '%View';
	DECLARE CSR_FIELDS CURSOR FOR
		SELECT
			COLUMN_NAME, DATA_TYPE
		FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
        AND TABLE_NAME = TABLENAME
        AND COLUMN_NAME NOT IN (SELECT FIELD_NAME FROM THEGURU_TABLE_FIELD_EXCLUSIONS WHERE TABLE_NAME = TABLENAME);
	DECLARE CSR_ADDITIONAL_FIELD_DEFINITIONS CURSOR FOR
    SELECT DISTINCT
        FIELD_GROUP, DISPLAY_NAME, COLUMN_NAME, ALIAS_NAME, FIELD_TYPE
    FROM THEGURU_TABLE_ADDITIONAL_FIELD_DEFINITIONS
    WHERE TABLE_NAME = TABLENAME;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET CSR_END = 1;
	
	OPEN CSR_FIELDS;
	PRIMARY_FIELDS_LOOP: LOOP
		FETCH CSR_FIELDS INTO
			VAR_COLUMN_NAME, VAR_COLUMN_TYPE;
		IF CSR_END THEN
			LEAVE PRIMARY_FIELDS_LOOP;
		END IF;
		SET VAR_FIELD_ORDER = 0;
		SET VAR_FIELD_DEFINITION_ID = '';
		SET VAR_SECONDARY_FIELD_DEFINITION_ID = '';
		SET VAR_SECTION_LABEL = '';
		SET VAR_SECTION_ORDER = 0;
		SET VAR_FIELD_LABEL = '';
		SET VAR_ENTITY_TYPE = '';
		SET VAR_FIELD_NAME = '';
		SET VAR_FIELD_TYPE = '';
		SET VAR_REFERENCE_TYPE = '';
		IF (LENGTH(IFNULL(PARENTENTITYTYPE, '')) = 0) THEN
			SELECT DISTINCT
				FIELD_ORDER, FIELD_DEFINITION_ID, SECONDARY_FIELD_DEFINITION_ID, SECTION_LABEL, SECTION_ORDER,
				FIELD_LABEL, ENTITY_TYPE, FIELD_NAME, FIELD_TYPE, REFERENCE_TYPE
			INTO
				VAR_FIELD_ORDER, VAR_FIELD_DEFINITION_ID, VAR_SECONDARY_FIELD_DEFINITION_ID, VAR_SECTION_LABEL, VAR_SECTION_ORDER,
				VAR_FIELD_LABEL, VAR_ENTITY_TYPE, VAR_FIELD_NAME, VAR_FIELD_TYPE, VAR_REFERENCE_TYPE
			FROM TEMP_OL_FIELD_DEFINITIONS
			WHERE ENTITY_TYPE = GET_ENTITY_TYPE_FOR_TABLE(TABLENAME)
			AND FIELD_NAME = REPLACE(VAR_COLUMN_NAME, '_', '')
			AND FIELD_NAME NOT IN (SELECT FIELD_NAME FROM THEGURU_TABLE_FIELD_EXCLUSIONS WHERE TABLE_NAME = TABLENAME)
			AND IFNULL(SECTION_LABEL, '') <> ''
			AND SECTION_LABEL NOT LIKE '%EDIT%'
			ORDER BY
				CASE WHEN LENGTH(IFNULL(DEFAULTPAGETYPE, '')) > 0 AND PAGE_TYPE = DEFAULTPAGETYPE THEN 1 ELSE 2 END ASC,
				(SELECT COUNT(*) FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.SECTION_LABEL = TEMP_OL_FIELD_DEFINITIONS.SECTION_LABEL) DESC
			LIMIT 1;
		ELSE
			SELECT DISTINCT
				FIELD_ORDER, FIELD_DEFINITION_ID, SECONDARY_FIELD_DEFINITION_ID, SECTION_LABEL, SECTION_ORDER,
				FIELD_LABEL, ENTITY_TYPE, SUBSTRING(SECONDARY_FIELD_DEFINITION_ID, LOCATE(CONCAT(SUBFIELDNAME, '.'), SECONDARY_FIELD_DEFINITION_ID) + LENGTH(CONCAT(SUBFIELDNAME, '.')), LENGTH(SECONDARY_FIELD_DEFINITION_ID)), FIELD_TYPE, REFERENCE_TYPE
			INTO
				VAR_FIELD_ORDER, VAR_FIELD_DEFINITION_ID, VAR_SECONDARY_FIELD_DEFINITION_ID, VAR_SECTION_LABEL, VAR_SECTION_ORDER,
				VAR_FIELD_LABEL, VAR_ENTITY_TYPE, VAR_FIELD_NAME, VAR_FIELD_TYPE, VAR_REFERENCE_TYPE
			FROM TEMP_OL_FIELD_DEFINITIONS
			WHERE ENTITY_TYPE = PARENTENTITYTYPE
			AND FIELD_NAME = SUBFIELDNAME
			AND REPLACE(SUBSTRING(SECONDARY_FIELD_DEFINITION_ID, LOCATE(CONCAT(SUBFIELDNAME, '.'), SECONDARY_FIELD_DEFINITION_ID) + LENGTH(CONCAT(SUBFIELDNAME, '.')), LENGTH(SECONDARY_FIELD_DEFINITION_ID)), 'ReadOnly', '') = REPLACE(VAR_COLUMN_NAME, '_', '')
			AND REPLACE(SECONDARY_FIELD_DEFINITION_ID, CONCAT(SUBFIELDNAME, '.'), '') NOT IN (SELECT FIELD_NAME FROM THEGURU_TABLE_FIELD_EXCLUSIONS WHERE TABLE_NAME = TABLENAME)
			AND IFNULL(SECTION_LABEL, '') <> ''
			AND SECTION_LABEL NOT LIKE '%EDIT%'
			ORDER BY
				CASE WHEN LENGTH(IFNULL(DEFAULTPAGETYPE, '')) > 0 AND PAGE_TYPE = DEFAULTPAGETYPE THEN 1 ELSE 2 END ASC,
				(SELECT COUNT(*) FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.SECTION_LABEL = TEMP_OL_FIELD_DEFINITIONS.SECTION_LABEL) DESC
			LIMIT 1;
		END IF;
		IF CSR_END = 0 THEN
            IF VAR_FIELD_TYPE = 'CODE' OR VAR_FIELD_TYPE = 'CODE_OTHER_DISPLAY' OR VAR_FIELD_TYPE = 'PICKLIST' OR VAR_FIELD_TYPE = 'PICKLIST_DISPLAY' THEN
                
                WHILE LOCATE('.', VAR_FIELD_DEFINITION_ID) DO
                    SET VAR_FIELD_DEFINITION_ID = SUBSTR(VAR_FIELD_DEFINITION_ID, LOCATE('.', VAR_FIELD_DEFINITION_ID) + 1);
                END WHILE;
                
                INSERT THEGURU_FIELD_DEFINITIONS
                    (VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
                SELECT
                    VIEWNAME,
                    CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                        CASE
                            WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                                  WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, ''), '_SHORT_DISPLAY_NAME'), 1, 64)) IS NOT NULL THEN
                                  (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                                  WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, ''), '_SHORT_DISPLAY_NAME'), 1, 64))
                            WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                            ELSE IFNULL(VAR_SECTION_LABEL, '')
                        END) AS FIELD_GROUP,
                    CONCAT('GETPICKLISTDISPLAYVALUE(''', VAR_FIELD_DEFINITION_ID, ''', ',
                        CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, '')), ')') AS COLUMN_NAME,
                    SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, ''), '_SDN'), 1, 64) AS ALIAS_NAME,
                    CONCAT(VAR_FIELD_LABEL, ' Short Display Name') AS DISPLAY_TEXT,
                    1 AS FIELD_TYPE,
                    CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
                    (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
                
                INSERT THEGURU_FIELD_DEFINITIONS
                    (VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
                SELECT
                    VIEWNAME,
                    CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                        CASE
                            WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                                  WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, ''), '_LONG_DISPLAY_NAME'), 1, 64)) IS NOT NULL THEN
                                  (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                                  WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, ''), '_LONG_DISPLAY_NAME'), 1, 64))
                            WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                            ELSE IFNULL(VAR_SECTION_LABEL, '')
                        END) AS FIELD_GROUP,
                    CONCAT('GETPICKLISTLONGDESCRIPTION(''', VAR_FIELD_DEFINITION_ID, ''', ',
                        CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, '')), ')') AS COLUMN_NAME,
                    SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, ''), '_LDN'), 1, 64) AS ALIAS_NAME,
                    CONCAT(VAR_FIELD_LABEL, ' Long Display Name') AS DISPLAY_TEXT,
                    1 AS FIELD_TYPE,
                    CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
                    (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
                
                INSERT THEGURU_FIELD_DEFINITIONS
                    (VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
                SELECT
                    VIEWNAME,
                    CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                        CASE
                            WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                                  WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, ''), '_DESCRIPTION'), 1, 64)) IS NOT NULL THEN
                                  (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                                  WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, ''), '_DESCRIPTION'), 1, 64))
                            WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                            ELSE IFNULL(VAR_SECTION_LABEL, '')
                        END) AS FIELD_GROUP,
                    CONCAT('GETPICKLISTDETAIL(''', VAR_FIELD_DEFINITION_ID, ''', ',
                        CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, '')), ')') AS COLUMN_NAME,
                    SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, ''), '_DESC'), 1, 64) AS ALIAS_NAME,
                    CONCAT(VAR_FIELD_LABEL, ' Description') AS DISPLAY_TEXT,
                    1 AS FIELD_TYPE,
                    CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
                    (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
            ELSE
                INSERT THEGURU_FIELD_DEFINITIONS
                    (VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
                SELECT
                    VIEWNAME,
                    CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                        CASE
                            WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                                  WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, '')), 1, 64)) IS NOT NULL THEN
                                  (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                                  WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, '')), 1, 64))
                            WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                            ELSE IFNULL(VAR_SECTION_LABEL, '')
                        END) AS FIELD_GROUP,
                    CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, '')) AS COLUMN_NAME,
                    SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, '')), 1, 64) AS ALIAS_NAME,
                    VAR_FIELD_LABEL,
                    CASE
                    	WHEN VAR_FIELD_TYPE = 'CHECKBOX' THEN 6
                        WHEN VAR_COLUMN_TYPE = 'tinyint' THEN 2
                        WHEN VAR_COLUMN_TYPE = 'int' THEN 2
                        WHEN VAR_COLUMN_TYPE = 'smallint' THEN 2
                        WHEN VAR_COLUMN_TYPE = 'bigint' THEN 2
                        WHEN VAR_COLUMN_TYPE = 'datetime' THEN 4
                        WHEN VAR_COLUMN_TYPE = 'decimal' THEN 5
                        WHEN VAR_COLUMN_TYPE = 'bit' THEN 6
                        ELSE 1
                    END,
                    CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
                    (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI'));
            END IF;
        ELSE
            SET CSR_END = 0;
        END IF;
	END LOOP;
	SET CSR_END = 0;
	CLOSE CSR_FIELDS;
	SET VAR_FIELD_ORDER = 0;
	SET VAR_FIELD_DEFINITION_ID = '';
	SET VAR_SECONDARY_FIELD_DEFINITION_ID = '';
	SET VAR_SECTION_LABEL = '';
	SET VAR_SECTION_ORDER = 0;
	SET VAR_FIELD_LABEL = '';
	SET VAR_ENTITY_TYPE = '';
	SET VAR_FIELD_NAME = '';
	SET VAR_FIELD_TYPE = '';
	SET VAR_REFERENCE_TYPE = '';
	OPEN CSR_FIELD_DEFINITIONS;
    
	FIELD_DEFINITIONS_LOOP: LOOP
		FETCH CSR_FIELD_DEFINITIONS INTO
			VAR_FIELD_ORDER, VAR_FIELD_DEFINITION_ID, VAR_SECONDARY_FIELD_DEFINITION_ID, VAR_SECTION_LABEL, VAR_SECTION_ORDER,
			VAR_FIELD_LABEL, VAR_ENTITY_TYPE, VAR_FIELD_NAME, VAR_FIELD_TYPE, VAR_REFERENCE_TYPE;
		IF CSR_END THEN
			LEAVE FIELD_DEFINITIONS_LOOP;
		END IF;
		SET VAR_FIELD_NAME = REPLACE(VAR_FIELD_NAME, 'ReadOnly]', ']');
		
		IF VAR_FIELD_TYPE = 'TEXT' OR VAR_FIELD_TYPE = 'LONG_TEXT' OR VAR_FIELD_TYPE = 'READ_ONLY_TEXT' THEN
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64) AS ALIAS_NAME,
				VAR_FIELD_LABEL AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
		ELSEIF VAR_FIELD_TYPE = 'CHECKBOX' THEN
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64) AS ALIAS_NAME,
				VAR_FIELD_LABEL AS DISPLAY_TEXT,
				6 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
		ELSEIF VAR_FIELD_TYPE = 'DATE' THEN
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMDATEFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64) AS ALIAS_NAME,
				VAR_FIELD_LABEL AS DISPLAY_TEXT,
				4 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
		ELSEIF VAR_FIELD_TYPE = 'NUMBER' THEN
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64) AS ALIAS_NAME,
				VAR_FIELD_LABEL AS DISPLAY_TEXT,
				2 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
		ELSEIF VAR_FIELD_TYPE = 'PERCENTAGE' THEN
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64) AS ALIAS_NAME,
				VAR_FIELD_LABEL AS DISPLAY_TEXT,
				5 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
        ELSEIF VAR_FIELD_TYPE = 'MULTI_CODE_ADDITIONAL' THEN
            
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELDCONCATENATED(',
                    CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
                    (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
                        ', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64) AS ALIAS_NAME,
				VAR_FIELD_LABEL AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
            
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), 'ADDITIONAL'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), 'ADDITIONAL'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				REPLACE(CONCAT('GETCUSTOMFIELDCONCATENATED(',
                    CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
                    (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
                        ', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')'), '.', '.additional_') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), 'ADD'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' - Additional') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
		ELSEIF VAR_FIELD_TYPE = 'PICKLIST' THEN
            
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_SHORT_DISPLAY_NAME'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_SHORT_DISPLAY_NAME'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETPICKLISTDISPLAYVALUE(''', VAR_FIELD_NAME, ''', GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '''))') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_SDN'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' Short Display Name') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
            
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_LONG_DISPLAY_NAME'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_LONG_DISPLAY_NAME'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETPICKLISTLONGDESCRIPTION(''', VAR_FIELD_NAME, ''', GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '''))') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_LDN'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' Long Display Name') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
            
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_DESCRIPTION'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_DESCRIPTION'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETPICKLISTDETAIL(''', VAR_FIELD_NAME, ''', GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '''))') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_DESC'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' Description') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
		ELSEIF VAR_FIELD_TYPE = 'MULTI_PICKLIST' THEN
			
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_SHORT_DISPLAY_NAME'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_SHORT_DISPLAY_NAME'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELDDISPLAYVALUECONCATENATED(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''', ''', VAR_FIELD_NAME, ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_SDN'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' Short Display Names') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
			
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_LONG_DISPLAY_NAME'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_LONG_DISPLAY_NAME'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELDLONGDESCRIPTIONCONCATENATED(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''', ''', VAR_FIELD_NAME, ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_LDN'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' Long Display Names') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
			
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_DESCRIPTION'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), 'DESCRIPTION'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELDPICKLISTDETAILCONCATENATED(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''', ''', VAR_FIELD_NAME, ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_DESC'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' Description Names') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
        ELSEIF VAR_FIELD_TYPE = 'MULTI_PICKLIST_ADDITIONAL' THEN
			
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_SHORT_DISPLAY_NAME'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_SHORT_DISPLAY_NAME'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELDDISPLAYVALUECONCATENATED(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''', ''', VAR_FIELD_NAME, ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_SDN'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' Short Display Names') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
			
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_LONG_DISPLAY_NAME'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_LONG_DISPLAY_NAME'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELDLONGDESCRIPTIONCONCATENATED(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''', ''', VAR_FIELD_NAME, ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_LDN'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' Long Display Names') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
			
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_DESCRIPTION'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_DESCRIPTION'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELDPICKLISTDETAILCONCATENATED(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''', ''', VAR_FIELD_NAME, ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_DESC'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' Description Names') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
            
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), 'ADDITIONAL'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), 'ADDITIONAL'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELDCONCATENATED(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(
					REPLACE(VAR_FIELD_NAME, CASE WHEN VAR_FIELD_NAME LIKE '%.%' THEN '.' ELSE '[' END, CASE WHEN VAR_FIELD_NAME LIKE '%.%' THEN '.additional_' ELSE '[additional_' END),
					'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), 'ADD'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' - Additional') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
        ELSEIF VAR_FIELD_TYPE = 'MULTI_QUERY_LOOKUP' AND VAR_REFERENCE_TYPE = 'constituent' THEN
            
            INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNUMBERS'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNUMBERS'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMRELATIONSHIPACCOUNTNUMBERSCONCATENATED(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCTNBRS'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' - ', 'Account Numbers') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
            
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNAMES'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNAMES'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMRELATIONSHIPNAMESCONCATENATED(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCTNAMES'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' - ', 'Account Names') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
        ELSEIF VAR_FIELD_TYPE = 'QUERY_LOOKUP' AND VAR_REFERENCE_TYPE = 'constituent' THEN
            
            INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNUMBER'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNUMBER'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCONSTITUENTACCOUNTNUMBER(GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '''))') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCTNBR'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' - ', 'Account Number') AS DISPLAY_TEXT,
				2 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
            
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNAME'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNAME'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETCONSTITUENTDISPLAYNAME(GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '''))') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCTNAME'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' - ', 'Account Name') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
        ELSEIF VAR_FIELD_TYPE = 'QUERY_LOOKUP_DISPLAY' AND VAR_REFERENCE_TYPE = 'constituent' THEN
            
            INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNUMBER'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNUMBER'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETCONSTITUENTACCOUNTNUMBER(GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '''))') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCTNBR'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' - ', 'Account Number') AS DISPLAY_TEXT,
				2 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
            
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNAME'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNAME'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCONSTITUENTDISPLAYNAME(GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '''))') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCTNAME'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' - ', 'Account Name') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
        ELSEIF VAR_FIELD_TYPE = 'QUERY_LOOKUP_OTHER' AND VAR_REFERENCE_TYPE = 'constituent' THEN
            
            INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNUMBER'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNUMBER'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCONSTITUENTACCOUNTNUMBER(GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '''))') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCTNBR'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' - ', 'Account Number') AS DISPLAY_TEXT,
				2 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
            
            INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCONSTITUENTQUERYLOOKUPOTHER(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' - ', 'Account Name') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
		ELSEIF VAR_FIELD_TYPE = 'CUSTOM_TABLE_REFERENCE' THEN
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMTABLETITLEFIELDVALUES(''', VAR_REFERENCE_TYPE, ''', GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '''))') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64) AS ALIAS_NAME,
				VAR_FIELD_LABEL AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;
		ELSEIF VAR_FIELD_TYPE = 'MULTI_CUSTOM_TABLE_REFERENCE' THEN
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMTABLETITLEFIELDVALUESCONCATENATED(''', VAR_REFERENCE_TYPE, ''', ',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64) AS ALIAS_NAME,
				VAR_FIELD_LABEL AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY;	
    END IF;
	END LOOP;
    SET CSR_END = 0;
    
	OPEN CSR_ADDITIONAL_FIELD_DEFINITIONS;
	ADDITIONAL_FIELD_DEFINITIONS_LOOP: LOOP
		FETCH CSR_ADDITIONAL_FIELD_DEFINITIONS INTO
            VAR_FIELD_GROUP, VAR_DISPLAY_NAME, VAR_ADDITIONAL_DEF_COLUMN_NAME, VAR_ALIAS_NAME, VAR_ADDITIONAL_DEF_FIELD_TYPE;
		IF CSR_END THEN
			LEAVE ADDITIONAL_FIELD_DEFINITIONS_LOOP;
		END IF;
		INSERT THEGURU_FIELD_DEFINITIONS
			(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY)
		SELECT
			VIEWNAME,
			CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                CASE
                    WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                          WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_ALIAS_NAME, '')), 1, 64)) IS NOT NULL THEN
                          (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                          WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_ALIAS_NAME, '')), 1, 64))
                    WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                    ELSE IFNULL(VAR_FIELD_GROUP,'')
                END),
            CONCAT(REPLACE(VAR_ADDITIONAL_DEF_COLUMN_NAME, '${COLUMN_PREFIX}', IFNULL(TABLECOLUMNPREFIX, ''))),
			SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_ALIAS_NAME, '')), 1, 64) AS ALIAS_NAME,
			VAR_DISPLAY_NAME,
            VAR_ADDITIONAL_DEF_FIELD_TYPE,
			CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
			(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
				WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
				AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI'));
	END LOOP;
	SET CSR_END = 0;
	CLOSE CSR_ADDITIONAL_FIELD_DEFINITIONS;
END;
$$

DROP PROCEDURE IF EXISTS GENERATE_VIEWS$$

CREATE PROCEDURE GENERATE_VIEWS(VIEWNAME VARCHAR(255))
BEGIN
	DECLARE CSR_END INT DEFAULT 0;
	DECLARE VAR_VIEW_DROP_TEXT VARCHAR(1000);
	DECLARE VAR_VIEW_SELECT_TEXT TEXT;
	DECLARE VAR_VIEW_FROM_TEXT VARCHAR(8000);
	DECLARE VAR_TABLE_NAME VARCHAR(255);
	DECLARE VAR_FIRST_FIELD BIT;
	DECLARE VAR_NEW_LINE VARCHAR(10);
	DECLARE VAR_TAB VARCHAR(10);

	-- THEGURU_VIEW Variables
	DECLARE VAR_VIEW_ID INTEGER;
	DECLARE VAR_VIEW_NAME VARCHAR(255);
	DECLARE VAR_VIEW_DISPLAY_TEXT VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_IS_VIEW BIT;
	DECLARE VAR_PRIMARY_TABLE_ALIAS VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_COLUMN_PREFIX VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_INCLUDE_ALL_FIELDS BIT;
	DECLARE VAR_VIEW_SQL_OVERRIDE TEXT;
    DECLARE VAR_WHERE_CLAUSE VARCHAR(8000);

	-- INFORMATION_SCHEMA.COLUMNS Variables
	DECLARE VAR_FIELD_NAME VARCHAR(255);
	DECLARE VAR_FIELD_TYPE VARCHAR(255);

	-- THEGURU_JOIN Variables
	DECLARE VAR_JOIN_ID INTEGER;
	DECLARE VAR_JOIN_TYPE VARCHAR(20);
	DECLARE VAR_JOIN_TABLE VARCHAR(255);
	DECLARE VAR_JOIN_TABLE_IS_VIEW BIT;
	DECLARE VAR_JOIN_TABLE_ALIAS VARCHAR(255);
	DECLARE VAR_JOIN_TABLE_COLUMN_PREFIX VARCHAR(255);
	DECLARE VAR_JOIN_CRITERIA VARCHAR(2000);
	DECLARE VAR_JOIN_TABLE_INCLUDE_ALL_FIELDS BIT;

	-- THEGURU_TABLE_ADDITIONAL_FIELD Variables
	DECLARE VAR_ADDITIONAL_FIELD_TABLE_NAME VARCHAR(255);
	DECLARE VAR_ADDITIONAL_FIELD_FIELD_TEXT VARCHAR(2000);
	DECLARE VAR_ADDITIONAL_FIELD_FIELD_ALIAS VARCHAR(255);


	DECLARE CSR_VIEWS CURSOR FOR
		SELECT
			VIEW_ID, VIEW_NAME, VIEW_DISPLAY_TEXT, PRIMARY_TABLE, PRIMARY_TABLE_IS_VIEW, PRIMARY_TABLE_ALIAS, PRIMARY_TABLE_COLUMN_PREFIX, INCLUDE_ALL_FIELDS, WHERE_CLAUSE, SQL_OVERRIDE
		FROM THEGURU_VIEW
		WHERE VIEW_NAME = VIEWNAME OR VIEWNAME IS NULL
		ORDER BY SORT_ORDER;

	DECLARE CSR_FIELDS CURSOR FOR
		SELECT
			COLUMN_NAME, DATA_TYPE
		FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '') AND TABLE_NAME = VAR_TABLE_NAME;

	DECLARE CSR_JOINS CURSOR FOR
		SELECT
			JOIN_ID, JOIN_TYPE, JOIN_TABLE, JOIN_TABLE_IS_VIEW, JOIN_TABLE_ALIAS, JOIN_TABLE_COLUMN_PREFIX, JOIN_CRITERIA, INCLUDE_ALL_FIELDS
		FROM THEGURU_VIEW_JOIN
		WHERE THEGURU_VIEW_JOIN.VIEW_ID = VAR_VIEW_ID;

	DECLARE CSR_ADDITIONAL_FIELDS CURSOR FOR
		SELECT
			TABLE_NAME, FIELD_TEXT, FIELD_ALIAS
		FROM THEGURU_TABLE_ADDITIONAL_FIELD
		WHERE THEGURU_TABLE_ADDITIONAL_FIELD.TABLE_NAME = VAR_TABLE_NAME;

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET CSR_END = 1;

	SET VAR_FIRST_FIELD = TRUE;
	SET VAR_NEW_LINE = '\n';
	SET VAR_TAB = '\t';

	DELETE FROM THEGURU_GENERATED_VIEWS;

	-- Iterate through the views
	OPEN CSR_VIEWS;

	VIEWS_LOOP: LOOP
		FETCH CSR_VIEWS INTO
			VAR_VIEW_ID, VAR_VIEW_NAME, VAR_VIEW_DISPLAY_TEXT, VAR_PRIMARY_TABLE, VAR_PRIMARY_TABLE_IS_VIEW, VAR_PRIMARY_TABLE_ALIAS, VAR_PRIMARY_TABLE_COLUMN_PREFIX, VAR_PRIMARY_TABLE_INCLUDE_ALL_FIELDS, VAR_WHERE_CLAUSE, VAR_VIEW_SQL_OVERRIDE;

		IF CSR_END THEN
			LEAVE VIEWS_LOOP;
		END IF;

		SET VAR_FIRST_FIELD = TRUE;
		SET VAR_VIEW_DROP_TEXT = (SELECT CONCAT('DROP VIEW IF EXISTS ', VAR_VIEW_NAME, ';'));

		IF LENGTH(IFNULL(VAR_VIEW_SQL_OVERRIDE, '')) = 0 THEN
			SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_NEW_LINE, 'CREATE VIEW ', VAR_VIEW_NAME, VAR_NEW_LINE,
				'AS', VAR_NEW_LINE, VAR_TAB, 'SELECT'));
			SET VAR_VIEW_FROM_TEXT = (SELECT CONCAT('FROM ', VAR_PRIMARY_TABLE, ' AS ', VAR_PRIMARY_TABLE_ALIAS));

			SET VAR_TABLE_NAME = VAR_PRIMARY_TABLE;

			IF VAR_PRIMARY_TABLE_INCLUDE_ALL_FIELDS THEN
				--  Iterate through the fields of the primary table
				OPEN CSR_FIELDS;
				PRIMARY_FIELDS_LOOP: LOOP
					FETCH CSR_FIELDS INTO
						VAR_FIELD_NAME, VAR_FIELD_TYPE;

					IF CSR_END THEN
						LEAVE PRIMARY_FIELDS_LOOP;
					END IF;

					IF VAR_FIRST_FIELD THEN
						SET VAR_FIRST_FIELD = FALSE;
					ELSE
						SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, ','));
					END IF;

					SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, VAR_NEW_LINE, VAR_TAB, VAR_TAB, VAR_PRIMARY_TABLE_ALIAS, '.', VAR_FIELD_NAME, ' AS ', VAR_PRIMARY_TABLE_COLUMN_PREFIX, VAR_FIELD_NAME));
				END LOOP;
				SET CSR_END = 0;
				CLOSE CSR_FIELDS;
			END IF;

			OPEN CSR_ADDITIONAL_FIELDS;
			ADDITIONAL_FIELDS_LOOP: LOOP
				FETCH CSR_ADDITIONAL_FIELDS INTO
					VAR_ADDITIONAL_FIELD_TABLE_NAME, VAR_ADDITIONAL_FIELD_FIELD_TEXT, VAR_ADDITIONAL_FIELD_FIELD_ALIAS;

				IF CSR_END THEN
					LEAVE ADDITIONAL_FIELDS_LOOP;
				END IF;

				IF VAR_FIRST_FIELD THEN
					SET VAR_FIRST_FIELD = FALSE;
				ELSE
					SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, ','));
				END IF;

				SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, VAR_NEW_LINE, VAR_TAB, VAR_TAB, REPLACE(VAR_ADDITIONAL_FIELD_FIELD_TEXT, '${ALIAS_REPLACEMENT}', VAR_PRIMARY_TABLE_ALIAS), ' AS ', VAR_PRIMARY_TABLE_COLUMN_PREFIX, VAR_ADDITIONAL_FIELD_FIELD_ALIAS));
			END LOOP;
			SET CSR_END = 0;
			CLOSE CSR_ADDITIONAL_FIELDS;


			-- Iterate through the join tables
			OPEN CSR_JOINS;

			JOINS_LOOP: LOOP
				FETCH CSR_JOINS INTO
					VAR_JOIN_ID, VAR_JOIN_TYPE, VAR_JOIN_TABLE, VAR_JOIN_TABLE_IS_VIEW, VAR_JOIN_TABLE_ALIAS, VAR_JOIN_TABLE_COLUMN_PREFIX, VAR_JOIN_CRITERIA, VAR_JOIN_TABLE_INCLUDE_ALL_FIELDS;

				IF CSR_END THEN
					LEAVE JOINS_LOOP;
				END IF;

				SET VAR_VIEW_FROM_TEXT = (SELECT CONCAT(VAR_VIEW_FROM_TEXT, VAR_NEW_LINE, VAR_TAB, LTRIM(CONCAT(VAR_JOIN_TYPE, ' ')), 'JOIN ', VAR_JOIN_TABLE, ' AS ', VAR_JOIN_TABLE_ALIAS,
					' ON ', VAR_JOIN_CRITERIA));

				SET VAR_TABLE_NAME = VAR_JOIN_TABLE;
				IF VAR_JOIN_TABLE_INCLUDE_ALL_FIELDS THEN
					--  Iterate through the fields of the join table
					OPEN CSR_FIELDS;
					PRIMARY_FIELDS_LOOP: LOOP
						FETCH CSR_FIELDS INTO
							VAR_FIELD_NAME, VAR_FIELD_TYPE;

						IF CSR_END THEN
							LEAVE PRIMARY_FIELDS_LOOP;
						END IF;

						IF VAR_FIRST_FIELD THEN
							SET VAR_FIRST_FIELD = FALSE;
						ELSE
							SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, ','));
						END IF;

						SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, VAR_NEW_LINE, VAR_TAB, VAR_TAB, VAR_JOIN_TABLE_ALIAS, '.', VAR_FIELD_NAME, ' AS ', VAR_JOIN_TABLE_COLUMN_PREFIX, VAR_FIELD_NAME));
					END LOOP;
					SET CSR_END = 0;
					CLOSE CSR_FIELDS;
				END IF;

				OPEN CSR_ADDITIONAL_FIELDS;
				ADDITIONAL_FIELDS_LOOP: LOOP
					FETCH CSR_ADDITIONAL_FIELDS INTO
					VAR_ADDITIONAL_FIELD_TABLE_NAME, VAR_ADDITIONAL_FIELD_FIELD_TEXT, VAR_ADDITIONAL_FIELD_FIELD_ALIAS;

					IF CSR_END THEN
						LEAVE ADDITIONAL_FIELDS_LOOP;
					END IF;

					IF VAR_FIRST_FIELD THEN
						SET VAR_FIRST_FIELD = FALSE;
					ELSE
						SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, ','));
					END IF;

					SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, VAR_NEW_LINE, VAR_TAB, VAR_TAB, REPLACE(VAR_ADDITIONAL_FIELD_FIELD_TEXT, '${ALIAS_REPLACEMENT}', VAR_JOIN_TABLE_ALIAS), ' AS ', VAR_JOIN_TABLE_COLUMN_PREFIX, VAR_ADDITIONAL_FIELD_FIELD_ALIAS));
				END LOOP;
				SET CSR_END = 0;
				CLOSE CSR_ADDITIONAL_FIELDS;

			END LOOP;
			SET CSR_END = 0;
			CLOSE CSR_JOINS;

			IF LENGTH(IFNULL(VAR_WHERE_CLAUSE, '')) > 0 THEN
				SET VAR_VIEW_FROM_TEXT = (SELECT CONCAT(VAR_VIEW_FROM_TEXT, VAR_NEW_LINE, VAR_TAB, 'WHERE ', VAR_WHERE_CLAUSE));
			END IF;
		ELSE
			SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_NEW_LINE, 'CREATE VIEW ', VAR_VIEW_NAME, VAR_NEW_LINE,
				'AS', VAR_NEW_LINE, VAR_VIEW_SQL_OVERRIDE));
			SET VAR_VIEW_FROM_TEXT = '';
		END IF;

		INSERT THEGURU_GENERATED_VIEWS
			(VIEW_TEXT)
		SELECT
			VAR_VIEW_DROP_TEXT;

		INSERT THEGURU_GENERATED_VIEWS
			(VIEW_TEXT)
		SELECT
			CONCAT(VAR_VIEW_SELECT_TEXT, VAR_NEW_LINE, VAR_TAB, VAR_VIEW_FROM_TEXT, VAR_NEW_LINE, ';');


        SET @execString = CONCAT('CALL ', REPLACE(DATABASE(), 'theguru', '.'), 'CREATE_VIEW(''', VAR_VIEW_DROP_TEXT, ''');');
		PREPARE statement FROM @execString;
		EXECUTE statement;
		DEALLOCATE PREPARE statement;

		SET @execString = CONCAT('CALL ', REPLACE(DATABASE(), 'theguru', '.'), 'CREATE_VIEW(''', REPLACE(VAR_VIEW_SELECT_TEXT, '''', ''''''), VAR_NEW_LINE, VAR_TAB, REPLACE(VAR_VIEW_FROM_TEXT, '''', ''''''), VAR_NEW_LINE, ';'');');
		PREPARE statement FROM @execString;
		EXECUTE statement;
		DEALLOCATE PREPARE statement;

	END LOOP;
	CLOSE CSR_VIEWS;

END;
$$

