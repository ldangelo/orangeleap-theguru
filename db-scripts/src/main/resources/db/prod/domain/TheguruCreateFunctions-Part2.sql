-- MySQL Administrator dump 1.4
--
-- ------------------------------------------------------
-- Server version	5.0.45


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */$$
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */$$
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */$$
/*!40101 SET NAMES utf8 */$$

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */$$
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */$$
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */$$

-- DELIMITER $$

--
-- Definition of function `COUNTOFVALUES`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `COUNTOFVALUES`(FIELDVALUE TEXT, DELIM VARCHAR(124)) RETURNS int(11)
    DETERMINISTIC
BEGIN DECLARE i INT DEFAULT 0;	-- total number of delimiters
 IF LENGTH(FIELDVALUE) <> 0 THEN SET i = (LENGTH(FIELDVALUE)-LENGTH(REPLACE(FIELDVALUE, DELIM, '')))/LENGTH(DELIM) + 1; END IF; RETURN(i);	-- return
 END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$


--
-- Definition of function `GETCONSTITUENTDISPLAYNAME`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `GETCONSTITUENTDISPLAYNAME`(CONSTITUENTID BIGINT) RETURNS varchar(510) CHARSET utf8
    DETERMINISTIC
BEGIN DECLARE RESULT VARCHAR(510);  SELECT CASE WHEN CONSTITUENT_TYPE = 'individual' THEN CONCAT_WS(', ', LAST_NAME, FIRST_NAME) WHEN CONSTITUENT_TYPE = 'organization' THEN ORGANIZATION_NAME ELSE CONSTITUENT_ID END INTO RESULT FROM CONSTITUENT WHERE CONSTITUENT_ID = CONSTITUENTID;  RETURN(RESULT);	-- return
 END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of function `GETCONSTITUENTDISPLAYNAMES`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `GETCONSTITUENTDISPLAYNAMES`(str TEXT, delim VARCHAR(124)) RETURNS text CHARSET utf8
    DETERMINISTIC
BEGIN DECLARE i INT DEFAULT 0;	-- total number of delimiters
 DECLARE ctr INT DEFAULT 0;	-- counter for the loop
 DECLARE str_len INT;		-- string length,self explanatory
 DECLARE out_str text DEFAULT '';	-- return string holder
 DECLARE temp_str text DEFAULT '';	-- temporary string holder
 DECLARE temp_val VARCHAR(255) DEFAULT '';	-- temporary string holder for query
 SET str_len=LENGTH(str);  IF (str_len > 0) THEN SET i = (LENGTH(str)-LENGTH(REPLACE(str, delim, '')))/LENGTH(delim) + 1;  WHILE(ctr<i) DO SET ctr=ctr+1;  SET temp_str = REPLACE(SUBSTRING(SUBSTRING_INDEX(str, delim, ctr), LENGTH(SUBSTRING_INDEX(str, delim,ctr - 1)) + 1), delim, '');  SELECT GETCONSTITUENTDISPLAYNAME(temp_str) INTO temp_val;  SET out_str=CONCAT(out_str, temp_val, '; '); END WHILE; END IF;  SET out_str=TRIM(TRAILING delim FROM out_str); RETURN(out_str);	-- return
 END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of function `GETCUSTOMFIELD`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `GETCUSTOMFIELD`(ENTITYID INT, ENTITYTYPE VARCHAR(255), FIELDNAME VARCHAR(255)) RETURNS varchar(255) CHARSET utf8 DETERMINISTIC
BEGIN DECLARE FIELDVALUE VARCHAR(255);  SELECT FIELD_VALUE INTO FIELDVALUE FROM CUSTOM_FIELD WHERE ENTITY_ID = ENTITYID AND ENTITY_TYPE = ENTITYTYPE AND FIELD_NAME = FIELDNAME;  RETURN FIELDVALUE; END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of function `GETCUSTOMDATEFIELD`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `GETCUSTOMDATEFIELD`(ENTITYID INT, ENTITYTYPE VARCHAR(255), FIELDNAME VARCHAR(255)) RETURNS varchar(255) CHARSET utf8 DETERMINISTIC
BEGIN DECLARE FIELDVALUE VARCHAR(255); SELECT DATE(FIELD_DATE_VALUE) INTO FIELDVALUE FROM CUSTOM_FIELD WHERE ENTITY_ID = ENTITYID AND ENTITY_TYPE = ENTITYTYPE AND FIELD_NAME = FIELDNAME AND CURDATE() BETWEEN START_DATE AND END_DATE; RETURN FIELDVALUE; END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of function `GETVALUE`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `GETVALUE`(FIELDVALUE TEXT, DELIM VARCHAR(124), VALUEINDEX INT) RETURNS text CHARSET utf8
    DETERMINISTIC
BEGIN DECLARE TEMP_STR text DEFAULT '';	-- temporary string holder
 SET TEMP_STR = REPLACE(SUBSTRING(SUBSTRING_INDEX(FIELDVALUE, DELIM, VALUEINDEX), LENGTH(SUBSTRING_INDEX(FIELDVALUE, DELIM, VALUEINDEX - 1)) + 1), DELIM, ''); RETURN(TEMP_STR);	-- return
 END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of function `SPLITCAMELCASEDSTRING`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `SPLITCAMELCASEDSTRING`(STRING TEXT) RETURNS text CHARSET utf8
    DETERMINISTIC
BEGIN DECLARE COUNTER INT DEFAULT 0;	-- counter for the loop
 DECLARE STRING_LENGTH INT;		-- string length,self explanatory
 DECLARE RESULT TEXT DEFAULT '';	-- return string holder
 DECLARE TEMP_STRING text DEFAULT '';	-- temporary string holder
 DECLARE NEXT_CHARACTER_UPPER_CASE BIT DEFAULT FALSE;  SET STRING = REPLACE(SUBSTRING_INDEX(STRING, '[', -1), ']', ''); SET STRING_LENGTH = LENGTH(STRING);  WHILE (COUNTER < STRING_LENGTH) DO SET COUNTER = COUNTER + 1; SET TEMP_STRING = SUBSTRING(STRING, COUNTER, 1); IF (COUNTER = 1 OR NEXT_CHARACTER_UPPER_CASE) THEN SET RESULT = CONCAT(RESULT, UCASE(TEMP_STRING)); SET NEXT_CHARACTER_UPPER_CASE = FALSE; ELSE IF ASCII(TEMP_STRING) BETWEEN 65 AND 90 THEN SET RESULT = CONCAT(RESULT, ' ', TEMP_STRING); ELSE IF TEMP_STRING = '.' THEN SET RESULT = CONCAT(RESULT, ' '); SET NEXT_CHARACTER_UPPER_CASE = TRUE; ELSE SET RESULT = CONCAT(RESULT, TEMP_STRING); END IF; END IF; END IF; END WHILE;  RETURN(RESULT);	-- return
 END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of procedure `ASSOCIATECUSTOMFILTERSWITHDATASUBSOURCES`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `ASSOCIATECUSTOMFILTERSWITHDATASUBSOURCES`()
BEGIN DECLARE CSR_END INT DEFAULT 0; DECLARE FIELDNAME VARCHAR(100) DEFAULT ''; DECLARE CUSTOMFILTERID BIGINT DEFAULT 0; DECLARE SUBSOURCEID BIGINT DEFAULT 0; DECLARE MAXCUSTOMFILTERSUBSOURCEID BIGINT DEFAULT 0;  DECLARE CSR_FIELDNAMES CURSOR FOR SELECT DISTINCT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME LIKE 'VW%' AND (COLUMN_NAME LIKE '%CONSTITUENT_ID' OR COLUMN_NAME = 'ADDRESS_TEMPORARY_START_DATE' OR COLUMN_NAME = 'EMAIL_TEMPORARY_START_DATE' OR COLUMN_NAME = 'PHONE_TEMPORARY_START_DATE');  DECLARE CSR_CUSTOMFILTERS CURSOR FOR SELECT REPORTCUSTOMFILTERDEFINITION_ID FROM REPORTCUSTOMFILTERDEFINITION WHERE SQL_TEXT LIKE CONCAT('%', FIELDNAME, '%');  DECLARE CSR_SUBSOURCES CURSOR FOR SELECT REPORTSUBSOURCE_ID FROM REPORTDATASUBSOURCE WHERE VIEW_NAME IN (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME LIKE 'VW%' AND COLUMN_NAME = FIELDNAME) AND REPORTSUBSOURCE_ID NOT IN (SELECT reportDataSubSource_REPORTSUBSOURCE_ID FROM REPORTCUSTOMFILTERDEFINITION_REPORTDATASUBSOURCE WHERE reportCustomFilterDefinitions_REPORTCUSTOMFILTERDEFINITION_ID = CUSTOMFILTERID);  DECLARE CONTINUE HANDLER FOR NOT FOUND SET CSR_END = 1;  OPEN CSR_FIELDNAMES;  FIELDNAMES_LOOP: LOOP FETCH CSR_FIELDNAMES INTO FIELDNAME;  IF CSR_END THEN LEAVE FIELDNAMES_LOOP; END IF;  OPEN CSR_CUSTOMFILTERS; CUSTOMFILTERS_LOOP: LOOP FETCH CSR_CUSTOMFILTERS INTO CUSTOMFILTERID;  IF CSR_END THEN LEAVE CUSTOMFILTERS_LOOP; END IF;  OPEN CSR_SUBSOURCES;  SUBSOURCES_LOOP: LOOP FETCH CSR_SUBSOURCES INTO SUBSOURCEID;  IF CSR_END THEN LEAVE SUBSOURCES_LOOP; END IF;  SET MAXCUSTOMFILTERSUBSOURCEID = (SELECT IFNULL(MAX(REPORTCUSTOMFILTERDEFINITION_ID),0) + 1 FROM REPORTCUSTOMFILTERDEFINITION_REPORTDATASUBSOURCE); INSERT REPORTCUSTOMFILTERDEFINITION_REPORTDATASUBSOURCE (reportCustomFilterDefinitions_REPORTCUSTOMFILTERDEFINITION_ID, reportDataSubSource_REPORTSUBSOURCE_ID, REPORTSUBSOURCE_ID, REPORTCUSTOMFILTERDEFINITION_ID) VALUES (CUSTOMFILTERID, SUBSOURCEID, SUBSOURCEID, MAXCUSTOMFILTERSUBSOURCEID); END LOOP; SET CSR_END = 0; CLOSE CSR_SUBSOURCES; END LOOP; SET CSR_END = 0; CLOSE CSR_CUSTOMFILTERS; END LOOP; SET CSR_END = 0; CLOSE CSR_FIELDNAMES; END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of procedure `INSERTREPORTFIELD`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `INSERTREPORTFIELD`(PRIMARYKEYS VARCHAR(255), COLUMNNAME VARCHAR(500), DISPLAYNAME VARCHAR(255), ISDEFAULT BIT, FIELDTYPE INT, FIELDGROUPID BIGINT, PICKLISTNAMEID VARCHAR(255), SOURCECOLUMNNAME VARCHAR(2000), PICKLISTITEMNAME VARCHAR(255), CUSTOMFIELDENTITYTYPE VARCHAR(255), CUSTOMFIELDENTITYID VARCHAR(255), CUSTOMFIELDFIELDNAME VARCHAR(255), CONSTITUENTJOINFIELD VARCHAR(255), JOINID BIGINT, DYNAMICPRIMARYKEYS VARCHAR(255), PICKLISTCUSTOMFIELD BIT)
BEGIN
	INSERT INTO REPORTFIELD
	(AVERAGE, CAN_BE_SUMMARIZED, COLUMN_NAME, ALIAS_NAME, DISPLAY_NAME, IS_DEFAULT, IS_SUMMARIZED, LARGEST_VALUE, PERFORMSUMMARY,
	IS_SELECTED, SMALLEST_VALUE, FIELD_TYPE, RECORD_COUNT, PRIMARY_KEYS, PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, JOIN_ID, SOURCE_COLUMN_NAME,
	CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, CONSTITUENT_JOIN_FIELD, DYNAMIC_PRIMARY_KEYS, PICKLIST_CUSTOM_FIELD)
	VALUES
	(b'0', b'0', COLUMNNAME, COLUMNNAME, DISPLAYNAME, ISDEFAULT, b'0', b'0', b'0', b'0', b'0', FIELDTYPE, b'0', PRIMARYKEYS,
	PICKLISTNAMEID, PICKLISTIEMNAME, JOINID, SOURCECOLUMNNAME, CUSTOMFIELDENTITYTYPE, CUSTOMFIELDENTITYID, CUSTOMFIELDFIELDNAME, CONSTITUENTJOINFIELD,
	DYNAMICPRIMARYKEYS, PICKLISTCUSTOMFIELD);

	SET @REPORTFIELD_ID = LAST_INSERT_ID();
	
	INSERT REPORTFIELD_REPORTFIELDGROUP (FIELDS_REPORTFIELD_ID, REPORTFIELDGROUP_ID, REPORTFIELDGROUP_REPORTFIELDGROUP_ID, REPORTFIELD_ID)
	VALUES (@REPORTFIELD_ID, FIELDGROUPID, FIELDGROUPID ,@REPORTFIELD_ID);
END;$$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of procedure `INSERTREPORTFIELDGROUP`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `INSERTREPORTFIELDGROUP`(REPORTFIELDGROUPNAME VARCHAR(255), REPORTSUBSOURCE_ID LONG, OUT REPORTFIELDGROUP_ID LONG)
BEGIN INSERT INTO REPORTFIELDGROUP (NAME) VALUES (REPORTFIELDGROUPNAME);  SET @REPORTFIELDGROUP_ID = LAST_INSERT_ID();  SET @MAXREPORTSUBSOURCE_ID = (SELECT IFNULL(MAX(REPORTSUBSOURCE_ID),0) + 1 FROM REPORTFIELDGROUP_REPORTDATASUBSOURCE);  INSERT REPORTFIELDGROUP_REPORTDATASUBSOURCE (REPORTFIELDGROUP_REPORTFIELDGROUP_ID, REPORTDATASUBSOURCE_REPORTSUBSOURCE_ID, REPORTSUBSOURCE_ID) VALUES (@REPORTFIELDGROUP_ID, REPORTSUBSOURCE_ID, @MAXREPORTSUBSOURCE_ID);  SET REPORTFIELDGROUP_ID = @REPORTFIELDGROUP_ID; END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of procedure `INSERTREPORTFIELDWITHALIAS`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `INSERTREPORTFIELDWITHALIAS`(PRIMARYKEYS VARCHAR(255), ALIASNAME VARCHAR(255), COLUMNNAME VARCHAR(500), DISPLAYNAME VARCHAR(255), ISDEFAULT BIT, FIELDTYPE INT, FIELDGROUPID BIGINT, PICKLISTNAMEID VARCHAR(255), SOURCECOLUMNNAME VARCHAR(2000), PICKLISTITEMNAME VARCHAR(255), CUSTOMFIELDENTITYTYPE VARCHAR(255), CUSTOMFIELDENTITYID VARCHAR(255), CUSTOMFIELDFIELDNAME VARCHAR(255), CONSTITUENTJOINFIELD VARCHAR(255), JOINID BIGINT, DYNAMICPRIMARYKEYS VARCHAR(255), PICKLISTCUSTOMFIELD BIT)
BEGIN
	INSERT INTO REPORTFIELD
	(AVERAGE, CAN_BE_SUMMARIZED, COLUMN_NAME, ALIAS_NAME, DISPLAY_NAME, IS_DEFAULT, IS_SUMMARIZED, LARGEST_VALUE, PERFORMSUMMARY,
	IS_SELECTED, SMALLEST_VALUE, FIELD_TYPE, RECORD_COUNT, PRIMARY_KEYS, PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, JOIN_ID, SOURCE_COLUMN_NAME,
	CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, CONSTITUENT_JOIN_FIELD, DYNAMIC_PRIMARY_KEYS, PICKLIST_CUSTOM_FIELD)
	VALUES
	(b'0', b'0', COLUMNNAME, ALIASNAME, DISPLAYNAME, ISDEFAULT, b'0', b'0', b'0', b'0', b'0', FIELDTYPE, b'0', PRIMARYKEYS,
	PICKLISTNAMEID, PICKLISTITEMNAME, JOINID, SOURCECOLUMNNAME, CUSTOMFIELDENTITYTYPE, CUSTOMFIELDENTITYID, CUSTOMFIELDFIELDNAME, CONSTITUENTJOINFIELD,
	DYNAMICPRIMARYKEYS, PICKLISTCUSTOMFIELD);

	SET @REPORTFIELD_ID = LAST_INSERT_ID();
  
	INSERT REPORTFIELD_REPORTFIELDGROUP
	(FIELDS_REPORTFIELD_ID, REPORTFIELDGROUP_ID, REPORTFIELDGROUP_REPORTFIELDGROUP_ID, REPORTFIELD_ID)
	VALUES (@REPORTFIELD_ID, FIELDGROUPID, FIELDGROUPID ,@REPORTFIELD_ID);
END;$$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of procedure `NUMBERBUILDER`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `NUMBERBUILDER`()
BEGIN DECLARE I INT DEFAULT 0; DECLARE CTR INT DEFAULT 0; SET I = 1; SET CTR = 100; DROP TABLE IF EXISTS `NUMBERS`; CREATE TABLE NUMBERS (NUMBER INT); CREATE INDEX IDX_NUMBERS ON NUMBERS(NUMBER); WHILE (I <= CTR) DO INSERT NUMBERS SELECT I; SET I = I + 1; END WHILE; END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of procedure `DELETE_REPORTWIZARD`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `DELETE_REPORTWIZARD`(REPORTWIZARDID INT)
BEGIN
	IF EXISTS (SELECT REPORTWIZARD_REPORTFILTER.REPORTWIZARD_REPORTWIZARD_ID FROM REPORTWIZARD_REPORTFILTER
		JOIN REPORTFILTER ON REPORTFILTER.REPORTFILTER_ID = REPORTWIZARD_REPORTFILTER.REPORTFILTERS_REPORTFILTER_ID
		JOIN REPORTCUSTOMFILTER ON REPORTCUSTOMFILTER.REPORTCUSTOMFILTER_ID = REPORTFILTER.REPORTCUSTOMFILTER_REPORTCUSTOMFILTER_ID
		JOIN REPORTCUSTOMFILTERDEFINITION ON REPORTCUSTOMFILTER.REPORTCUSTOMFILTERDEFINITION_ID = REPORTCUSTOMFILTERDEFINITION.REPORTCUSTOMFILTERDEFINITION_ID
		JOIN REPORTCUSTOMFILTER_REPORTCUSTOMFILTERCRITERIA ON REPORTCUSTOMFILTER_REPORTCUSTOMFILTERCRITERIA.REPORTCUSTOMFILTER_REPORTCUSTOMFILTER_ID = REPORTCUSTOMFILTER.REPORTCUSTOMFILTER_ID
		JOIN REPORTCUSTOMFILTERCRITERIA ON REPORTCUSTOMFILTERCRITERIA.REPORTCUSTOMFILTERCRITERIA_ID = REPORTCUSTOMFILTER_REPORTCUSTOMFILTERCRITERIA.REPORTCUSTOMFILTERCRITERIA_REPORTCUSTOMFILTERCRITERIA_ID
		WHERE REPORTCUSTOMFILTERDEFINITION.DISPLAY_HTML LIKE '%SEGMENTATION%'
		AND CRITERIA = REPORTWIZARDID)
	THEN
		UPDATE REPORTWIZARD SET REPORT_NAME = CONCAT(REPORT_NAME, ' (Deleted)')
		WHERE REPORTWIZARD_ID = REPORTWIZARDID
		AND REPORT_NAME NOT LIKE '% (Deleted)';
	ELSE
		-- Delete chart settings
		DROP TABLE IF EXISTS TEMP_REPORTCHARTSETTINGS;

		CREATE TEMPORARY TABLE TEMP_REPORTCHARTSETTINGS
		SELECT reportChartSettings_REPORTCHARTSETTINGS_ID FROM REPORTWIZARD_REPORTCHARTSETTINGS WHERE REPORTWIZARD_REPORTWIZARD_ID = REPORTWIZARDID;

		DELETE FROM REPORTWIZARD_REPORTCHARTSETTINGS WHERE REPORTWIZARD_REPORTWIZARD_ID = REPORTWIZARDID;

		DELETE FROM REPORTCHARTSETTINGS WHERE REPORTCHARTSETTINGS_ID IN
		(SELECT reportChartSettings_REPORTCHARTSETTINGS_ID FROM TEMP_REPORTCHARTSETTINGS);

		DROP TABLE IF EXISTS TEMP_REPORTCHARTSETTINGS;

		-- Delete filters
		DROP TABLE IF EXISTS TEMP_REPORTFILTER;

		CREATE TEMPORARY TABLE TEMP_REPORTFILTER
		SELECT REPORTFILTER_ID, reportCustomFilter_REPORTCUSTOMFILTER_ID, reportStandardFilter_REPORTSTANDARDFILTER_ID
		FROM REPORTFILTER WHERE REPORTFILTER_ID IN
		(SELECT reportFilters_REPORTFILTER_ID FROM REPORTWIZARD_REPORTFILTER WHERE REPORTWIZARD_REPORTWIZARD_ID = REPORTWIZARDID);

		DELETE FROM REPORTWIZARD_REPORTFILTER WHERE REPORTWIZARD_REPORTWIZARD_ID = REPORTWIZARDID;

		DELETE FROM REPORTFILTER WHERE REPORTFILTER_ID IN
		(SELECT REPORTFILTER_ID FROM TEMP_REPORTFILTER);

		DELETE FROM REPORTSTANDARDFILTER WHERE REPORTSTANDARDFILTER_ID IN
		(SELECT reportStandardFilter_REPORTSTANDARDFILTER_ID FROM TEMP_REPORTFILTER);

		DELETE FROM REPORTCUSTOMFILTER_REPORTCUSTOMFILTERCRITERIA WHERE REPORTCUSTOMFILTER_REPORTCUSTOMFILTER_ID IN
		(SELECT reportCustomFilter_REPORTCUSTOMFILTER_ID FROM TEMP_REPORTFILTER);

		DELETE FROM REPORTCUSTOMFILTERCRITERIA WHERE REPORTCUSTOMFILTERCRITERIA_ID IN
		(SELECT reportCustomFilterCriteria_REPORTCUSTOMFILTERCRITERIA_ID FROM REPORTCUSTOMFILTER_REPORTCUSTOMFILTERCRITERIA WHERE REPORTCUSTOMFILTER_REPORTCUSTOMFILTER_ID IN
		(SELECT reportCustomFilter_REPORTCUSTOMFILTER_ID FROM TEMP_REPORTFILTER));

		DELETE FROM REPORTCUSTOMFILTER WHERE REPORTCUSTOMFILTER_ID IN
		(SELECT reportCustomFilter_REPORTCUSTOMFILTER_ID FROM TEMP_REPORTFILTER);

		DROP TABLE IF EXISTS TEMP_REPORTFILTER;


		-- Delete selected fields
		DROP TABLE IF EXISTS TEMP_REPORTSELECTEDFIELD;

		CREATE TEMPORARY TABLE TEMP_REPORTCROSSTABROWS
		SELECT reportSelectedFields_REPORTSELECTEDFIELD_ID FROM REPORTWIZARD_REPORTSELECTEDFIELD WHERE REPORTWIZARD_REPORTWIZARD_ID = REPORTWIZARDID;

		DELETE FROM REPORTWIZARD_REPORTSELECTEDFIELD WHERE REPORTWIZARD_REPORTWIZARD_ID = REPORTWIZARDID;

		DELETE FROM REPORTSELECTEDFIELD WHERE REPORTSELECTEDFIELD_ID IN
		(SELECT reportSelectedFields_REPORTSELECTEDFIELD_ID FROM TEMP_REPORTCROSSTABROWS);

		DROP TABLE IF EXISTS TEMP_REPORTSELECTEDFIELD;


		DROP TABLE IF EXISTS TEMP_REPORTCROSSTABROWS;

		CREATE TEMPORARY TABLE TEMP_REPORTCROSSTABROWS
		SELECT reportCrossTabRows_REPORTCROSSTABROWS_ID FROM REPORTCROSSTABFIELDS_REPORTCROSSTABROW
		WHERE REPORTCROSSTABFIELDS_REPORTCROSSTABFIELDS_ID IN
		(SELECT reportCrossTabFields_REPORTCROSSTABFIELDS_ID FROM REPORTWIZARD WHERE REPORTWIZARD_ID = REPORTWIZARDID);

		DELETE FROM REPORTCROSSTABFIELDS_REPORTCROSSTABROW
		WHERE REPORTCROSSTABFIELDS_REPORTCROSSTABFIELDS_ID IN
		(SELECT reportCrossTabFields_REPORTCROSSTABFIELDS_ID FROM REPORTWIZARD WHERE REPORTWIZARD_ID = REPORTWIZARDID);

		DELETE FROM REPORTCROSSTABROW WHERE REPORTCROSSTABROWS_ID IN
		(SELECT reportCrossTabRows_REPORTCROSSTABROWS_ID FROM TEMP_REPORTCROSSTABROWS);

		DROP TABLE IF EXISTS TEMP_REPORTCROSSTABROWS;


		DROP TABLE IF EXISTS TEMP_REPORTCROSSTABCOLUMNS;

		CREATE TEMPORARY TABLE TEMP_REPORTCROSSTABCOLUMNS
		SELECT reportCrossTabColumns_REPORTCROSSTABCOLUMN_ID FROM REPORTCROSSTABFIELDS_REPORTCROSSTABCOLUMN
		WHERE REPORTCROSSTABFIELDS_REPORTCROSSTABFIELDS_ID IN
		(SELECT reportCrossTabFields_REPORTCROSSTABFIELDS_ID FROM REPORTWIZARD WHERE REPORTWIZARD_ID = REPORTWIZARDID);

		DELETE FROM REPORTCROSSTABFIELDS_REPORTCROSSTABCOLUMN
		WHERE REPORTCROSSTABFIELDS_REPORTCROSSTABFIELDS_ID IN
		(SELECT reportCrossTabFields_REPORTCROSSTABFIELDS_ID FROM REPORTWIZARD WHERE REPORTWIZARD_ID = REPORTWIZARDID);

		DELETE FROM REPORTCROSSTABCOLUMN WHERE REPORTCROSSTABCOLUMN_ID IN
		(SELECT reportCrossTabColumns_REPORTCROSSTABCOLUMN_ID FROM TEMP_REPORTCROSSTABCOLUMNS);

		DROP TABLE IF EXISTS TEMP_REPORTCROSSTABCOLUMNS;


		DROP TABLE IF EXISTS TEMP_REPORTCROSSTABMEASURES;

		CREATE TEMPORARY TABLE TEMP_REPORTCROSSTABMEASURES
		SELECT reportCrossTabMeasure_REPORTCROSSTABMEASURE_ID FROM REPORTCROSSTABFIELDS_REPORTCROSSTABMEASURE
		WHERE REPORTCROSSTABFIELDS_REPORTCROSSTABFIELDS_ID IN
		(SELECT reportCrossTabFields_REPORTCROSSTABFIELDS_ID FROM REPORTWIZARD WHERE REPORTWIZARD_ID = REPORTWIZARDID);

		DELETE FROM REPORTCROSSTABFIELDS_REPORTCROSSTABMEASURE
		WHERE REPORTCROSSTABFIELDS_REPORTCROSSTABFIELDS_ID IN
		(SELECT reportCrossTabFields_REPORTCROSSTABFIELDS_ID FROM REPORTWIZARD WHERE REPORTWIZARD_ID = REPORTWIZARDID);

		DELETE FROM REPORTCROSSTABMEASURE WHERE REPORTCROSSTABMEASURE_ID IN
		(SELECT reportCrossTabMeasure_REPORTCROSSTABMEASURE_ID FROM TEMP_REPORTCROSSTABMEASURES);

		DROP TABLE IF EXISTS TEMP_REPORTCROSSTABMEASURES;


		DROP TABLE IF EXISTS TEMP_REPORTCROSSTABFIELDS;

		CREATE TEMPORARY TABLE TEMP_REPORTCROSSTABFIELDS
		SELECT reportCrossTabFields_REPORTCROSSTABFIELDS_ID FROM REPORTWIZARD WHERE REPORTWIZARD_ID = REPORTWIZARDID;

		DELETE FROM REPORTWIZARD WHERE REPORTWIZARD_ID = REPORTWIZARDID;

		DELETE FROM REPORTCROSSTABFIELDS WHERE REPORTCROSSTABFIELDS_ID IN
		(SELECT reportCrossTabFields_REPORTCROSSTABFIELDS_ID FROM TEMP_REPORTCROSSTABFIELDS);

		DROP TABLE IF EXISTS TEMP_REPORTCROSSTABFIELDS;
	END IF;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of procedure `IS_SEGMENTATION_IN_USE`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `IS_SEGMENTATION_IN_USE`(REPORTWIZARDID INT)
BEGIN
	IF EXISTS (SELECT REPORTWIZARD_REPORTFILTER.REPORTWIZARD_REPORTWIZARD_ID FROM REPORTWIZARD_REPORTFILTER
		JOIN REPORTFILTER ON REPORTFILTER.REPORTFILTER_ID = REPORTWIZARD_REPORTFILTER.REPORTFILTERS_REPORTFILTER_ID
		JOIN REPORTCUSTOMFILTER ON REPORTCUSTOMFILTER.REPORTCUSTOMFILTER_ID = REPORTFILTER.REPORTCUSTOMFILTER_REPORTCUSTOMFILTER_ID
		JOIN REPORTCUSTOMFILTERDEFINITION ON REPORTCUSTOMFILTER.REPORTCUSTOMFILTERDEFINITION_ID = REPORTCUSTOMFILTERDEFINITION.REPORTCUSTOMFILTERDEFINITION_ID
		JOIN REPORTCUSTOMFILTER_REPORTCUSTOMFILTERCRITERIA ON REPORTCUSTOMFILTER_REPORTCUSTOMFILTERCRITERIA.REPORTCUSTOMFILTER_REPORTCUSTOMFILTER_ID = REPORTCUSTOMFILTER.REPORTCUSTOMFILTER_ID
		JOIN REPORTCUSTOMFILTERCRITERIA ON REPORTCUSTOMFILTERCRITERIA.REPORTCUSTOMFILTERCRITERIA_ID = REPORTCUSTOMFILTER_REPORTCUSTOMFILTERCRITERIA.REPORTCUSTOMFILTERCRITERIA_REPORTCUSTOMFILTERCRITERIA_ID
		WHERE REPORTCUSTOMFILTERDEFINITION.DISPLAY_HTML LIKE '%SEGMENTATION%'
		AND CRITERIA = REPORTWIZARDID)
	THEN
		SELECT 1 AS IN_USE;
	ELSE
		SELECT 0 AS IN_USE;
	END IF;
END	$$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$


--
-- Definition of function `GENERATE_VIEWS`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GENERATE_VIEWS`(VIEWNAME VARCHAR(255))
BEGIN
	DECLARE CSR_END INT DEFAULT 0;
	DECLARE VAR_VIEW_DROP_TEXT VARCHAR(1000);
	DECLARE VAR_VIEW_SELECT_TEXT TEXT;
	DECLARE VAR_VIEW_FROM_TEXT VARCHAR(8000);
	DECLARE VAR_TABLE_NAME VARCHAR(255);
	DECLARE VAR_FIRST_FIELD BIT;
	DECLARE VAR_NEW_LINE VARCHAR(10);
	DECLARE VAR_TAB VARCHAR(10);

	-- THEGURU_VIEW Variables
	DECLARE VAR_VIEW_ID INTEGER;
	DECLARE VAR_VIEW_NAME VARCHAR(255);
	DECLARE VAR_VIEW_DISPLAY_TEXT VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_IS_VIEW BIT;
	DECLARE VAR_PRIMARY_TABLE_ALIAS VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_COLUMN_PREFIX VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_INCLUDE_ALL_FIELDS BIT;
	DECLARE VAR_VIEW_SQL_OVERRIDE TEXT;
    DECLARE VAR_WHERE_CLAUSE VARCHAR(8000);

	-- INFORMATION_SCHEMA.COLUMNS Variables
	DECLARE VAR_FIELD_NAME VARCHAR(255);
	DECLARE VAR_FIELD_TYPE VARCHAR(255);

	-- THEGURU_JOIN Variables
	DECLARE VAR_JOIN_ID INTEGER;
	DECLARE VAR_JOIN_TYPE VARCHAR(20);
	DECLARE VAR_JOIN_TABLE VARCHAR(255);
	DECLARE VAR_JOIN_TABLE_IS_VIEW BIT;
	DECLARE VAR_JOIN_TABLE_ALIAS VARCHAR(255);
	DECLARE VAR_JOIN_TABLE_COLUMN_PREFIX VARCHAR(255);
	DECLARE VAR_JOIN_CRITERIA VARCHAR(2000);
	DECLARE VAR_JOIN_TABLE_INCLUDE_ALL_FIELDS BIT;

	-- THEGURU_TABLE_ADDITIONAL_FIELD Variables
	DECLARE VAR_ADDITIONAL_FIELD_TABLE_NAME VARCHAR(255);
	DECLARE VAR_ADDITIONAL_FIELD_FIELD_TEXT VARCHAR(2000);
	DECLARE VAR_ADDITIONAL_FIELD_FIELD_ALIAS VARCHAR(255);


	DECLARE CSR_VIEWS CURSOR FOR
		SELECT
			VIEW_ID, VIEW_NAME, VIEW_DISPLAY_TEXT, PRIMARY_TABLE, PRIMARY_TABLE_IS_VIEW, PRIMARY_TABLE_ALIAS, PRIMARY_TABLE_COLUMN_PREFIX, INCLUDE_ALL_FIELDS, WHERE_CLAUSE, SQL_OVERRIDE
		FROM THEGURU_VIEW
		WHERE VIEW_NAME = VIEWNAME OR VIEWNAME IS NULL
		ORDER BY SORT_ORDER;

	DECLARE CSR_FIELDS CURSOR FOR
		SELECT
			COLUMN_NAME, DATA_TYPE
		FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '') AND TABLE_NAME = VAR_TABLE_NAME;

	DECLARE CSR_JOINS CURSOR FOR
		SELECT
			JOIN_ID, JOIN_TYPE, JOIN_TABLE, JOIN_TABLE_IS_VIEW, JOIN_TABLE_ALIAS, JOIN_TABLE_COLUMN_PREFIX, JOIN_CRITERIA, INCLUDE_ALL_FIELDS
		FROM THEGURU_VIEW_JOIN
		WHERE THEGURU_VIEW_JOIN.VIEW_ID = VAR_VIEW_ID;

	DECLARE CSR_ADDITIONAL_FIELDS CURSOR FOR
		SELECT
			TABLE_NAME, FIELD_TEXT, FIELD_ALIAS
		FROM THEGURU_TABLE_ADDITIONAL_FIELD
		WHERE THEGURU_TABLE_ADDITIONAL_FIELD.TABLE_NAME = VAR_TABLE_NAME;

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET CSR_END = 1;

	SET VAR_FIRST_FIELD = TRUE;
	SET VAR_NEW_LINE = '\n';
	SET VAR_TAB = '\t';

	DELETE FROM THEGURU_GENERATED_VIEWS;

	-- Iterate through the views
	OPEN CSR_VIEWS;

	VIEWS_LOOP: LOOP
		FETCH CSR_VIEWS INTO
			VAR_VIEW_ID, VAR_VIEW_NAME, VAR_VIEW_DISPLAY_TEXT, VAR_PRIMARY_TABLE, VAR_PRIMARY_TABLE_IS_VIEW, VAR_PRIMARY_TABLE_ALIAS, VAR_PRIMARY_TABLE_COLUMN_PREFIX, VAR_PRIMARY_TABLE_INCLUDE_ALL_FIELDS, VAR_WHERE_CLAUSE, VAR_VIEW_SQL_OVERRIDE;

		IF CSR_END THEN
			LEAVE VIEWS_LOOP;
		END IF;

		SET VAR_FIRST_FIELD = TRUE;
		SET VAR_VIEW_DROP_TEXT = (SELECT CONCAT('DROP VIEW IF EXISTS ', VAR_VIEW_NAME, ';'));

		IF LENGTH(IFNULL(VAR_VIEW_SQL_OVERRIDE, '')) = 0 THEN
			SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_NEW_LINE, 'CREATE VIEW ', VAR_VIEW_NAME, VAR_NEW_LINE,
				'AS', VAR_NEW_LINE, VAR_TAB, 'SELECT'));
			SET VAR_VIEW_FROM_TEXT = (SELECT CONCAT('FROM ', VAR_PRIMARY_TABLE, ' AS ', VAR_PRIMARY_TABLE_ALIAS));

			SET VAR_TABLE_NAME = VAR_PRIMARY_TABLE;

			IF VAR_PRIMARY_TABLE_INCLUDE_ALL_FIELDS THEN
				--  Iterate through the fields of the primary table
				OPEN CSR_FIELDS;
				PRIMARY_FIELDS_LOOP: LOOP
					FETCH CSR_FIELDS INTO
						VAR_FIELD_NAME, VAR_FIELD_TYPE;

					IF CSR_END THEN
						LEAVE PRIMARY_FIELDS_LOOP;
					END IF;

					IF VAR_FIRST_FIELD THEN
						SET VAR_FIRST_FIELD = FALSE;
					ELSE
						SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, ','));
					END IF;

					SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, VAR_NEW_LINE, VAR_TAB, VAR_TAB, VAR_PRIMARY_TABLE_ALIAS, '.', VAR_FIELD_NAME, ' AS ', VAR_PRIMARY_TABLE_COLUMN_PREFIX, VAR_FIELD_NAME));
				END LOOP;
				SET CSR_END = 0;
				CLOSE CSR_FIELDS;
			END IF;

			OPEN CSR_ADDITIONAL_FIELDS;
			ADDITIONAL_FIELDS_LOOP: LOOP
				FETCH CSR_ADDITIONAL_FIELDS INTO
					VAR_ADDITIONAL_FIELD_TABLE_NAME, VAR_ADDITIONAL_FIELD_FIELD_TEXT, VAR_ADDITIONAL_FIELD_FIELD_ALIAS;

				IF CSR_END THEN
					LEAVE ADDITIONAL_FIELDS_LOOP;
				END IF;

				IF VAR_FIRST_FIELD THEN
					SET VAR_FIRST_FIELD = FALSE;
				ELSE
					SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, ','));
				END IF;

				SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, VAR_NEW_LINE, VAR_TAB, VAR_TAB, REPLACE(VAR_ADDITIONAL_FIELD_FIELD_TEXT, '${ALIAS_REPLACEMENT}', VAR_PRIMARY_TABLE_ALIAS), ' AS ', VAR_PRIMARY_TABLE_COLUMN_PREFIX, VAR_ADDITIONAL_FIELD_FIELD_ALIAS));
			END LOOP;
			SET CSR_END = 0;
			CLOSE CSR_ADDITIONAL_FIELDS;


			-- Iterate through the join tables
			OPEN CSR_JOINS;

			JOINS_LOOP: LOOP
				FETCH CSR_JOINS INTO
					VAR_JOIN_ID, VAR_JOIN_TYPE, VAR_JOIN_TABLE, VAR_JOIN_TABLE_IS_VIEW, VAR_JOIN_TABLE_ALIAS, VAR_JOIN_TABLE_COLUMN_PREFIX, VAR_JOIN_CRITERIA, VAR_JOIN_TABLE_INCLUDE_ALL_FIELDS;

				IF CSR_END THEN
					LEAVE JOINS_LOOP;
				END IF;

				SET VAR_VIEW_FROM_TEXT = (SELECT CONCAT(VAR_VIEW_FROM_TEXT, VAR_NEW_LINE, VAR_TAB, LTRIM(CONCAT(VAR_JOIN_TYPE, ' ')), 'JOIN ', VAR_JOIN_TABLE, ' AS ', VAR_JOIN_TABLE_ALIAS,
					' ON ', VAR_JOIN_CRITERIA));

				SET VAR_TABLE_NAME = VAR_JOIN_TABLE;
				IF VAR_JOIN_TABLE_INCLUDE_ALL_FIELDS THEN
					--  Iterate through the fields of the join table
					OPEN CSR_FIELDS;
					PRIMARY_FIELDS_LOOP: LOOP
						FETCH CSR_FIELDS INTO
							VAR_FIELD_NAME, VAR_FIELD_TYPE;

						IF CSR_END THEN
							LEAVE PRIMARY_FIELDS_LOOP;
						END IF;

						IF VAR_FIRST_FIELD THEN
							SET VAR_FIRST_FIELD = FALSE;
						ELSE
							SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, ','));
						END IF;

						SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, VAR_NEW_LINE, VAR_TAB, VAR_TAB, VAR_JOIN_TABLE_ALIAS, '.', VAR_FIELD_NAME, ' AS ', VAR_JOIN_TABLE_COLUMN_PREFIX, VAR_FIELD_NAME));
					END LOOP;
					SET CSR_END = 0;
					CLOSE CSR_FIELDS;
				END IF;

				OPEN CSR_ADDITIONAL_FIELDS;
				ADDITIONAL_FIELDS_LOOP: LOOP
					FETCH CSR_ADDITIONAL_FIELDS INTO
					VAR_ADDITIONAL_FIELD_TABLE_NAME, VAR_ADDITIONAL_FIELD_FIELD_TEXT, VAR_ADDITIONAL_FIELD_FIELD_ALIAS;

					IF CSR_END THEN
						LEAVE ADDITIONAL_FIELDS_LOOP;
					END IF;

					IF VAR_FIRST_FIELD THEN
						SET VAR_FIRST_FIELD = FALSE;
					ELSE
						SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, ','));
					END IF;

					SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_VIEW_SELECT_TEXT, VAR_NEW_LINE, VAR_TAB, VAR_TAB, REPLACE(VAR_ADDITIONAL_FIELD_FIELD_TEXT, '${ALIAS_REPLACEMENT}', VAR_JOIN_TABLE_ALIAS), ' AS ', VAR_JOIN_TABLE_COLUMN_PREFIX, VAR_ADDITIONAL_FIELD_FIELD_ALIAS));
				END LOOP;
				SET CSR_END = 0;
				CLOSE CSR_ADDITIONAL_FIELDS;

			END LOOP;
			SET CSR_END = 0;
			CLOSE CSR_JOINS;

			IF LENGTH(IFNULL(VAR_WHERE_CLAUSE, '')) > 0 THEN
				SET VAR_VIEW_FROM_TEXT = (SELECT CONCAT(VAR_VIEW_FROM_TEXT, VAR_NEW_LINE, VAR_TAB, 'WHERE ', VAR_WHERE_CLAUSE));
			END IF;
		ELSE
			SET VAR_VIEW_SELECT_TEXT = (SELECT CONCAT(VAR_NEW_LINE, 'CREATE VIEW ', VAR_VIEW_NAME, VAR_NEW_LINE,
				'AS', VAR_NEW_LINE, VAR_VIEW_SQL_OVERRIDE));
			SET VAR_VIEW_FROM_TEXT = '';
		END IF;

		INSERT THEGURU_GENERATED_VIEWS
			(VIEW_TEXT)
		SELECT
			VAR_VIEW_DROP_TEXT;

		INSERT THEGURU_GENERATED_VIEWS
			(VIEW_TEXT)
		SELECT
			CONCAT(VAR_VIEW_SELECT_TEXT, VAR_NEW_LINE, VAR_TAB, VAR_VIEW_FROM_TEXT, VAR_NEW_LINE, ';');


        SET @execString = CONCAT('CALL ', REPLACE(DATABASE(), 'theguru', '.'), 'CREATE_VIEW(''', VAR_VIEW_DROP_TEXT, ''');');
		PREPARE statement FROM @execString;
		EXECUTE statement;
		DEALLOCATE PREPARE statement;

		SET @execString = CONCAT('CALL ', REPLACE(DATABASE(), 'theguru', '.'), 'CREATE_VIEW(''', REPLACE(VAR_VIEW_SELECT_TEXT, '''', ''''''), VAR_NEW_LINE, VAR_TAB, REPLACE(VAR_VIEW_FROM_TEXT, '''', ''''''), VAR_NEW_LINE, ';'');');
		PREPARE statement FROM @execString;
		EXECUTE statement;
		DEALLOCATE PREPARE statement;

	END LOOP;
	CLOSE CSR_VIEWS;

END;$$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$


--
-- Definition of function `GENERATE_FIELD_DEFINITIONS`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GENERATE_FIELD_DEFINITIONS`(VIEWNAME VARCHAR(255))
BEGIN
	DECLARE CSR_END INT DEFAULT 0;
	DECLARE VAR_VIEW_DROP_TEXT VARCHAR(1000);
	DECLARE VAR_VIEW_SELECT_TEXT VARCHAR(8000);
	DECLARE VAR_VIEW_FROM_TEXT VARCHAR(8000);
	DECLARE VAR_TABLE_NAME VARCHAR(255);
	DECLARE VAR_FIRST_FIELD BIT;
	DECLARE VAR_NEW_LINE VARCHAR(10);
	DECLARE VAR_TAB VARCHAR(10);

	-- THEGURU_VIEW Variables
	DECLARE VAR_VIEW_ID INTEGER;
	DECLARE VAR_VIEW_NAME VARCHAR(255);
	DECLARE VAR_VIEW_DISPLAY_TEXT VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_IS_VIEW BIT;
	DECLARE VAR_PRIMARY_TABLE_ALIAS VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_COLUMN_PREFIX VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_FIELD_GROUP_PREFIX VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_FIELD_GROUP_OVERRIDE VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_PARENT_ENTITY_TYPE VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_SUB_FIELD_NAME VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_DEFAULT_PAGE_TYPE VARCHAR(255);

	-- INFORMATION_SCHEMA.COLUMNS Variables
	DECLARE VAR_FIELD_NAME VARCHAR(255);
	DECLARE VAR_FIELD_TYPE VARCHAR(255);

	-- DATASUBSOURCE Variables
	DECLARE VAR_REPORTSUBSOURCE_ID INT;
	DECLARE VAR_DATASUBSOURCE_VIEW_NAME VARCHAR(255);

	DECLARE CSR_VIEWS CURSOR FOR
		SELECT
			VIEW_ID, VIEW_NAME, VIEW_DISPLAY_TEXT, PRIMARY_TABLE, PRIMARY_TABLE_IS_VIEW, PRIMARY_TABLE_ALIAS, PRIMARY_TABLE_COLUMN_PREFIX, FIELD_GROUP_PREFIX, FIELD_GROUP_OVERRIDE, PARENT_ENTITY_TYPE, SUB_FIELD_NAME, DEFAULT_PAGE_TYPE
		FROM THEGURU_VIEW
		WHERE VIEW_NAME = VAR_DATASUBSOURCE_VIEW_NAME
		ORDER BY SORT_ORDER;

	DECLARE CSR_DATASUBSOURCES CURSOR FOR
		SELECT REPORTSUBSOURCE_ID, VIEW_NAME
		FROM REPORTDATASUBSOURCE
		WHERE LENGTH(VIEW_NAME) <= 255
		AND (VIEW_NAME = VIEWNAME OR VIEWNAME IS NULL);

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET CSR_END = 1;

	SET max_sp_recursion_depth=50;
	SET VAR_FIRST_FIELD = TRUE;
	SET VAR_NEW_LINE = '\r\n';
	SET VAR_TAB = '\t';

	-- Delete and rebuild and picklist custom field definitions in THEGURU_TABLE_ADDITIONAL_FIELD_DEFINITIONS
	-- Just project code custom fields for now (GLPART01, etc.)
	DELETE FROM THEGURU_TABLE_ADDITIONAL_FIELD_DEFINITIONS WHERE PICKLIST_CUSTOM_FIELD = TRUE
	AND DISPLAY_NAME NOT IN ('Designation GL Account String 1', 'Designation GL Account String 2');

	DROP TABLE IF EXISTS TEMP_OL_PICKLIST_CUSTOM_FIELDS;

	SET @execString = CONCAT('CREATE TABLE TEMP_OL_PICKLIST_CUSTOM_FIELDS', VAR_NEW_LINE,
	'SELECT PICKLIST_NAME_ID, PICKLIST_DESC, PICKLIST_NAME, REPLACE(FIELD_NAME, ''item-template-'', '''') AS FIELD_NAME, FIELD_VALUE', VAR_NEW_LINE,
	'FROM ', REPLACE(DATABASE(), 'theguru', '.'), 'PICKLIST', VAR_NEW_LINE,
	'JOIN ', REPLACE(DATABASE(), 'theguru', '.'), 'CUSTOM_FIELD ON PICKLIST.PICKLIST_ID = CUSTOM_FIELD.ENTITY_ID AND CUSTOM_FIELD.ENTITY_TYPE = ''picklist''', VAR_NEW_LINE,
	'WHERE FIELD_NAME LIKE ''item-template-%''', VAR_NEW_LINE,
	'AND PICKLIST_NAME = ''projectCode'';');
	PREPARE statement FROM @execString;
	EXECUTE statement;
	DEALLOCATE PREPARE statement;

	INSERT THEGURU_TABLE_ADDITIONAL_FIELD_DEFINITIONS
	(TABLE_NAME, FIELD_GROUP, DISPLAY_NAME, COLUMN_NAME, ALIAS_NAME, FIELD_TYPE, PICKLIST_CUSTOM_FIELD,
	PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, 
	SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
	SELECT 'DISTRO_LINE', 'Distribution Information',  CONCAT(PICKLIST_DESC, ' ', FIELD_NAME),
	CONCAT('GETCUSTOMFIELD(GETPICKLISTITEMIDBYITEMNAME(''', PICKLIST_NAME, ''', ${COLUMN_PREFIX}PROJECT_CODE), ''picklistItem'', ''', FIELD_NAME, ''')'),
	UPPER(CONCAT(PICKLIST_NAME, '_', REPLACE(FIELD_NAME, '-', ''))), 1, TRUE,
	PICKLIST_NAME, 'PROJECT_CODE', 'picklistItem', 'PICKLIST_ITEM_ID', FIELD_NAME,
	'${CUSTOM_FIELD}.FIELD_VALUE', NULL
	FROM TEMP_OL_PICKLIST_CUSTOM_FIELDS;
  
	INSERT THEGURU_TABLE_ADDITIONAL_FIELD_DEFINITIONS
	(TABLE_NAME, FIELD_GROUP, DISPLAY_NAME, COLUMN_NAME, ALIAS_NAME, FIELD_TYPE, PICKLIST_CUSTOM_FIELD,
	PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME,
	SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
	SELECT 'GIFT_IN_KIND_DETAIL', 'Gift In Kind Details',  CONCAT(PICKLIST_DESC, ' ', FIELD_NAME),
	CONCAT('GETCUSTOMFIELD(GETPICKLISTITEMIDBYITEMNAME(''', PICKLIST_NAME, ''', ${COLUMN_PREFIX}PROJECT_CODE), ''picklistItem'', ''', FIELD_NAME, ''')'),
	UPPER(CONCAT(PICKLIST_NAME, '_', REPLACE(FIELD_NAME, '-', ''))), 1, TRUE,
	PICKLIST_NAME, 'PROJECT_CODE', 'picklistItem', 'PICKLIST_ITEM_ID', FIELD_NAME,
	'${CUSTOM_FIELD}.FIELD_VALUE', NULL
	FROM TEMP_OL_PICKLIST_CUSTOM_FIELDS;

	DROP TABLE IF EXISTS TEMP_OL_PICKLIST_CUSTOM_FIELDS;

	-- Get OL field definition information
	DROP TABLE IF EXISTS TEMP_OL_FIELD_DEFINITIONS;
	SET @execString = CONCAT('CREATE TABLE TEMP_OL_FIELD_DEFINITIONS', VAR_NEW_LINE,
		'SELECT', VAR_NEW_LINE,
		'  FIELD_ORDER, FIELD_DEFINITION.FIELD_DEFINITION_ID, SECONDARY_FIELD_DEFINITION_ID, SECTION_DEFINITION.DEFAULT_LABEL AS SECTION_LABEL,', VAR_NEW_LINE,
		'  PAGE_TYPE, SECTION_ORDER, FIELD_DEFINITION.DEFAULT_LABEL AS FIELD_LABEL, ENTITY_TYPE, FIELD_NAME, FIELD_TYPE, REFERENCE_TYPE, VALIDATION_FIELD_TYPE', VAR_NEW_LINE,
		'FROM ', REPLACE(DATABASE(), 'theguru', '.'), 'SECTION_FIELD', VAR_NEW_LINE,
		'JOIN ', REPLACE(DATABASE(), 'theguru', '.'), 'SECTION_DEFINITION ON SECTION_DEFINITION.SECTION_DEFINITION_ID = SECTION_FIELD.SECTION_DEFINITION_ID', VAR_NEW_LINE,
		'JOIN ', REPLACE(DATABASE(), 'theguru', '.'), 'FIELD_DEFINITION ON FIELD_DEFINITION.FIELD_DEFINITION_ID = SECTION_FIELD.FIELD_DEFINITION_ID', VAR_NEW_LINE,
		'LEFT JOIN (SELECT DISTINCT FIELD_DEFINITION_ID, CASE WHEN VALIDATION_REGEX = ''^[0-9]*(\\\\.[0-9][0-9])?$'' THEN ''MONEY'' WHEN VALIDATION_REGEX = ''^[0-9]*$'' THEN ''NUMBER'' ELSE NULL END AS VALIDATION_FIELD_TYPE', VAR_NEW_LINE,
		'FROM ', REPLACE(DATABASE(), 'theguru', '.'), 'FIELD_VALIDATION WHERE VALIDATION_REGEX IN (''^[0-9]*$'', ''^[0-9]*(\\\\.[0-9][0-9])?$'')) AS FIELD_VALIDATION ON FIELD_VALIDATION.FIELD_DEFINITION_ID = FIELD_DEFINITION.FIELD_DEFINITION_ID', VAR_NEW_LINE,
		'WHERE IFNULL(SECTION_FIELD.IS_DELETED, 0) = 0;');
	PREPARE statement FROM @execString;
	EXECUTE statement;
	DEALLOCATE PREPARE statement;

	DELETE FROM THEGURU_FIELD_DEFINITIONS;

	-- Iterate through the data sub sources
	OPEN CSR_DATASUBSOURCES;
	DATASUBSOURCES_LOOP: LOOP
		FETCH CSR_DATASUBSOURCES INTO
			VAR_REPORTSUBSOURCE_ID, VAR_DATASUBSOURCE_VIEW_NAME;

		IF CSR_END THEN
			LEAVE DATASUBSOURCES_LOOP;
		END IF;

		-- Iterate through the views (should only be 1)
		OPEN CSR_VIEWS;

		VIEWS_LOOP: LOOP
			FETCH CSR_VIEWS INTO
				VAR_VIEW_ID, VAR_VIEW_NAME, VAR_VIEW_DISPLAY_TEXT, VAR_PRIMARY_TABLE, VAR_PRIMARY_TABLE_IS_VIEW, VAR_PRIMARY_TABLE_ALIAS, VAR_PRIMARY_TABLE_COLUMN_PREFIX, VAR_PRIMARY_TABLE_FIELD_GROUP_PREFIX, VAR_PRIMARY_TABLE_FIELD_GROUP_OVERRIDE, VAR_PRIMARY_TABLE_PARENT_ENTITY_TYPE, VAR_PRIMARY_TABLE_SUB_FIELD_NAME, VAR_PRIMARY_TABLE_DEFAULT_PAGE_TYPE;

			IF CSR_END THEN
				LEAVE VIEWS_LOOP;
			END IF;

			CALL GENERATE_FIELD_DEFINITIONS_PROCESS_TABLE(VAR_VIEW_NAME, VAR_VIEW_NAME, TRUE, VAR_PRIMARY_TABLE_COLUMN_PREFIX, VAR_PRIMARY_TABLE_FIELD_GROUP_PREFIX, VAR_PRIMARY_TABLE_FIELD_GROUP_OVERRIDE, VAR_PRIMARY_TABLE_PARENT_ENTITY_TYPE, VAR_PRIMARY_TABLE_SUB_FIELD_NAME, VAR_PRIMARY_TABLE_DEFAULT_PAGE_TYPE, FALSE, NULL);

		END LOOP;
		CLOSE CSR_VIEWS;
		SET CSR_END = 0;

	END LOOP;
	CLOSE CSR_DATASUBSOURCES;
	SET CSR_END = 0;

  CALL UPDATE_REPORTFIELD_FIELD_DEFINITIONS();

 	DROP TABLE IF EXISTS TEMP_OL_FIELD_DEFINITIONS;

END;$$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$


--
-- Definition of function `GENERATE_FIELD_DEFINITIONS_PROCESS_TABLE`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GENERATE_FIELD_DEFINITIONS_PROCESS_TABLE`(VIEWNAME VARCHAR(255), TABLENAME VARCHAR(255), ISVIEW BIT, TABLECOLUMNPREFIX VARCHAR(255), FIELDGROUPPREFIX VARCHAR(255), FIELDGROUPOVERRIDE VARCHAR(255), PARENTENTITYTYPE VARCHAR(255), SUBFIELDNAME VARCHAR(255), DEFAULTPAGETYPE VARCHAR(255), USEPARENTFIELDGROUPPREFIXES BIT, JOINID BIGINT)
BEGIN
	DECLARE CSR_END INT DEFAULT 0;

	-- THEGURU_VIEW Variables
	DECLARE VAR_VIEW_ID INTEGER;
	DECLARE VAR_VIEW_NAME VARCHAR(255);
	DECLARE VAR_VIEW_DISPLAY_TEXT VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_IS_VIEW BIT;
	DECLARE VAR_PRIMARY_TABLE_ALIAS VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_COLUMN_PREFIX VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_FIELD_GROUP_PREFIX VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_FIELD_GROUP_OVERRIDE VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_PARENT_ENTITY_TYPE VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_SUB_FIELD_NAME VARCHAR(255);
	DECLARE VAR_PRIMARY_TABLE_DEFAULT_PAGE_TYPE VARCHAR(255);

	-- THEGURU_JOIN Variables
	DECLARE VAR_JOIN_ID INTEGER;
	DECLARE VAR_JOIN_TYPE VARCHAR(20);
	DECLARE VAR_JOIN_TABLE VARCHAR(255);
	DECLARE VAR_JOIN_TABLE_IS_VIEW BIT;
	DECLARE VAR_JOIN_TABLE_ALIAS VARCHAR(255);
	DECLARE VAR_JOIN_TABLE_COLUMN_PREFIX VARCHAR(255);
	DECLARE VAR_JOIN_CRITERIA VARCHAR(2000);
	DECLARE VAR_JOIN_TABLE_FIELD_GROUP_PREFIX VARCHAR(255);
	DECLARE VAR_JOIN_TABLE_FIELD_GROUP_OVERRIDE VARCHAR(255);
	DECLARE VAR_JOIN_TABLE_PARENT_ENTITY_TYPE VARCHAR(255);
	DECLARE VAR_JOIN_TABLE_SUB_FIELD_NAME VARCHAR(255);
	DECLARE VAR_JOIN_TABLE_DEFAULT_PAGE_TYPE VARCHAR(255);
	DECLARE VAR_JOIN_TABLE_USE_PARENT_FIELD_GROUP_PREFIXES BIT;

	DECLARE CSR_JOINS CURSOR FOR
		SELECT
			JOIN_ID, JOIN_TYPE, JOIN_TABLE, JOIN_TABLE_IS_VIEW, JOIN_TABLE_ALIAS, JOIN_TABLE_COLUMN_PREFIX, JOIN_CRITERIA, FIELD_GROUP_PREFIX, FIELD_GROUP_OVERRIDE, PARENT_ENTITY_TYPE, SUB_FIELD_NAME, DEFAULT_PAGE_TYPE, USE_PARENT_FIELD_GROUP_PREFIXES
		FROM THEGURU_VIEW_JOIN
		WHERE THEGURU_VIEW_JOIN.VIEW_ID = VAR_VIEW_ID
		AND INCLUDE_ALL_FIELDS = TRUE;

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET CSR_END = 1;

	IF ISVIEW THEN
		SELECT PRIMARY_TABLE, PRIMARY_TABLE_IS_VIEW, PRIMARY_TABLE_COLUMN_PREFIX, FIELD_GROUP_PREFIX, FIELD_GROUP_OVERRIDE, PARENT_ENTITY_TYPE, SUB_FIELD_NAME, DEFAULT_PAGE_TYPE
		INTO VAR_PRIMARY_TABLE, VAR_PRIMARY_TABLE_IS_VIEW, VAR_PRIMARY_TABLE_COLUMN_PREFIX, VAR_PRIMARY_TABLE_FIELD_GROUP_PREFIX, VAR_PRIMARY_TABLE_FIELD_GROUP_OVERRIDE, VAR_PRIMARY_TABLE_PARENT_ENTITY_TYPE, VAR_PRIMARY_TABLE_SUB_FIELD_NAME, VAR_PRIMARY_TABLE_DEFAULT_PAGE_TYPE
		FROM THEGURU_VIEW WHERE VIEW_NAME = TABLENAME;
		-- Check if the viewname = tablename and if it does not, pass the TABLECOLUMNPREFIX into the call.  Otherwise, the TABLECOLUMNPREFIX and the VAR_PRIMARY_TABLE_COLUMN_PREFIX will be the same and will duplicate
		CALL GENERATE_FIELD_DEFINITIONS_PROCESS_TABLE(VIEWNAME, VAR_PRIMARY_TABLE, VAR_PRIMARY_TABLE_IS_VIEW, CONCAT(CASE WHEN VIEWNAME <> TABLENAME THEN IFNULL(TABLECOLUMNPREFIX, '') ELSE '' END, IFNULL(VAR_PRIMARY_TABLE_COLUMN_PREFIX, '')), CONCAT(IFNULL(FIELDGROUPPREFIX, ''), IFNULL(VAR_PRIMARY_TABLE_FIELD_GROUP_PREFIX,'')), VAR_PRIMARY_TABLE_FIELD_GROUP_OVERRIDE, VAR_PRIMARY_TABLE_PARENT_ENTITY_TYPE, VAR_PRIMARY_TABLE_SUB_FIELD_NAME, VAR_PRIMARY_TABLE_DEFAULT_PAGE_TYPE, USEPARENTFIELDGROUPPREFIXES, JOINID);
    SET CSR_END = 0;
	ELSE
		CALL GENERATE_FIELD_DEFINITIONS_BUILD_FIELDS(VIEWNAME, TABLENAME, CONCAT(CASE WHEN VIEWNAME <> TABLENAME THEN IFNULL(TABLECOLUMNPREFIX, '') ELSE '' END, IFNULL(VAR_PRIMARY_TABLE_COLUMN_PREFIX, '')), FIELDGROUPPREFIX, FIELDGROUPOVERRIDE, PARENTENTITYTYPE, SUBFIELDNAME, DEFAULTPAGETYPE, JOINID);
        SET CSR_END = 0;
	END IF;

	SET VAR_VIEW_ID = (SELECT VIEW_ID FROM THEGURU_VIEW WHERE VIEW_NAME = TABLENAME);

	-- Iterate through the join tables
	OPEN CSR_JOINS;

	JOINS_LOOP: LOOP
		FETCH CSR_JOINS INTO
			VAR_JOIN_ID, VAR_JOIN_TYPE, VAR_JOIN_TABLE, VAR_JOIN_TABLE_IS_VIEW, VAR_JOIN_TABLE_ALIAS, VAR_JOIN_TABLE_COLUMN_PREFIX, VAR_JOIN_CRITERIA, VAR_JOIN_TABLE_FIELD_GROUP_PREFIX, VAR_JOIN_TABLE_FIELD_GROUP_OVERRIDE, VAR_JOIN_TABLE_PARENT_ENTITY_TYPE, VAR_JOIN_TABLE_SUB_FIELD_NAME, VAR_JOIN_TABLE_DEFAULT_PAGE_TYPE, VAR_JOIN_TABLE_USE_PARENT_FIELD_GROUP_PREFIXES;

		IF CSR_END THEN
			LEAVE JOINS_LOOP;
		END IF;

    	-- If the parent specified to use the parent field group prefixes, then use that setting
    	IF (USEPARENTFIELDGROUPPREFIXES) THEN
      		SET VAR_JOIN_TABLE_USE_PARENT_FIELD_GROUP_PREFIXES = USEPARENTFIELDGROUPPREFIXES;
    	END IF;

		IF VAR_JOIN_TABLE_IS_VIEW THEN
			SELECT PRIMARY_TABLE, PRIMARY_TABLE_IS_VIEW, PRIMARY_TABLE_COLUMN_PREFIX, FIELD_GROUP_PREFIX, PARENT_ENTITY_TYPE, SUB_FIELD_NAME, DEFAULT_PAGE_TYPE
			INTO VAR_PRIMARY_TABLE, VAR_PRIMARY_TABLE_IS_VIEW, VAR_PRIMARY_TABLE_COLUMN_PREFIX, VAR_PRIMARY_TABLE_FIELD_GROUP_PREFIX, VAR_PRIMARY_TABLE_PARENT_ENTITY_TYPE, VAR_PRIMARY_TABLE_SUB_FIELD_NAME, VAR_PRIMARY_TABLE_DEFAULT_PAGE_TYPE
			FROM THEGURU_VIEW WHERE VIEW_NAME = VAR_JOIN_TABLE;
			CALL GENERATE_FIELD_DEFINITIONS_PROCESS_TABLE(VIEWNAME, VAR_JOIN_TABLE, TRUE, CASE WHEN USEPARENTFIELDGROUPPREFIXES = TRUE THEN CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), VAR_JOIN_TABLE_COLUMN_PREFIX) ELSE VAR_JOIN_TABLE_COLUMN_PREFIX END, CASE WHEN USEPARENTFIELDGROUPPREFIXES = TRUE THEN CONCAT(IFNULL(FIELDGROUPPREFIX, ''), VAR_JOIN_TABLE_FIELD_GROUP_PREFIX) ELSE VAR_JOIN_TABLE_FIELD_GROUP_PREFIX END, VAR_JOIN_TABLE_FIELD_GROUP_OVERRIDE, VAR_JOIN_TABLE_PARENT_ENTITY_TYPE, VAR_JOIN_TABLE_SUB_FIELD_NAME, VAR_JOIN_TABLE_DEFAULT_PAGE_TYPE, VAR_JOIN_TABLE_USE_PARENT_FIELD_GROUP_PREFIXES, VAR_JOIN_ID);
			-- CALL GENERATE_FIELD_DEFINITIONS_PROCESS_TABLE(VIEWNAME, VAR_PRIMARY_TABLE, VAR_PRIMARY_TABLE_IS_VIEW, VAR_PRIMARY_TABLE_COLUMN_PREFIX, CONCAT(IFNULL(FIELDGROUPPREFIX, ''), IFNULL(VAR_JOIN_TABLE_FIELD_GROUP_PREFIX, '')), VAR_JOIN_TABLE_FIELD_GROUP_OVERRIDE, VAR_PRIMARY_TABLE_PARENT_ENTITY_TYPE, VAR_PRIMARY_TABLE_SUB_FIELD_NAME, VAR_PRIMARY_TABLE_DEFAULT_PAGE_TYPE);
            SET CSR_END = 0;
		ELSE
			CALL GENERATE_FIELD_DEFINITIONS_BUILD_FIELDS(VIEWNAME, VAR_JOIN_TABLE, CONCAT(CASE WHEN VIEWNAME <> TABLENAME THEN IFNULL(TABLECOLUMNPREFIX, '') ELSE '' END, IFNULL(VAR_JOIN_TABLE_COLUMN_PREFIX, '')), CONCAT(IFNULL(FIELDGROUPPREFIX, ''), IFNULL(VAR_JOIN_TABLE_FIELD_GROUP_PREFIX,'')), VAR_JOIN_TABLE_FIELD_GROUP_OVERRIDE, VAR_JOIN_TABLE_PARENT_ENTITY_TYPE, VAR_JOIN_TABLE_SUB_FIELD_NAME, VAR_JOIN_TABLE_DEFAULT_PAGE_TYPE, VAR_JOIN_ID);
            SET CSR_END = 0;
		END IF;
	END LOOP;
	CLOSE CSR_JOINS;
	SET CSR_END = 0;
END;$$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$


--
-- Definition of function `GET_ENTITY_TYPE_FOR_TABLE`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `GET_ENTITY_TYPE_FOR_TABLE`(TABLENAME VARCHAR(255))
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
	DECLARE RESULT VARCHAR(255);

	IF UPPER(TABLENAME) = 'CONSTITUENT' THEN
		SET RESULT = 'constituent';
	ELSEIF UPPER(TABLENAME) = 'DISTRO_LINE' THEN
		SET RESULT = 'distributionline';
	ELSEIF UPPER(TABLENAME) = 'GIFT' THEN
		SET RESULT = 'gift';
	ELSEIF UPPER(TABLENAME) = 'COMMUNICATION_HISTORY' THEN
		SET RESULT = 'communicationhistory';
	ELSEIF UPPER(TABLENAME) = 'ADDRESS' THEN
		SET RESULT = 'address';
	ELSEIF UPPER(TABLENAME) = 'EMAIL' THEN
		SET RESULT = 'email';
	ELSEIF UPPER(TABLENAME) = 'PHONE' THEN
		SET RESULT = 'phone';
	ELSEIF UPPER(TABLENAME) = 'ADJUSTED_GIFT' THEN
		SET RESULT = 'adjustedgift';
	ELSEIF UPPER(TABLENAME) = 'PICKLIST' THEN
		SET RESULT = 'picklist';
	ELSEIF UPPER(TABLENAME) = 'PICKLIST_ITEM' THEN
		SET RESULT = 'picklistitem';
	ELSEIF UPPER(TABLENAME) = 'RECURRING_GIFT' THEN
		SET RESULT = 'recurringGift';
	ELSEIF UPPER(TABLENAME) = 'PAYMENT_SOURCE' THEN
		SET RESULT = 'paymentSource';
	ELSEIF UPPER(TABLENAME) = 'PLEDGE' THEN
		SET RESULT = 'pledge';
	ELSEIF UPPER(TABLENAME) = 'GIFT_IN_KIND' THEN
		SET RESULT = 'giftInKind';
    ELSE
        SET RESULT = LOWER(REPLACE(TABLENAME, '_', ''));
	END IF;

	RETURN(RESULT);	-- return
END$$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$


--
-- Definition of function `GENERATE_FIELD_DEFINITIONS_BUILD_FIELDS`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GENERATE_FIELD_DEFINITIONS_BUILD_FIELDS`(VIEWNAME VARCHAR(255), TABLENAME VARCHAR(255), TABLECOLUMNPREFIX VARCHAR(255), FIELDGROUPPREFIX VARCHAR(255), FIELDGROUPOVERRIDE VARCHAR(255), PARENTENTITYTYPE VARCHAR(255), SUBFIELDNAME VARCHAR(255), DEFAULTPAGETYPE VARCHAR(255), JOINID BIGINT)
BEGIN
	DECLARE CSR_END INT DEFAULT 0;
	DECLARE VAR_FIELD_ORDER INT;
	DECLARE VAR_FIELD_DEFINITION_ID VARCHAR(255);
	DECLARE VAR_SECONDARY_FIELD_DEFINITION_ID VARCHAR(255);
	DECLARE VAR_SECTION_LABEL VARCHAR(255);
	DECLARE VAR_SECTION_ORDER INT;
	DECLARE VAR_FIELD_LABEL VARCHAR(255);
	DECLARE VAR_ENTITY_TYPE VARCHAR(255);
	DECLARE VAR_FIELD_NAME VARCHAR(255);
	DECLARE VAR_FIELD_TYPE VARCHAR(255);
	DECLARE VAR_REFERENCE_TYPE VARCHAR(255);
	DECLARE VAR_VALIDATION_FIELD_TYPE VARCHAR(255);
	DECLARE VAR_PAGE_TYPE VARCHAR(255);
	
	DECLARE VAR_COLUMN_NAME VARCHAR(500);
	DECLARE VAR_COLUMN_TYPE VARCHAR(255);
    
	DECLARE VAR_FIELD_GROUP VARCHAR(255);
    DECLARE VAR_DISPLAY_NAME VARCHAR(255);
	DECLARE VAR_ADDITIONAL_DEF_COLUMN_NAME VARCHAR(4000);
    DECLARE VAR_ALIAS_NAME VARCHAR(255);
    DECLARE VAR_ADDITIONAL_DEF_FIELD_TYPE INT;

    DECLARE VAR_PICKLIST_NAME_ID VARCHAR(255);
    DECLARE VAR_PICKLIST_ITEM_NAME VARCHAR(255);
    DECLARE VAR_CUSTOM_FIELD_ENTITY_TYPE VARCHAR(255);
	DECLARE VAR_CUSTOM_FIELD_ENTITY_ID VARCHAR(255);
    DECLARE VAR_CUSTOM_FIELD_FIELD_NAME VARCHAR(255);
    DECLARE VAR_JOIN_ID BIGINT;
    DECLARE VAR_SOURCE_COLUMN_NAME VARCHAR(2000);
	DECLARE VAR_CONSTITUENT_JOIN_FIELD VARCHAR(255);
	DECLARE VAR_PICKLIST_CUSTOM_FIELD BIT;

	DECLARE CSR_FIELD_DEFINITIONS CURSOR FOR
    SELECT DISTINCT
		FIELD_ORDER, FIELD_DEFINITION_ID, SECONDARY_FIELD_DEFINITION_ID,
		CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END,
		SECTION_ORDER, FIELD_LABEL, ENTITY_TYPE, FIELD_NAME, FIELD_TYPE, REFERENCE_TYPE, VALIDATION_FIELD_TYPE, PAGE_TYPE
    FROM TEMP_OL_FIELD_DEFINITIONS
    WHERE ENTITY_TYPE = GET_ENTITY_TYPE_FOR_TABLE(TABLENAME)
    AND FIELD_NAME NOT IN (SELECT FIELD_NAME FROM THEGURU_TABLE_FIELD_EXCLUSIONS WHERE TABLE_NAME = TABLENAME)
    AND FIELD_NAME LIKE '%customFieldMap%'
    AND PAGE_TYPE NOT LIKE '%View'
	UNION
    SELECT DISTINCT
		FIELD_ORDER, FIELD_DEFINITION_ID, SECONDARY_FIELD_DEFINITION_ID,
		CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END,
		SECTION_ORDER, FIELD_LABEL, ENTITY_TYPE, SUBSTRING(SECONDARY_FIELD_DEFINITION_ID, LOCATE(CONCAT(SUBFIELDNAME, '.'), SECONDARY_FIELD_DEFINITION_ID) + LENGTH(CONCAT(SUBFIELDNAME, '.')), LENGTH(SECONDARY_FIELD_DEFINITION_ID)),
		FIELD_TYPE, REFERENCE_TYPE, VALIDATION_FIELD_TYPE, PAGE_TYPE
    FROM TEMP_OL_FIELD_DEFINITIONS
	WHERE ENTITY_TYPE = PARENTENTITYTYPE
	AND FIELD_NAME = SUBFIELDNAME
    AND SECONDARY_FIELD_DEFINITION_ID LIKE '%customFieldMap%'
	AND SECONDARY_FIELD_DEFINITION_ID NOT IN (SELECT FIELD_NAME FROM THEGURU_TABLE_FIELD_EXCLUSIONS WHERE TABLE_NAME = TABLENAME)
    AND PAGE_TYPE NOT LIKE '%View';
	
	DECLARE CSR_FIELDS CURSOR FOR
		SELECT
			COLUMN_NAME, DATA_TYPE
		FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
        AND TABLE_NAME = TABLENAME
        AND COLUMN_NAME NOT IN (SELECT FIELD_NAME FROM THEGURU_TABLE_FIELD_EXCLUSIONS WHERE TABLE_NAME = TABLENAME);
	DECLARE CSR_ADDITIONAL_FIELD_DEFINITIONS CURSOR FOR
    SELECT DISTINCT
        FIELD_GROUP, DISPLAY_NAME, COLUMN_NAME, ALIAS_NAME, FIELD_TYPE, 
		PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE,
		CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD, PICKLIST_CUSTOM_FIELD
    FROM THEGURU_TABLE_ADDITIONAL_FIELD_DEFINITIONS
    WHERE TABLE_NAME = TABLENAME;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET CSR_END = 1;
	
	OPEN CSR_FIELDS;
	PRIMARY_FIELDS_LOOP: LOOP
		FETCH CSR_FIELDS INTO
			VAR_COLUMN_NAME, VAR_COLUMN_TYPE;
		IF CSR_END THEN
			LEAVE PRIMARY_FIELDS_LOOP;
		END IF;
		SET VAR_FIELD_ORDER = 0;
		SET VAR_FIELD_DEFINITION_ID = '';
		SET VAR_SECONDARY_FIELD_DEFINITION_ID = '';
		SET VAR_SECTION_LABEL = '';
		SET VAR_SECTION_ORDER = 0;
		SET VAR_FIELD_LABEL = '';
		SET VAR_ENTITY_TYPE = '';
		SET VAR_FIELD_NAME = '';
		SET VAR_FIELD_TYPE = '';
		SET VAR_REFERENCE_TYPE = '';
		IF (LENGTH(IFNULL(PARENTENTITYTYPE, '')) = 0) THEN
			SELECT DISTINCT
				FIELD_ORDER, FIELD_DEFINITION_ID, SECONDARY_FIELD_DEFINITION_ID, SECTION_LABEL, SECTION_ORDER,
				FIELD_LABEL, ENTITY_TYPE, FIELD_NAME, FIELD_TYPE, REFERENCE_TYPE, PAGE_TYPE
			INTO
				VAR_FIELD_ORDER, VAR_FIELD_DEFINITION_ID, VAR_SECONDARY_FIELD_DEFINITION_ID, VAR_SECTION_LABEL, VAR_SECTION_ORDER,
				VAR_FIELD_LABEL, VAR_ENTITY_TYPE, VAR_FIELD_NAME, VAR_FIELD_TYPE, VAR_REFERENCE_TYPE, VAR_PAGE_TYPE
			FROM TEMP_OL_FIELD_DEFINITIONS
			WHERE ENTITY_TYPE = GET_ENTITY_TYPE_FOR_TABLE(TABLENAME)
			AND (FIELD_NAME = REPLACE(VAR_COLUMN_NAME, '_', '') OR FIELD_NAME = REPLACE(VAR_COLUMN_NAME, CONCAT(REPLACE(TABLENAME, '_', ''), '_'), ''))
			AND FIELD_NAME NOT IN (SELECT FIELD_NAME FROM THEGURU_TABLE_FIELD_EXCLUSIONS WHERE TABLE_NAME = TABLENAME)
			AND IFNULL(SECTION_LABEL, '') <> ''
			AND SECTION_LABEL NOT LIKE '%EDIT%'
			ORDER BY
				CASE WHEN LENGTH(IFNULL(DEFAULTPAGETYPE, '')) > 0 AND PAGE_TYPE = DEFAULTPAGETYPE THEN 1 ELSE 2 END ASC,
				(SELECT COUNT(*) FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.SECTION_LABEL = TEMP_OL_FIELD_DEFINITIONS.SECTION_LABEL) DESC
			LIMIT 1;
		ELSE
			SELECT DISTINCT
				FIELD_ORDER, FIELD_DEFINITION_ID, SECONDARY_FIELD_DEFINITION_ID, SECTION_LABEL, SECTION_ORDER,
				FIELD_LABEL, ENTITY_TYPE, SUBSTRING(SECONDARY_FIELD_DEFINITION_ID, LOCATE(CONCAT(SUBFIELDNAME, '.'), SECONDARY_FIELD_DEFINITION_ID) + LENGTH(CONCAT(SUBFIELDNAME, '.')), LENGTH(SECONDARY_FIELD_DEFINITION_ID)), FIELD_TYPE, REFERENCE_TYPE, PAGE_TYPE
			INTO
				VAR_FIELD_ORDER, VAR_FIELD_DEFINITION_ID, VAR_SECONDARY_FIELD_DEFINITION_ID, VAR_SECTION_LABEL, VAR_SECTION_ORDER,
				VAR_FIELD_LABEL, VAR_ENTITY_TYPE, VAR_FIELD_NAME, VAR_FIELD_TYPE, VAR_REFERENCE_TYPE, VAR_PAGE_TYPE
			FROM TEMP_OL_FIELD_DEFINITIONS
			WHERE ENTITY_TYPE = PARENTENTITYTYPE
			AND (FIELD_NAME = SUBFIELDNAME OR FIELD_NAME = REPLACE(SUBFIELDNAME, CONCAT(TABLENAME, '_'), ''))
			AND REPLACE(SUBSTRING(SECONDARY_FIELD_DEFINITION_ID, LOCATE(CONCAT(SUBFIELDNAME, '.'), SECONDARY_FIELD_DEFINITION_ID) + LENGTH(CONCAT(SUBFIELDNAME, '.')), LENGTH(SECONDARY_FIELD_DEFINITION_ID)), 'ReadOnly', '') = REPLACE(VAR_COLUMN_NAME, '_', '')
			AND REPLACE(SECONDARY_FIELD_DEFINITION_ID, CONCAT(SUBFIELDNAME, '.'), '') NOT IN (SELECT FIELD_NAME FROM THEGURU_TABLE_FIELD_EXCLUSIONS WHERE TABLE_NAME = TABLENAME)
			AND IFNULL(SECTION_LABEL, '') <> ''
			AND SECTION_LABEL NOT LIKE '%EDIT%'
			ORDER BY
				CASE WHEN LENGTH(IFNULL(DEFAULTPAGETYPE, '')) > 0 AND PAGE_TYPE = DEFAULTPAGETYPE THEN 1 ELSE 2 END ASC,
				(SELECT COUNT(*) FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.SECTION_LABEL = TEMP_OL_FIELD_DEFINITIONS.SECTION_LABEL) DESC
			LIMIT 1;
		END IF;
		
		SET VAR_FIELD_DEFINITION_ID = REPLACE(VAR_FIELD_DEFINITION_ID, 'ReadOnly', '');
		
		IF CSR_END = 0 THEN
            IF VAR_FIELD_TYPE = 'CODE' OR VAR_FIELD_TYPE = 'CODE_OTHER_DISPLAY' OR VAR_FIELD_TYPE = 'PICKLIST' OR VAR_FIELD_TYPE = 'PICKLIST_DISPLAY' THEN
                
                WHILE LOCATE('.', VAR_FIELD_DEFINITION_ID) DO
                    SET VAR_FIELD_DEFINITION_ID = SUBSTR(VAR_FIELD_DEFINITION_ID, LOCATE('.', VAR_FIELD_DEFINITION_ID) + 1);
                END WHILE;
                
                INSERT THEGURU_FIELD_DEFINITIONS
                    (VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
                SELECT
                    VIEWNAME,
                    CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                        CASE
                            WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                                  WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, ''), '_SHORT_DISPLAY_NAME'), 1, 64)) IS NOT NULL THEN
                                  (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                                  WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, ''), '_SHORT_DISPLAY_NAME'), 1, 64))
                            WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
							WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                            ELSE IFNULL(VAR_SECTION_LABEL, '')
                        END) AS FIELD_GROUP,
                    CONCAT('GETPICKLISTDISPLAYVALUE(''', VAR_FIELD_DEFINITION_ID, ''', ',
                        CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, '')), ')') AS COLUMN_NAME,
                    SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, ''), '_SDN'), 1, 64) AS ALIAS_NAME,
                    CONCAT(VAR_FIELD_LABEL, ' Short Display Name') AS DISPLAY_TEXT,
                    1 AS FIELD_TYPE,
                    CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
                    (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
					(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
					VAR_FIELD_DEFINITION_ID AS PICKLIST_NAME_ID,
					IFNULL(VAR_COLUMN_NAME, '') AS PICKLIST_ITEM_NAME,
					NULL AS CUSTOM_FIELD_ENTITY_TYPE,
					NULL AS CUSTOM_FIELD_ENTITY_ID,
					NULL AS CUSTOM_FIELD_FIELD_NAME,
					IFNULL(JOINID, 0) AS JOIN_ID,
					'${PICKLIST_ITEM}.DEFAULT_DISPLAY_VALUE' AS SOURCE_COLUMN_NAME,
					NULL AS CONSTITUENT_JOIN_FIELD;
                
                INSERT THEGURU_FIELD_DEFINITIONS
                    (VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
                SELECT
                    VIEWNAME,
                    CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                        CASE
                            WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                                  WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, ''), '_LONG_DISPLAY_NAME'), 1, 64)) IS NOT NULL THEN
                                  (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                                  WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, ''), '_LONG_DISPLAY_NAME'), 1, 64))
                            WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
							WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                            ELSE IFNULL(VAR_SECTION_LABEL, '')
                        END) AS FIELD_GROUP,
                    CONCAT('GETPICKLISTLONGDESCRIPTION(''', VAR_FIELD_DEFINITION_ID, ''', ',
                        CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, '')), ')') AS COLUMN_NAME,
                    SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, ''), '_LDN'), 1, 64) AS ALIAS_NAME,
                    CONCAT(VAR_FIELD_LABEL, ' Long Display Name') AS DISPLAY_TEXT,
                    1 AS FIELD_TYPE,
                    CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
                    (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
					(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
					VAR_FIELD_DEFINITION_ID AS PICKLIST_NAME_ID,
					IFNULL(VAR_COLUMN_NAME, '') AS PICKLIST_ITEM_NAME,
					NULL AS CUSTOM_FIELD_ENTITY_TYPE,
					NULL AS CUSTOM_FIELD_ENTITY_ID,
					NULL AS CUSTOM_FIELD_FIELD_NAME,
					IFNULL(JOINID, 0) AS JOIN_ID,
					'${PICKLIST_ITEM}.LONG_DESCRIPTION' AS SOURCE_COLUMN_NAME,
					NULL AS CONSTITUENT_JOIN_FIELD;
                
                INSERT THEGURU_FIELD_DEFINITIONS
                    (VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
                SELECT
                    VIEWNAME,
                    CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                        CASE
                            WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                                  WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, ''), '_DESCRIPTION'), 1, 64)) IS NOT NULL THEN
                                  (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                                  WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, ''), '_DESCRIPTION'), 1, 64))
                            WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
							WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                            ELSE IFNULL(VAR_SECTION_LABEL, '')
                        END) AS FIELD_GROUP,
                    CONCAT('GETPICKLISTDETAIL(''', VAR_FIELD_DEFINITION_ID, ''', ',
                        CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, '')), ')') AS COLUMN_NAME,
                    SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, ''), '_DESC'), 1, 64) AS ALIAS_NAME,
                    CONCAT(VAR_FIELD_LABEL, ' Description') AS DISPLAY_TEXT,
                    1 AS FIELD_TYPE,
                    CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
                    (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
					(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
					VAR_FIELD_DEFINITION_ID AS PICKLIST_NAME_ID,
					IFNULL(VAR_COLUMN_NAME, '') AS PICKLIST_ITEM_NAME,
					NULL AS CUSTOM_FIELD_ENTITY_TYPE,
					NULL AS CUSTOM_FIELD_ENTITY_ID,
					NULL AS CUSTOM_FIELD_FIELD_NAME,
					IFNULL(JOINID, 0) AS JOIN_ID,
					'${PICKLIST_ITEM}.DETAIL' AS SOURCE_COLUMN_NAME,
					NULL AS CONSTITUENT_JOIN_FIELD;
            ELSE
                INSERT THEGURU_FIELD_DEFINITIONS
                    (VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
                SELECT
                    VIEWNAME,
                    CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                        CASE
                            WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                                  WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, '')), 1, 64)) IS NOT NULL THEN
                                  (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                                  WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, '')), 1, 64))
                            WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
							WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                            ELSE IFNULL(VAR_SECTION_LABEL, '')
                        END) AS FIELD_GROUP,
                    CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, '')) AS COLUMN_NAME,
                    SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_COLUMN_NAME, '')), 1, 64) AS ALIAS_NAME,
                    VAR_FIELD_LABEL,
                    CASE
                    	WHEN VAR_FIELD_TYPE = 'CHECKBOX' THEN 6
                        WHEN VAR_COLUMN_TYPE = 'tinyint' THEN 2
                        WHEN VAR_COLUMN_TYPE = 'int' THEN 2
                        WHEN VAR_COLUMN_TYPE = 'smallint' THEN 2
                        WHEN VAR_COLUMN_TYPE = 'bigint' THEN 2
                        WHEN VAR_COLUMN_TYPE = 'datetime' THEN 4
                        WHEN VAR_COLUMN_TYPE = 'decimal' THEN 5
                        WHEN VAR_COLUMN_TYPE = 'bit' THEN 6
                        ELSE 1
                    END,
                    CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
                    (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
					(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
					NULL AS PICKLIST_NAME_ID,
					NULL AS PICKLIST_ITEM_NAME,
					NULL AS CUSTOM_FIELD_ENTITY_TYPE,
					NULL AS CUSTOM_FIELD_ENTITY_ID,
					NULL AS CUSTOM_FIELD_FIELD_NAME,
					IFNULL(JOINID, 0) AS JOIN_ID,
					CONCAT('${', TABLENAME, '}.', IFNULL(VAR_COLUMN_NAME, '')) AS SOURCE_COLUMN_NAME,
					NULL AS CONSTITUENT_JOIN_FIELD;
			END IF;
        ELSE
            SET CSR_END = 0;
        END IF;
	END LOOP;
	SET CSR_END = 0;
	CLOSE CSR_FIELDS;
	SET VAR_FIELD_ORDER = 0;
	SET VAR_FIELD_DEFINITION_ID = '';
	SET VAR_SECONDARY_FIELD_DEFINITION_ID = '';
	SET VAR_SECTION_LABEL = '';
	SET VAR_SECTION_ORDER = 0;
	SET VAR_FIELD_LABEL = '';
	SET VAR_ENTITY_TYPE = '';
	SET VAR_FIELD_NAME = '';
	SET VAR_FIELD_TYPE = '';
	SET VAR_REFERENCE_TYPE = '';
	OPEN CSR_FIELD_DEFINITIONS;
    
	FIELD_DEFINITIONS_LOOP: LOOP
		FETCH CSR_FIELD_DEFINITIONS INTO
			VAR_FIELD_ORDER, VAR_FIELD_DEFINITION_ID, VAR_SECONDARY_FIELD_DEFINITION_ID, VAR_SECTION_LABEL, VAR_SECTION_ORDER,
			VAR_FIELD_LABEL, VAR_ENTITY_TYPE, VAR_FIELD_NAME, VAR_FIELD_TYPE, VAR_REFERENCE_TYPE, VAR_VALIDATION_FIELD_TYPE, VAR_PAGE_TYPE;
		IF CSR_END THEN
			LEAVE FIELD_DEFINITIONS_LOOP;
		END IF;
		SET VAR_FIELD_NAME = REPLACE(VAR_FIELD_NAME, 'ReadOnly]', ']');
		
		IF VAR_FIELD_TYPE = 'TEXT' OR VAR_FIELD_TYPE = 'LONG_TEXT' OR VAR_FIELD_TYPE = 'READ_ONLY_TEXT' THEN
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64) AS ALIAS_NAME,
				VAR_FIELD_LABEL AS DISPLAY_TEXT,
				CASE WHEN VAR_VALIDATION_FIELD_TYPE = 'MONEY' THEN 5 WHEN VAR_VALIDATION_FIELD_TYPE = 'NUMBER' THEN 2 ELSE 1 END AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				NULL AS PICKLIST_NAME_ID,
				NULL AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${CUSTOM_FIELD}.FIELD_VALUE' AS SOURCE_COLUMN_NAME,
				NULL AS CONSTITUENT_JOIN_FIELD;
		ELSEIF VAR_FIELD_TYPE = 'CHECKBOX' THEN
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64) AS ALIAS_NAME,
				VAR_FIELD_LABEL AS DISPLAY_TEXT,
				6 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				NULL AS PICKLIST_NAME_ID,
				NULL AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${CUSTOM_FIELD}.FIELD_VALUE' AS SOURCE_COLUMN_NAME,
				NULL AS CONSTITUENT_JOIN_FIELD;
		ELSEIF VAR_FIELD_TYPE = 'DATE' THEN
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMDATEFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64) AS ALIAS_NAME,
				VAR_FIELD_LABEL AS DISPLAY_TEXT,
				4 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				NULL AS PICKLIST_NAME_ID,
				NULL AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${CUSTOM_FIELD}.FIELD_DATE_VALUE' AS SOURCE_COLUMN_NAME,
				NULL AS CONSTITUENT_JOIN_FIELD;
		ELSEIF VAR_FIELD_TYPE = 'NUMBER' THEN
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64) AS ALIAS_NAME,
				VAR_FIELD_LABEL AS DISPLAY_TEXT,
				2 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				NULL AS PICKLIST_NAME_ID,
				NULL AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${CUSTOM_FIELD}.FIELD_NUMERIC_VALUE' AS SOURCE_COLUMN_NAME,
				NULL AS CONSTITUENT_JOIN_FIELD;
		ELSEIF VAR_FIELD_TYPE = 'PERCENTAGE' THEN
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64) AS ALIAS_NAME,
				VAR_FIELD_LABEL AS DISPLAY_TEXT,
				5 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				NULL AS PICKLIST_NAME_ID,
				NULL AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${CUSTOM_FIELD}.FIELD_VALUE' AS SOURCE_COLUMN_NAME,
				NULL AS CONSTITUENT_JOIN_FIELD;
        ELSEIF VAR_FIELD_TYPE = 'MULTI_CODE_ADDITIONAL' THEN
            
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELDCONCATENATED(',
                    CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
                    (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
                        ', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64) AS ALIAS_NAME,
				VAR_FIELD_LABEL AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				NULL AS PICKLIST_NAME_ID,
				NULL AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${CUSTOM_FIELD}.FIELD_VALUE' AS SOURCE_COLUMN_NAME,
				NULL AS CONSTITUENT_JOIN_FIELD;
            
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), 'ADDITIONAL'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), 'ADDITIONAL'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				REPLACE(CONCAT('GETCUSTOMFIELDCONCATENATED(',
                    CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
                    (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
                        ', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')'), '.', '.additional_') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), 'ADD'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' - Additional') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				NULL AS PICKLIST_NAME_ID,
				NULL AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '.additional_') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${CUSTOM_FIELD}.FIELD_VALUE' AS SOURCE_COLUMN_NAME,
				NULL AS CONSTITUENT_JOIN_FIELD;
		ELSEIF VAR_FIELD_TYPE = 'CODE' OR VAR_FIELD_TYPE = 'CODE_OTHER_DISPLAY' OR VAR_FIELD_TYPE = 'PICKLIST' OR VAR_FIELD_TYPE = 'PICKLIST_DISPLAY' THEN
            
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_SHORT_DISPLAY_NAME'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_SHORT_DISPLAY_NAME'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETPICKLISTDISPLAYVALUE(''', VAR_FIELD_NAME, ''', GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '''))') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_SDN'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' Short Display Name') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				VAR_FIELD_NAME AS PICKLIST_NAME_ID,
				'${CUSTOM_FIELD}.FIELD_VALUE' AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${PICKLIST_ITEM}.DEFAULT_DISPLAY_VALUE' AS SOURCE_COLUMN_NAME,
				NULL AS CONSTITUENT_JOIN_FIELD;
            
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_LONG_DISPLAY_NAME'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_LONG_DISPLAY_NAME'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETPICKLISTLONGDESCRIPTION(''', VAR_FIELD_NAME, ''', GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '''))') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_LDN'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' Long Display Name') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				VAR_FIELD_NAME AS PICKLIST_NAME_ID,
				'${CUSTOM_FIELD}.FIELD_VALUE' AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${PICKLIST_ITEM}.LONG_DESCRIPTION' AS SOURCE_COLUMN_NAME,
				NULL AS CONSTITUENT_JOIN_FIELD;
            
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_DESCRIPTION'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_DESCRIPTION'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETPICKLISTDETAIL(''', VAR_FIELD_NAME, ''', GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '''))') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_DESC'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' Description') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				VAR_FIELD_NAME AS PICKLIST_NAME_ID,
				'${CUSTOM_FIELD}.FIELD_VALUE' AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${PICKLIST_ITEM}.DETAIL' AS SOURCE_COLUMN_NAME,
				NULL AS CONSTITUENT_JOIN_FIELD;
		ELSEIF VAR_FIELD_TYPE = 'MULTI_PICKLIST' THEN
			
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_SHORT_DISPLAY_NAME'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_SHORT_DISPLAY_NAME'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELDDISPLAYVALUECONCATENATED(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''', ''', VAR_FIELD_NAME, ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_SDN'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' Short Display Names') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				VAR_FIELD_NAME AS PICKLIST_NAME_ID,
				'${CUSTOM_FIELD}.FIELD_VALUE' AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${PICKLIST_ITEM}.DEFAULT_DISPLAY_VALUE' AS SOURCE_COLUMN_NAME,
				NULL AS CONSTITUENT_JOIN_FIELD;
			
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_LONG_DISPLAY_NAME'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_LONG_DISPLAY_NAME'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELDLONGDESCRIPTIONCONCATENATED(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''', ''', VAR_FIELD_NAME, ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_LDN'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' Long Display Names') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				VAR_FIELD_NAME AS PICKLIST_NAME_ID,
				'${CUSTOM_FIELD}.FIELD_VALUE' AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${PICKLIST_ITEM}.LONG_DESCRIPTION' AS SOURCE_COLUMN_NAME,
				NULL AS CONSTITUENT_JOIN_FIELD;
			
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_DESCRIPTION'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), 'DESCRIPTION'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELDPICKLISTDETAILCONCATENATED(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''', ''', VAR_FIELD_NAME, ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_DESC'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' Description Names') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				VAR_FIELD_NAME AS PICKLIST_NAME_ID,
				'${CUSTOM_FIELD}.FIELD_VALUE' AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${PICKLIST_ITEM}.DETAIL' AS SOURCE_COLUMN_NAME,
				NULL AS CONSTITUENT_JOIN_FIELD;
        ELSEIF VAR_FIELD_TYPE = 'MULTI_PICKLIST_ADDITIONAL' THEN
			
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_SHORT_DISPLAY_NAME'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_SHORT_DISPLAY_NAME'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELDDISPLAYVALUECONCATENATED(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''', ''', VAR_FIELD_NAME, ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_SDN'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' Short Display Names') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				VAR_FIELD_NAME AS PICKLIST_NAME_ID,
				'${CUSTOM_FIELD}.FIELD_VALUE' AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${PICKLIST_ITEM}.DEFAULT_DISPLAY_VALUE' AS SOURCE_COLUMN_NAME,
				NULL AS CONSTITUENT_JOIN_FIELD;
			
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_LONG_DISPLAY_NAME'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_LONG_DISPLAY_NAME'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELDLONGDESCRIPTIONCONCATENATED(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''', ''', VAR_FIELD_NAME, ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_LDN'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' Long Display Names') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				VAR_FIELD_NAME AS PICKLIST_NAME_ID,
				'${CUSTOM_FIELD}.FIELD_VALUE' AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${PICKLIST_ITEM}.LONG_DESCRIPTION' AS SOURCE_COLUMN_NAME,
				NULL AS CONSTITUENT_JOIN_FIELD;
			
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_DESCRIPTION'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_DESCRIPTION'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELDPICKLISTDETAILCONCATENATED(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''', ''', VAR_FIELD_NAME, ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_DESC'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' Description Names') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				VAR_FIELD_NAME AS PICKLIST_NAME_ID,
				'${CUSTOM_FIELD}.FIELD_VALUE' AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${PICKLIST_ITEM}.DETAIL' AS SOURCE_COLUMN_NAME,
				NULL AS CONSTITUENT_JOIN_FIELD;
            
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), 'ADDITIONAL'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), 'ADDITIONAL'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMFIELDCONCATENATED(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(
					REPLACE(VAR_FIELD_NAME, CASE WHEN VAR_FIELD_NAME LIKE '%.%' THEN '.' ELSE '[' END, CASE WHEN VAR_FIELD_NAME LIKE '%.%' THEN '.additional_' ELSE '[additional_' END),
					'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), 'ADD'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' - Additional') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				NULL AS PICKLIST_NAME_ID,
				NULL AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, CASE WHEN VAR_FIELD_NAME LIKE '%.%' THEN '.' ELSE '[' END, CASE WHEN VAR_FIELD_NAME LIKE '%.%' THEN '.additional_' ELSE '[additional_' END), 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${CUSTOM_FIELD}.FIELD_VALUE' AS SOURCE_COLUMN_NAME,
				NULL AS CONSTITUENT_JOIN_FIELD;
        ELSEIF VAR_FIELD_TYPE = 'MULTI_QUERY_LOOKUP' AND VAR_REFERENCE_TYPE = 'constituent' THEN
            
            INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNUMBERS'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNUMBERS'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMRELATIONSHIPACCOUNTNUMBERSCONCATENATED(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCTNBRS'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' - ', 'Account Numbers') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				NULL AS PICKLIST_NAME_ID,
				NULL AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${CONSTITUENT_TABLE}.ACCOUNT_NUMBER' AS SOURCE_COLUMN_NAME,
				'${CUSTOM_FIELD}.FIELD_NUMERIC_VALUE' AS CONSTITUENT_JOIN_FIELD;
            
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNAMES'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNAMES'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMRELATIONSHIPNAMESCONCATENATED(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCTNAMES'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' - ', 'Account Names') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				NULL AS PICKLIST_NAME_ID,
				NULL AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'CASE WHEN ${CONSTITUENT_TABLE}.CONSTITUENT_TYPE = ''individual'' THEN CONCAT_WS('', '', ${CONSTITUENT_TABLE}.LAST_NAME, ${CONSTITUENT_TABLE}.FIRST_NAME) WHEN ${CONSTITUENT_TABLE}.CONSTITUENT_TYPE = ''organization'' THEN ${CONSTITUENT_TABLE}.ORGANIZATION_NAME ELSE ${CONSTITUENT_TABLE}.CONSTITUENT_ID END' AS SOURCE_COLUMN_NAME,
				'${CUSTOM_FIELD}.FIELD_NUMERIC_VALUE' AS CONSTITUENT_JOIN_FIELD;
        ELSEIF VAR_FIELD_TYPE = 'QUERY_LOOKUP' AND VAR_REFERENCE_TYPE = 'constituent' THEN
            
            INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNUMBER'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNUMBER'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCONSTITUENTACCOUNTNUMBER(GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '''))') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCTNBR'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' - ', 'Account Number') AS DISPLAY_TEXT,
				2 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				NULL AS PICKLIST_NAME_ID,
				NULL AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${CONSTITUENT_TABLE}.ACCOUNT_NUMBER' AS SOURCE_COLUMN_NAME,
				'${CUSTOM_FIELD}.FIELD_NUMERIC_VALUE' AS CONSTITUENT_JOIN_FIELD;
            
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNAME'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNAME'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETCONSTITUENTDISPLAYNAME(GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '''))') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCTNAME'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' - ', 'Account Name') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				NULL AS PICKLIST_NAME_ID,
				NULL AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'CASE WHEN ${CONSTITUENT_TABLE}.CONSTITUENT_TYPE = ''individual'' THEN CONCAT_WS('', '', ${CONSTITUENT_TABLE}.LAST_NAME, ${CONSTITUENT_TABLE}.FIRST_NAME) WHEN ${CONSTITUENT_TABLE}.CONSTITUENT_TYPE = ''organization'' THEN ${CONSTITUENT_TABLE}.ORGANIZATION_NAME ELSE ${CONSTITUENT_TABLE}.CONSTITUENT_ID END' AS SOURCE_COLUMN_NAME,
				'${CUSTOM_FIELD}.FIELD_NUMERIC_VALUE' AS CONSTITUENT_JOIN_FIELD;
        ELSEIF VAR_FIELD_TYPE = 'QUERY_LOOKUP_DISPLAY' AND VAR_REFERENCE_TYPE = 'constituent' THEN
            
            INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNUMBER'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNUMBER'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETCONSTITUENTACCOUNTNUMBER(GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '''))') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCTNBR'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' - ', 'Account Number') AS DISPLAY_TEXT,
				2 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				NULL AS PICKLIST_NAME_ID,
				NULL AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${CONSTITUENT_TABLE}.ACCOUNT_NUMBER' AS SOURCE_COLUMN_NAME,
				'${CUSTOM_FIELD}.FIELD_NUMERIC_VALUE' AS CONSTITUENT_JOIN_FIELD;
            
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNAME'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNAME'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCONSTITUENTDISPLAYNAME(GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '''))') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCTNAME'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' - ', 'Account Name') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				NULL AS PICKLIST_NAME_ID,
				NULL AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'CASE WHEN ${CONSTITUENT_TABLE}.CONSTITUENT_TYPE = ''individual'' THEN CONCAT_WS('', '', ${CONSTITUENT_TABLE}.LAST_NAME, ${CONSTITUENT_TABLE}.FIRST_NAME) WHEN ${CONSTITUENT_TABLE}.CONSTITUENT_TYPE = ''organization'' THEN ${CONSTITUENT_TABLE}.ORGANIZATION_NAME ELSE ${CONSTITUENT_TABLE}.CONSTITUENT_ID END' AS SOURCE_COLUMN_NAME,
				'${CUSTOM_FIELD}.FIELD_NUMERIC_VALUE' AS CONSTITUENT_JOIN_FIELD;
        ELSEIF VAR_FIELD_TYPE = 'QUERY_LOOKUP_OTHER' AND VAR_REFERENCE_TYPE = 'constituent' THEN
            
            INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNUMBER'), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCOUNTNUMBER'), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCONSTITUENTACCOUNTNUMBER(GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '''))') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), ''), '_ACCTNBR'), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' - ', 'Account Number') AS DISPLAY_TEXT,
				2 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				NULL AS PICKLIST_NAME_ID,
				NULL AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'${CONSTITUENT_TABLE}.ACCOUNT_NUMBER' AS SOURCE_COLUMN_NAME,
				'${CUSTOM_FIELD}.FIELD_NUMERIC_VALUE' AS CONSTITUENT_JOIN_FIELD;
            
            INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                    CASE
                        WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64)) IS NOT NULL THEN
                              (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                              WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64))
                        WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
                        ELSE IFNULL(VAR_SECTION_LABEL, '')
                    END) AS FIELD_GROUP,
				CONCAT('GETCONSTITUENTQUERYLOOKUPOTHER(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64) AS ALIAS_NAME,
				CONCAT(VAR_FIELD_LABEL, ' - ', 'Account Name') AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				NULL AS PICKLIST_NAME_ID,
				NULL AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				CONCAT(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ' ${OR} ',
					CASE WHEN REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') LIKE '%.%' THEN REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '.other_') ELSE CONCAT('other_', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '')) END)
				AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				'IFNULL(CASE WHEN ${CONSTITUENT_TABLE}.CONSTITUENT_TYPE = ''individual'' THEN CONCAT_WS('', '', ${CONSTITUENT_TABLE}.LAST_NAME, ${CONSTITUENT_TABLE}.FIRST_NAME) WHEN ${CONSTITUENT_TABLE}.CONSTITUENT_TYPE = ''organization'' THEN ${CONSTITUENT_TABLE}.ORGANIZATION_NAME ELSE ${CONSTITUENT_TABLE}.CONSTITUENT_ID END, ${CUSTOM_FIELD}.FIELD_VALUE)' AS SOURCE_COLUMN_NAME,
				'${CUSTOM_FIELD}.FIELD_NUMERIC_VALUE' AS CONSTITUENT_JOIN_FIELD;

		ELSEIF VAR_FIELD_TYPE = 'CUSTOM_TABLE_REFERENCE' THEN
		-- TODO - Find a better way to pull the custom table title fields and remove the function
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
					CASE
						WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
							  WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64)) IS NOT NULL THEN
							  (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
							  WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64))
						WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
						ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMTABLETITLEFIELDVALUES(''', VAR_REFERENCE_TYPE, ''', GETCUSTOMFIELD(',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '''))') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64) AS ALIAS_NAME,
				VAR_FIELD_LABEL AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				NULL AS PICKLIST_NAME_ID,
				NULL AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				CONCAT('GETCUSTOMTABLETITLEFIELDVALUES(''', VAR_REFERENCE_TYPE, ''', GETCUSTOMFIELD(',
					CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
					(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
						WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
						AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
						', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '''))') AS SOURCE_COLUMN_NAME,
				NULL AS CONSTITUENT_JOIN_FIELD;
		ELSEIF VAR_FIELD_TYPE = 'MULTI_CUSTOM_TABLE_REFERENCE' THEN
			INSERT THEGURU_FIELD_DEFINITIONS
				(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
					PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD)
			SELECT
				VIEWNAME,
				CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
					CASE
						WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
							  WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64)) IS NOT NULL THEN
							  (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
							  WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64))
						WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
						WHEN VAR_SECTION_LABEL = 'Record Information' THEN IFNULL((SELECT CASE WHEN SECTION_LABEL LIKE 'Edit %' THEN CONCAT(REPLACE(SECTION_LABEL, 'Edit ', ''), ' Information') ELSE SECTION_LABEL END FROM TEMP_OL_FIELD_DEFINITIONS B WHERE B.PAGE_TYPE = VAR_PAGE_TYPE ORDER BY SECTION_ORDER LIMIT 1), VAR_SECTION_LABEL)
						ELSE IFNULL(VAR_SECTION_LABEL, '') END) AS FIELD_GROUP,
				CONCAT('GETCUSTOMTABLETITLEFIELDVALUESCONCATENATED(''', VAR_REFERENCE_TYPE, ''', ',
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS COLUMN_NAME,
				SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(UPPER(REPLACE(REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), '.', '_')), '')), 1, 64) AS ALIAS_NAME,
				VAR_FIELD_LABEL AS DISPLAY_TEXT,
				1 AS FIELD_TYPE,
				CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
				NULL AS PICKLIST_NAME_ID,
				NULL AS PICKLIST_ITEM_NAME,
				GET_ENTITY_TYPE_FOR_TABLE(TABLENAME) AS CUSTOM_FIELD_ENTITY_TYPE,
				(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS CUSTOM_FIELD_ENTITY_ID,
				REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', '') AS CUSTOM_FIELD_FIELD_NAME,
				IFNULL(JOINID, 0) AS JOIN_ID,
				CONCAT('GETCUSTOMTABLETITLEFIELDVALUESCONCATENATED(''', VAR_REFERENCE_TYPE, ''', ',
					(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
					WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
					AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI'),
					', ''', GET_ENTITY_TYPE_FOR_TABLE(TABLENAME), ''', ''', REPLACE(REPLACE(VAR_FIELD_NAME, 'customFieldMap[', ''), ']', ''), ''')') AS SOURCE_COLUMN_NAME,
				NULL AS CONSTITUENT_JOIN_FIELD;	
        END IF;
	END LOOP;
    SET CSR_END = 0;
    
	OPEN CSR_ADDITIONAL_FIELD_DEFINITIONS;
	ADDITIONAL_FIELD_DEFINITIONS_LOOP: LOOP
		FETCH CSR_ADDITIONAL_FIELD_DEFINITIONS INTO
            VAR_FIELD_GROUP, VAR_DISPLAY_NAME, VAR_ADDITIONAL_DEF_COLUMN_NAME, VAR_ALIAS_NAME, VAR_ADDITIONAL_DEF_FIELD_TYPE,
			VAR_PICKLIST_NAME_ID, VAR_PICKLIST_ITEM_NAME, VAR_CUSTOM_FIELD_ENTITY_TYPE,
			VAR_CUSTOM_FIELD_ENTITY_ID, VAR_CUSTOM_FIELD_FIELD_NAME, VAR_SOURCE_COLUMN_NAME, VAR_CONSTITUENT_JOIN_FIELD, VAR_PICKLIST_CUSTOM_FIELD;
		IF CSR_END THEN
			LEAVE ADDITIONAL_FIELD_DEFINITIONS_LOOP;
		END IF;
		
		INSERT THEGURU_FIELD_DEFINITIONS
			(VIEW_NAME, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY, DYNAMIC_PRIMARY_KEY,
			PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME,
			JOIN_ID, SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD, PICKLIST_CUSTOM_FIELD)
		SELECT
			VIEWNAME,
			CONCAT(IFNULL(FIELDGROUPPREFIX, ''),
                CASE
                    WHEN (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                          WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_ALIAS_NAME, '')), 1, 64)) IS NOT NULL THEN
                          (SELECT FIELD_GROUP_OVERRIDE FROM THEGURU_FIELD_FIELDGROUP_OVERRIDE
                          WHERE ALIAS_NAME = SUBSTR(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_ALIAS_NAME, '')), 1, 64))
                    WHEN LENGTH(IFNULL(FIELDGROUPOVERRIDE, '')) > 0 THEN FIELDGROUPOVERRIDE
                    ELSE IFNULL(VAR_FIELD_GROUP,'')
                END),
            CONCAT(REPLACE(VAR_ADDITIONAL_DEF_COLUMN_NAME, '${COLUMN_PREFIX}', IFNULL(TABLECOLUMNPREFIX, ''))),
			SUBSTRING(CONCAT(IFNULL(TABLECOLUMNPREFIX, ''), IFNULL(VAR_ALIAS_NAME, '')), 1, 64) AS ALIAS_NAME,
			VAR_DISPLAY_NAME,
            VAR_ADDITIONAL_DEF_FIELD_TYPE,
			CONCAT(IFNULL(TABLECOLUMNPREFIX, ''),
			(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
				WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
				AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI')) AS PRIMARY_KEY,
			(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
                        WHERE TABLE_SCHEMA = REPLACE(DATABASE(), 'theguru', '')
                        AND TABLE_NAME = TABLENAME AND COLUMN_KEY = 'PRI') AS DYNAMIC_PRIMARY_KEY,
			REPLACE(VAR_PICKLIST_NAME_ID, '${COLUMN_PREFIX}', CONCAT('${', TABLENAME, '}.')) AS PICKLIST_NAME_ID,
			REPLACE(VAR_PICKLIST_ITEM_NAME, '${COLUMN_PREFIX}', CONCAT('${', TABLENAME, '}.')) AS PICKLIST_ITEM_NAME,
			REPLACE(VAR_CUSTOM_FIELD_ENTITY_TYPE, '${COLUMN_PREFIX}', CONCAT('${', TABLENAME, '}.')) AS CUSTOM_FIELD_ENTITY_TYPE,
			REPLACE(VAR_CUSTOM_FIELD_ENTITY_ID, '${COLUMN_PREFIX}', CONCAT('${', TABLENAME, '}.')) AS CUSTOM_FIELD_ENTITY_ID,
			REPLACE(VAR_CUSTOM_FIELD_FIELD_NAME, '${COLUMN_PREFIX}', CONCAT('${', TABLENAME, '}.')) AS CUSTOM_FIELD_FIELD_NAME,
			IFNULL(JOINID, 0) AS JOIN_ID,
			REPLACE(VAR_SOURCE_COLUMN_NAME, '${COLUMN_PREFIX}', CONCAT('${', TABLENAME, '}.')) AS SOURCE_COLUMN_NAME,
			REPLACE(VAR_CONSTITUENT_JOIN_FIELD, '${COLUMN_PREFIX}', CONCAT('${', TABLENAME, '}.')) AS CONSTITUENT_JOIN_FIELD,
			VAR_PICKLIST_CUSTOM_FIELD AS PICKLIST_CUSTOM_FIELD;
			
	END LOOP;
	SET CSR_END = 0;
	CLOSE CSR_ADDITIONAL_FIELD_DEFINITIONS;
END;$$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$


--
-- Definition of function `UPDATE_REPORTFIELD_FIELD_DEFINITIONS`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `UPDATE_REPORTFIELD_FIELD_DEFINITIONS`()
BEGIN
  DROP TABLE IF EXISTS THEGURU_FIELD_DEFINITIONS_COMPARISON;

  CREATE TABLE THEGURU_FIELD_DEFINITIONS_COMPARISON
  SELECT
    CAST(REPORTDATASUBSOURCE.VIEW_NAME AS CHAR(255)) AS VIEW_NAME,
    REPORTFIELDGROUP.NAME AS FIELD_GROUP,
    REPORTFIELD.REPORTFIELD_ID,
    REPORTFIELD.COLUMN_NAME,
    REPORTFIELD.ALIAS_NAME,
    REPORTFIELD.DISPLAY_NAME,
    REPORTFIELD.FIELD_TYPE,
    REPORTFIELD.PRIMARY_KEYS,
    REPORTFIELD.PICKLIST_NAME_ID,
    REPORTFIELD.PICKLIST_ITEM_NAME,
    REPORTFIELD.CUSTOM_FIELD_ENTITY_TYPE,
	REPORTFIELD.CUSTOM_FIELD_ENTITY_ID,
    REPORTFIELD.CUSTOM_FIELD_FIELD_NAME,
    REPORTFIELD.JOIN_ID,
    REPORTFIELD.SOURCE_COLUMN_NAME,
	REPORTFIELD.CONSTITUENT_JOIN_FIELD,
    REPORTFIELD.DYNAMIC_PRIMARY_KEYS,
	REPORTFIELD.PICKLIST_CUSTOM_FIELD
  FROM REPORTDATASUBSOURCE
  JOIN REPORTFIELDGROUP_REPORTDATASUBSOURCE ON reportDataSubSource_REPORTSUBSOURCE_ID = REPORTDATASUBSOURCE.REPORTSUBSOURCE_ID
  JOIN REPORTFIELDGROUP ON REPORTFIELDGROUP_REPORTFIELDGROUP_ID = REPORTFIELDGROUP.REPORTFIELDGROUP_ID
  JOIN REPORTFIELD_REPORTFIELDGROUP ON REPORTFIELD_REPORTFIELDGROUP.reportFieldGroup_REPORTFIELDGROUP_ID = REPORTFIELDGROUP.REPORTFIELDGROUP_ID
  JOIN REPORTFIELD ON fields_REPORTFIELD_ID = REPORTFIELD.REPORTFIELD_ID
  WHERE REPORTDATASUBSOURCE.VIEW_NAME IN (SELECT VIEW_NAME FROM THEGURU_FIELD_DEFINITIONS)
  ORDER BY REPORTFIELDGROUP.NAME, REPORTFIELD.DISPLAY_NAME;

  ALTER TABLE THEGURU_FIELD_DEFINITIONS_COMPARISON ADD NEW_ALIAS_NAME VARCHAR(255);

  ALTER TABLE THEGURU_FIELD_DEFINITIONS_COMPARISON ADD TO_BE_DELETED BIT;
  
  ALTER TABLE THEGURU_FIELD_DEFINITIONS_COMPARISON MODIFY REPORTFIELD_ID BIGINT NULL;

  ALTER TABLE THEGURU_FIELD_DEFINITIONS_COMPARISON ADD COLUMN THEGURU_FIELD_DEFINITIONS_COMPARISON_ID INT NOT NULL AUTO_INCREMENT,
  ADD PRIMARY KEY (THEGURU_FIELD_DEFINITIONS_COMPARISON_ID);

  CREATE INDEX IDX_THEGURU_FIELD_DEFINITIONS_COMPARISON_NEW_ALIAS_NAME ON THEGURU_FIELD_DEFINITIONS_COMPARISON(REPORTFIELD_ID);
  CREATE INDEX IDX_THEGURU_FIELD_DEFINITIONS_COMPARISON_SEARCH_VIEW_NAME ON THEGURU_FIELD_DEFINITIONS_COMPARISON (VIEW_NAME);
  CREATE INDEX IDX_THEGURU_FIELD_DEFINITIONS_COMPARISON_SEARCH_ALIAS_NAME ON THEGURU_FIELD_DEFINITIONS_COMPARISON (ALIAS_NAME);

  -- Remove any extra exclusions based on view name
	DELETE FROM THEGURU_FIELD_DEFINITIONS
	WHERE EXISTS
	(SELECT * FROM THEGURU_TABLE_FIELD_EXCLUSIONS
	WHERE THEGURU_TABLE_FIELD_EXCLUSIONS.TABLE_NAME = THEGURU_FIELD_DEFINITIONS.VIEW_NAME
	AND THEGURU_TABLE_FIELD_EXCLUSIONS.FIELD_NAME = THEGURU_FIELD_DEFINITIONS.ALIAS_NAME);

  CALL UPDATE_THEGURU_FIELD_DEFINITIONS_COMPARISON();
  CALL UPDATE_REPORTFIELD_FROM_THEGURU_FIELD_DEFINITIONS_COMPARISON();

	DROP TABLE IF EXISTS THEGURU_FIELD_DEFINITIONS_COMPARISON;
END;$$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$


--
-- Definition of function `UPDATE_THEGURU_FIELD_DEFINITIONS_COMPARISON`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `UPDATE_THEGURU_FIELD_DEFINITIONS_COMPARISON`()
BEGIN
	DECLARE CSR_END INT DEFAULT 0;

    -- THEGURU_FIELD_DEFINITIONS Variables
    DECLARE VAR_FIELD_ID INT;
    DECLARE VAR_VIEW_NAME VARCHAR(255);
    DECLARE VAR_FIELD_GROUP VARCHAR(255);
    DECLARE VAR_COLUMN_NAME VARCHAR(500);
    DECLARE VAR_ALIAS_NAME VARCHAR(255);
    DECLARE VAR_DISPLAY_TEXT VARCHAR(255);
    DECLARE VAR_FIELD_TYPE INT;
    DECLARE VAR_PRIMARY_KEY VARCHAR(255);
    DECLARE VAR_PICKLIST_NAME_ID VARCHAR(255);
    DECLARE VAR_PICKLIST_ITEM_NAME VARCHAR(255);
    DECLARE VAR_CUSTOM_FIELD_ENTITY_TYPE VARCHAR(255);
	DECLARE VAR_CUSTOM_FIELD_ENTITY_ID VARCHAR(255);
    DECLARE VAR_CUSTOM_FIELD_FIELD_NAME VARCHAR(255);
    DECLARE VAR_JOIN_ID BIGINT;
    DECLARE VAR_SOURCE_COLUMN_NAME VARCHAR(2000);
	DECLARE VAR_CONSTITUENT_JOIN_FIELD VARCHAR(255);
	DECLARE VAR_DYNAMIC_PRIMARY_KEY VARCHAR(255);
	DECLARE VAR_PICKLIST_CUSTOM_FIELD BIT;

	DECLARE CSR_VIEWS CURSOR FOR
        SELECT DISTINCT VIEW_NAME FROM THEGURU_FIELD_DEFINITIONS;

	DECLARE CSR_FIELDS CURSOR FOR
        SELECT FIELD_ID, FIELD_GROUP, COLUMN_NAME, ALIAS_NAME, DISPLAY_TEXT, FIELD_TYPE, PRIMARY_KEY,
        PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME,
		CONSTITUENT_JOIN_FIELD, DYNAMIC_PRIMARY_KEY, PICKLIST_CUSTOM_FIELD
        FROM THEGURU_FIELD_DEFINITIONS
        WHERE VIEW_NAME = VAR_VIEW_NAME;

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET CSR_END = 1;


    -- Update the alias names for fields where the column name matches, but the alias is different
    -- This will handle some instances where the generated alias name is different than the original, but the field is the same
    UPDATE THEGURU_FIELD_DEFINITIONS_COMPARISON, THEGURU_FIELD_DEFINITIONS
    SET THEGURU_FIELD_DEFINITIONS_COMPARISON.NEW_ALIAS_NAME = THEGURU_FIELD_DEFINITIONS.ALIAS_NAME
    WHERE THEGURU_FIELD_DEFINITIONS.COLUMN_NAME = THEGURU_FIELD_DEFINITIONS_COMPARISON.COLUMN_NAME
    AND THEGURU_FIELD_DEFINITIONS.VIEW_NAME = THEGURU_FIELD_DEFINITIONS_COMPARISON.VIEW_NAME
    AND THEGURU_FIELD_DEFINITIONS.ALIAS_NAME <> THEGURU_FIELD_DEFINITIONS_COMPARISON.ALIAS_NAME
    AND THEGURU_FIELD_DEFINITIONS.ALIAS_NAME IS NOT NULL;

    UPDATE REPORTFIELD
    SET ALIAS_NAME = (SELECT NEW_ALIAS_NAME FROM THEGURU_FIELD_DEFINITIONS_COMPARISON WHERE REPORTFIELD.REPORTFIELD_ID = THEGURU_FIELD_DEFINITIONS_COMPARISON.REPORTFIELD_ID)
    WHERE REPORTFIELD_ID IN (SELECT REPORTFIELD_ID FROM THEGURU_FIELD_DEFINITIONS_COMPARISON WHERE NEW_ALIAS_NAME IS NOT NULL);

    UPDATE THEGURU_FIELD_DEFINITIONS_COMPARISON
    SET ALIAS_NAME = NEW_ALIAS_NAME
    WHERE NEW_ALIAS_NAME IS NOT NULL;


	OPEN CSR_VIEWS;
	VIEWS_LOOP: LOOP
		FETCH CSR_VIEWS INTO
			VAR_VIEW_NAME;

		IF CSR_END THEN
			LEAVE VIEWS_LOOP;
		END IF;

        -- Mark all the fields as to be deleted for this view and the process will reset the flag as it updates each field
        -- Those that don't get updated were not in the generated fields and should be deleted
        UPDATE THEGURU_FIELD_DEFINITIONS_COMPARISON
        SET TO_BE_DELETED = 1
        WHERE VIEW_NAME = VAR_VIEW_NAME;

        OPEN CSR_FIELDS;
        FIELDS_LOOP: LOOP
            FETCH CSR_FIELDS INTO
                VAR_FIELD_ID, VAR_FIELD_GROUP, VAR_COLUMN_NAME, VAR_ALIAS_NAME, VAR_DISPLAY_TEXT, VAR_FIELD_TYPE, VAR_PRIMARY_KEY,
                VAR_PICKLIST_NAME_ID, VAR_PICKLIST_ITEM_NAME, VAR_CUSTOM_FIELD_ENTITY_TYPE, VAR_CUSTOM_FIELD_ENTITY_ID, VAR_CUSTOM_FIELD_FIELD_NAME, VAR_JOIN_ID,
                VAR_SOURCE_COLUMN_NAME, VAR_CONSTITUENT_JOIN_FIELD, VAR_DYNAMIC_PRIMARY_KEY, VAR_PICKLIST_CUSTOM_FIELD;

            IF CSR_END THEN
                LEAVE FIELDS_LOOP;
            END IF;

            -- If the field exists in the comparison table based on the alias name, update it, if not, add it.
            IF EXISTS
            (SELECT * FROM THEGURU_FIELD_DEFINITIONS_COMPARISON
            WHERE VIEW_NAME = VAR_VIEW_NAME
            AND ALIAS_NAME = VAR_ALIAS_NAME) THEN
                UPDATE THEGURU_FIELD_DEFINITIONS_COMPARISON
                SET FIELD_GROUP = VAR_FIELD_GROUP,
                COLUMN_NAME = VAR_COLUMN_NAME,
                ALIAS_NAME = VAR_ALIAS_NAME,
                DISPLAY_NAME = VAR_DISPLAY_TEXT,
                FIELD_TYPE = VAR_FIELD_TYPE,
                PRIMARY_KEYS = VAR_PRIMARY_KEY,
                TO_BE_DELETED = 0,
                PICKLIST_NAME_ID = VAR_PICKLIST_NAME_ID,
                PICKLIST_ITEM_NAME = VAR_PICKLIST_ITEM_NAME,
                CUSTOM_FIELD_ENTITY_TYPE = VAR_CUSTOM_FIELD_ENTITY_TYPE,
				CUSTOM_FIELD_ENTITY_ID = VAR_CUSTOM_FIELD_ENTITY_ID,
                CUSTOM_FIELD_FIELD_NAME = VAR_CUSTOM_FIELD_FIELD_NAME,
                JOIN_ID = VAR_JOIN_ID,
                SOURCE_COLUMN_NAME = VAR_SOURCE_COLUMN_NAME,
				CONSTITUENT_JOIN_FIELD = VAR_CONSTITUENT_JOIN_FIELD,
				DYNAMIC_PRIMARY_KEYS = VAR_DYNAMIC_PRIMARY_KEY,
				PICKLIST_CUSTOM_FIELD = VAR_PICKLIST_CUSTOM_FIELD
                WHERE VIEW_NAME = VAR_VIEW_NAME
                AND ALIAS_NAME = VAR_ALIAS_NAME;
            ELSE
                INSERT THEGURU_FIELD_DEFINITIONS_COMPARISON
                    (VIEW_NAME, FIELD_GROUP, REPORTFIELD_ID, COLUMN_NAME, ALIAS_NAME, DISPLAY_NAME, FIELD_TYPE, PRIMARY_KEYS, TO_BE_DELETED,
                    PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID,
					SOURCE_COLUMN_NAME, CONSTITUENT_JOIN_FIELD, DYNAMIC_PRIMARY_KEYS, PICKLIST_CUSTOM_FIELD)
                SELECT
                    VAR_VIEW_NAME, VAR_FIELD_GROUP, NULL, VAR_COLUMN_NAME, VAR_ALIAS_NAME, VAR_DISPLAY_TEXT, VAR_FIELD_TYPE, VAR_PRIMARY_KEY, 0,
                    VAR_PICKLIST_NAME_ID, VAR_PICKLIST_ITEM_NAME, VAR_CUSTOM_FIELD_ENTITY_TYPE, VAR_CUSTOM_FIELD_ENTITY_ID, VAR_CUSTOM_FIELD_FIELD_NAME, VAR_JOIN_ID, 
                    VAR_SOURCE_COLUMN_NAME, VAR_CONSTITUENT_JOIN_FIELD, VAR_DYNAMIC_PRIMARY_KEY, VAR_PICKLIST_CUSTOM_FIELD;
            END IF;
        END LOOP;
        CLOSE CSR_FIELDS;
        SET CSR_END = 0;

	END LOOP;
	CLOSE CSR_VIEWS;
	SET CSR_END = 0;
END;$$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$


--
-- Definition of function `UPDATE_REPORTFIELD_FROM_THEGURU_FIELD_DEFINITIONS_COMPARISON`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `UPDATE_REPORTFIELD_FROM_THEGURU_FIELD_DEFINITIONS_COMPARISON`()
BEGIN
	DECLARE CSR_END INT DEFAULT 0;

  DECLARE VAR_REPORTSUBSOURCE_ID BIGINT;
  DECLARE VAR_FIELD_GROUP VARCHAR(255);
  DECLARE VAR_REPORTFIELDGROUP_ID BIGINT;

  DECLARE VAR_PRIMARY_KEYS VARCHAR(255);
  DECLARE VAR_ALIAS_NAME VARCHAR(255);
  DECLARE VAR_COLUMN_NAME VARCHAR(500);
  DECLARE VAR_DISPLAY_NAME VARCHAR(255);
  DECLARE VAR_FIELD_TYPE INT;
  DECLARE VAR_PICKLIST_NAME_ID VARCHAR(255);
  DECLARE VAR_PICKLIST_ITEM_NAME VARCHAR(255);
  DECLARE VAR_CUSTOM_FIELD_ENTITY_TYPE VARCHAR(255);
  DECLARE VAR_CUSTOM_FIELD_ENTITY_ID VARCHAR(255);
  DECLARE VAR_CUSTOM_FIELD_FIELD_NAME VARCHAR(255);
  DECLARE VAR_JOIN_ID BIGINT;
  DECLARE VAR_SOURCE_COLUMN_NAME VARCHAR(2000);
  DECLARE VAR_CONSTITUENT_JOIN_FIELD VARCHAR(255);
  DECLARE VAR_THEGURU_FIELD_DEFINITIONS_COMPARISON_ID INT;
  DECLARE VAR_LAST_INSERT_ID INT;    
  DECLARE VAR_DYNAMIC_PRIMARY_KEYS VARCHAR(255);
  DECLARE VAR_PICKLIST_CUSTOM_FIELD BIT;

  -- Add new field groups - Declare cursor
	DECLARE CSR_NEW_FIELD_GROUPS CURSOR FOR
    SELECT DISTINCT REPORTDATASUBSOURCE.REPORTSUBSOURCE_ID, THEGURU_FIELD_DEFINITIONS_COMPARISON.FIELD_GROUP FROM THEGURU_FIELD_DEFINITIONS_COMPARISON
    JOIN REPORTDATASUBSOURCE ON REPORTDATASUBSOURCE.VIEW_NAME = THEGURU_FIELD_DEFINITIONS_COMPARISON.VIEW_NAME
    WHERE NOT EXISTS
      (SELECT * FROM REPORTFIELDGROUP_REPORTDATASUBSOURCE
      JOIN REPORTFIELDGROUP ON REPORTFIELDGROUP_REPORTDATASUBSOURCE.REPORTFIELDGROUP_REPORTFIELDGROUP_ID = REPORTFIELDGROUP.REPORTFIELDGROUP_ID
      WHERE REPORTFIELDGROUP_REPORTDATASUBSOURCE.reportDataSubSource_REPORTSUBSOURCE_ID = REPORTDATASUBSOURCE.REPORTSUBSOURCE_ID
      AND REPORTFIELDGROUP.NAME = THEGURU_FIELD_DEFINITIONS_COMPARISON.FIELD_GROUP);


  -- Add new fields - Declare cursor
  DECLARE CSR_NEW_FIELDS CURSOR FOR
    SELECT
      THEGURU_FIELD_DEFINITIONS_COMPARISON_ID, PRIMARY_KEYS, ALIAS_NAME, COLUMN_NAME, THEGURU_FIELD_DEFINITIONS_COMPARISON.DISPLAY_NAME, FIELD_TYPE, REPORTFIELDGROUP.REPORTFIELDGROUP_ID,
      PICKLIST_NAME_ID, PICKLIST_ITEM_NAME, CUSTOM_FIELD_ENTITY_TYPE, CUSTOM_FIELD_ENTITY_ID, CUSTOM_FIELD_FIELD_NAME, JOIN_ID, SOURCE_COLUMN_NAME, 
	  CONSTITUENT_JOIN_FIELD, DYNAMIC_PRIMARY_KEYS, PICKLIST_CUSTOM_FIELD
    FROM THEGURU_FIELD_DEFINITIONS_COMPARISON
    JOIN REPORTDATASUBSOURCE ON REPORTDATASUBSOURCE.VIEW_NAME = THEGURU_FIELD_DEFINITIONS_COMPARISON.VIEW_NAME
    JOIN REPORTFIELDGROUP_REPORTDATASUBSOURCE ON REPORTFIELDGROUP_REPORTDATASUBSOURCE.reportDataSubSource_REPORTSUBSOURCE_ID = REPORTDATASUBSOURCE.REPORTSUBSOURCE_ID
    JOIN REPORTFIELDGROUP ON REPORTFIELDGROUP_REPORTDATASUBSOURCE.REPORTFIELDGROUP_REPORTFIELDGROUP_ID = REPORTFIELDGROUP.REPORTFIELDGROUP_ID
    WHERE IFNULL(REPORTFIELD_ID, 0) = 0
    AND REPORTFIELDGROUP.NAME = THEGURU_FIELD_DEFINITIONS_COMPARISON.FIELD_GROUP
    ORDER BY THEGURU_FIELD_DEFINITIONS_COMPARISON.FIELD_GROUP, THEGURU_FIELD_DEFINITIONS_COMPARISON.DISPLAY_NAME;

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET CSR_END = 1;

  -- Add new field groups
	OPEN CSR_NEW_FIELD_GROUPS;
	NEW_FIELD_GROUPS_LOOP: LOOP
		FETCH CSR_NEW_FIELD_GROUPS INTO
			VAR_REPORTSUBSOURCE_ID, VAR_FIELD_GROUP;

		IF CSR_END THEN
			LEAVE NEW_FIELD_GROUPS_LOOP;
		END IF;

    CALL INSERTREPORTFIELDGROUP(VAR_FIELD_GROUP, VAR_REPORTSUBSOURCE_ID, VAR_REPORTFIELDGROUP_ID);
	END LOOP;
	CLOSE CSR_NEW_FIELD_GROUPS;
  
	SET CSR_END = 0;
  SET VAR_REPORTFIELDGROUP_ID = NULL;

  -- Add new fields
  OPEN CSR_NEW_FIELDS;
  NEW_FIELDS_LOOP: LOOP
    FETCH CSR_NEW_FIELDS INTO
      VAR_THEGURU_FIELD_DEFINITIONS_COMPARISON_ID, VAR_PRIMARY_KEYS, VAR_ALIAS_NAME, VAR_COLUMN_NAME, VAR_DISPLAY_NAME, VAR_FIELD_TYPE, VAR_REPORTFIELDGROUP_ID,
      VAR_PICKLIST_NAME_ID, VAR_PICKLIST_ITEM_NAME, VAR_CUSTOM_FIELD_ENTITY_TYPE, VAR_CUSTOM_FIELD_ENTITY_ID, VAR_CUSTOM_FIELD_FIELD_NAME, VAR_JOIN_ID,
	  VAR_SOURCE_COLUMN_NAME, VAR_CONSTITUENT_JOIN_FIELD, VAR_DYNAMIC_PRIMARY_KEYS, VAR_PICKLIST_CUSTOM_FIELD;

 	  IF CSR_END THEN
 			LEAVE NEW_FIELDS_LOOP;
	  END IF;

    CALL INSERTREPORTFIELDWITHALIAS(VAR_PRIMARY_KEYS, VAR_ALIAS_NAME, VAR_COLUMN_NAME, VAR_DISPLAY_NAME, b'0', VAR_FIELD_TYPE, VAR_REPORTFIELDGROUP_ID,
      VAR_PICKLIST_NAME_ID, VAR_SOURCE_COLUMN_NAME, VAR_PICKLIST_ITEM_NAME, VAR_CUSTOM_FIELD_ENTITY_TYPE, VAR_CUSTOM_FIELD_ENTITY_ID, VAR_CUSTOM_FIELD_FIELD_NAME,
	  VAR_CONSTITUENT_JOIN_FIELD, VAR_JOIN_ID, VAR_DYNAMIC_PRIMARY_KEYS, VAR_PICKLIST_CUSTOM_FIELD);

    SET VAR_LAST_INSERT_ID = LAST_INSERT_ID();

    UPDATE THEGURU_FIELD_DEFINITIONS_COMPARISON
    SET REPORTFIELD_ID = VAR_LAST_INSERT_ID
    WHERE THEGURU_FIELD_DEFINITIONS_COMPARISON_ID = VAR_THEGURU_FIELD_DEFINITIONS_COMPARISON_ID;
	END LOOP;
	CLOSE CSR_NEW_FIELDS;
	SET CSR_END = 0;


  -- Update the field groups for fields that have moved
  UPDATE REPORTFIELD_REPORTFIELDGROUP
  SET reportFieldGroup_REPORTFIELDGROUP_ID =
    (SELECT REPORTFIELDGROUP.REPORTFIELDGROUP_ID
    FROM REPORTDATASUBSOURCE
    JOIN REPORTFIELDGROUP_REPORTDATASUBSOURCE ON reportDataSubSource_REPORTSUBSOURCE_ID = REPORTDATASUBSOURCE.REPORTSUBSOURCE_ID
    JOIN REPORTFIELDGROUP ON REPORTFIELDGROUP_REPORTFIELDGROUP_ID = REPORTFIELDGROUP.REPORTFIELDGROUP_ID
    JOIN THEGURU_FIELD_DEFINITIONS_COMPARISON ON REPORTDATASUBSOURCE.VIEW_NAME = THEGURU_FIELD_DEFINITIONS_COMPARISON.VIEW_NAME
    AND REPORTFIELDGROUP.NAME = THEGURU_FIELD_DEFINITIONS_COMPARISON.FIELD_GROUP
    WHERE THEGURU_FIELD_DEFINITIONS_COMPARISON.REPORTFIELD_ID = REPORTFIELD_REPORTFIELDGROUP.fields_REPORTFIELD_ID),
  REPORTFIELDGROUP_ID =
    (SELECT REPORTFIELDGROUP.REPORTFIELDGROUP_ID
    FROM REPORTDATASUBSOURCE
    JOIN REPORTFIELDGROUP_REPORTDATASUBSOURCE ON reportDataSubSource_REPORTSUBSOURCE_ID = REPORTDATASUBSOURCE.REPORTSUBSOURCE_ID
    JOIN REPORTFIELDGROUP ON REPORTFIELDGROUP_REPORTFIELDGROUP_ID = REPORTFIELDGROUP.REPORTFIELDGROUP_ID
    JOIN THEGURU_FIELD_DEFINITIONS_COMPARISON ON REPORTDATASUBSOURCE.VIEW_NAME = THEGURU_FIELD_DEFINITIONS_COMPARISON.VIEW_NAME
    AND REPORTFIELDGROUP.NAME = THEGURU_FIELD_DEFINITIONS_COMPARISON.FIELD_GROUP
    WHERE THEGURU_FIELD_DEFINITIONS_COMPARISON.REPORTFIELD_ID = REPORTFIELD_REPORTFIELDGROUP.fields_REPORTFIELD_ID)
  WHERE fields_REPORTFIELD_ID IN
    (SELECT REPORTFIELD_ID FROM THEGURU_FIELD_DEFINITIONS_COMPARISON
    WHERE THEGURU_FIELD_DEFINITIONS_COMPARISON.FIELD_GROUP <>
    (SELECT Name FROM REPORTFIELDGROUP
    WHERE REPORTFIELDGROUP.REPORTFIELDGROUP_ID = REPORTFIELD_REPORTFIELDGROUP.REPORTFIELDGROUP_REPORTFIELDGROUP_ID));

  -- Update fields that currently exist based on REPORTFIELD_ID
  UPDATE REPORTFIELD, THEGURU_FIELD_DEFINITIONS_COMPARISON
  SET REPORTFIELD.COLUMN_NAME = THEGURU_FIELD_DEFINITIONS_COMPARISON.COLUMN_NAME,
  REPORTFIELD.DISPLAY_NAME = THEGURU_FIELD_DEFINITIONS_COMPARISON.DISPLAY_NAME,
  REPORTFIELD.FIELD_TYPE = THEGURU_FIELD_DEFINITIONS_COMPARISON.FIELD_TYPE,
  REPORTFIELD.ALIAS_NAME = THEGURU_FIELD_DEFINITIONS_COMPARISON.ALIAS_NAME,
  REPORTFIELD.PRIMARY_KEYS = THEGURU_FIELD_DEFINITIONS_COMPARISON.PRIMARY_KEYS,
  REPORTFIELD.PICKLIST_NAME_ID = THEGURU_FIELD_DEFINITIONS_COMPARISON.PICKLIST_NAME_ID,
  REPORTFIELD.PICKLIST_ITEM_NAME = THEGURU_FIELD_DEFINITIONS_COMPARISON.PICKLIST_ITEM_NAME,
  REPORTFIELD.CUSTOM_FIELD_ENTITY_TYPE = THEGURU_FIELD_DEFINITIONS_COMPARISON.CUSTOM_FIELD_ENTITY_TYPE,
  REPORTFIELD.CUSTOM_FIELD_ENTITY_ID = THEGURU_FIELD_DEFINITIONS_COMPARISON.CUSTOM_FIELD_ENTITY_ID,
  REPORTFIELD.CUSTOM_FIELD_FIELD_NAME = THEGURU_FIELD_DEFINITIONS_COMPARISON.CUSTOM_FIELD_FIELD_NAME,
  REPORTFIELD.CONSTITUENT_JOIN_FIELD = THEGURU_FIELD_DEFINITIONS_COMPARISON.CONSTITUENT_JOIN_FIELD,
  REPORTFIELD.JOIN_ID = THEGURU_FIELD_DEFINITIONS_COMPARISON.JOIN_ID,
  REPORTFIELD.SOURCE_COLUMN_NAME = THEGURU_FIELD_DEFINITIONS_COMPARISON.SOURCE_COLUMN_NAME,
  REPORTFIELD.DYNAMIC_PRIMARY_KEYS = THEGURU_FIELD_DEFINITIONS_COMPARISON.DYNAMIC_PRIMARY_KEYS,
  REPORTFIELD.PICKLIST_CUSTOM_FIELD = THEGURU_FIELD_DEFINITIONS_COMPARISON.PICKLIST_CUSTOM_FIELD
  WHERE THEGURU_FIELD_DEFINITIONS_COMPARISON.REPORTFIELD_ID = REPORTFIELD.REPORTFIELD_ID;

  -- Delete fields that do not exist, including from any saved reports
  DELETE FROM REPORTWIZARD_REPORTSELECTEDFIELD
  WHERE reportSelectedFields_REPORTSELECTEDFIELD_ID IN
  (SELECT REPORTSELECTEDFIELD_ID FROM REPORTSELECTEDFIELD
  JOIN THEGURU_FIELD_DEFINITIONS_COMPARISON ON FIELD_ID = REPORTFIELD_ID
  WHERE TO_BE_DELETED = 1);

  DELETE FROM REPORTSELECTEDFIELD
  WHERE FIELD_ID IN
  (SELECT REPORTFIELD_ID FROM THEGURU_FIELD_DEFINITIONS_COMPARISON
  WHERE TO_BE_DELETED = 1);

  DELETE FROM REPORTFIELD_REPORTFIELDGROUP
  WHERE fields_REPORTFIELD_ID IN
  (SELECT REPORTFIELD_ID FROM THEGURU_FIELD_DEFINITIONS_COMPARISON
  WHERE TO_BE_DELETED = 1);

  DELETE FROM REPORTFIELD
  WHERE REPORTFIELD_ID IN
  (SELECT REPORTFIELD_ID FROM THEGURU_FIELD_DEFINITIONS_COMPARISON
  WHERE TO_BE_DELETED = 1);

  DELETE FROM REPORTFIELDGROUP_REPORTDATASUBSOURCE
  WHERE REPORTFIELDGROUP_REPORTFIELDGROUP_ID IN
  (SELECT REPORTFIELDGROUP_ID FROM REPORTFIELDGROUP
  WHERE NOT EXISTS (SELECT * FROM REPORTFIELD_REPORTFIELDGROUP WHERE reportFieldGroup_REPORTFIELDGROUP_ID = REPORTFIELDGROUP.REPORTFIELDGROUP_ID));

  DELETE FROM REPORTFIELDGROUP
  WHERE NOT EXISTS (SELECT * FROM REPORTFIELD_REPORTFIELDGROUP WHERE reportFieldGroup_REPORTFIELDGROUP_ID = REPORTFIELDGROUP.REPORTFIELDGROUP_ID);
END;
$$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$


--
-- Definition of function `GETCUSTOMFIELDLONGDESCRIPTIONCONCATENATED`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `GETCUSTOMFIELDLONGDESCRIPTIONCONCATENATED`(ENTITYID INT, ENTITYTYPE VARCHAR(255), FIELDNAME VARCHAR(255), PICKLISTITEMNAME VARCHAR(255))
	RETURNS VARCHAR(8000) CHARSET utf8
	DETERMINISTIC
BEGIN
	DECLARE FIELDVALUE VARCHAR(8000);

  SELECT GROUP_CONCAT(DISTINCT GETPICKLISTLONGDESCRIPTION(PICKLISTITEMNAME, FIELD_VALUE) SEPARATOR ', ')
  INTO FIELDVALUE
  FROM CUSTOM_FIELD
	WHERE ENTITY_ID = ENTITYID
  AND ENTITY_TYPE = ENTITYTYPE
	AND FIELD_NAME = FIELDNAME
  GROUP BY FIELD_NAME
  ORDER BY GETPICKLISTLONGDESCRIPTION(PICKLISTITEMNAME, FIELD_VALUE);

	RETURN FIELDVALUE;
END$$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$


--
-- Definition of function `GETCUSTOMFIELDPICKLISTDETAILCONCATENATED`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `GETCUSTOMFIELDPICKLISTDETAILCONCATENATED`(ENTITYID INT, ENTITYTYPE VARCHAR(255), FIELDNAME VARCHAR(255), PICKLISTITEMNAME VARCHAR(255))
	RETURNS VARCHAR(8000) CHARSET utf8
	DETERMINISTIC
BEGIN
	DECLARE FIELDVALUE VARCHAR(8000);

	SELECT GROUP_CONCAT(DISTINCT GETPICKLISTDETAIL(PICKLISTITEMNAME, FIELD_VALUE) SEPARATOR ', ')
	INTO FIELDVALUE
	FROM CUSTOM_FIELD
	WHERE ENTITY_ID = ENTITYID
	AND ENTITY_TYPE = ENTITYTYPE
	AND FIELD_NAME = FIELDNAME
	GROUP BY FIELD_NAME
	ORDER BY GETPICKLISTDETAIL(PICKLISTITEMNAME, FIELD_VALUE);

	RETURN FIELDVALUE;
END$$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$


--
-- Definition of function `GETCUSTOMRELATIONSHIPACCOUNTNUMBERSCONCATENATED`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `GETCUSTOMRELATIONSHIPACCOUNTNUMBERSCONCATENATED`(ENTITYID INT, ENTITYTYPE VARCHAR(255), FIELDNAME VARCHAR(255))
	RETURNS VARCHAR(8000) CHARSET utf8
	DETERMINISTIC
BEGIN
	DECLARE FIELDVALUE VARCHAR(8000);

  SELECT GROUP_CONCAT(DISTINCT GETCONSTITUENTACCOUNTNUMBER(FIELD_VALUE) SEPARATOR ', ')
  INTO FIELDVALUE
  FROM CUSTOM_FIELD
	WHERE ENTITY_ID = ENTITYID
  AND ENTITY_TYPE = ENTITYTYPE
	AND FIELD_NAME = FIELDNAME
  GROUP BY FIELD_NAME
  ORDER BY GETCONSTITUENTACCOUNTNUMBER(FIELD_VALUE);

	RETURN FIELDVALUE;
END$$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$


--
-- Definition of function `GETCONSTITUENTQUERYLOOKUPOTHER`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `GETCONSTITUENTQUERYLOOKUPOTHER`(ENTITYID INT, ENTITYTYPE VARCHAR(255), FIELDNAME VARCHAR(255))
	RETURNS VARCHAR(8000) CHARSET utf8
	DETERMINISTIC
BEGIN
	DECLARE FIELDVALUE VARCHAR(255);
    DECLARE RESULT VARCHAR(8000);

	SELECT FIELD_VALUE INTO FIELDVALUE
    FROM CUSTOM_FIELD
    WHERE ENTITY_ID = ENTITYID
    AND ENTITY_TYPE = ENTITYTYPE
    AND FIELD_NAME = FIELDNAME;

    IF (FIELDVALUE IS NOT NULL) THEN
        SELECT GETCONSTITUENTDISPLAYNAME(CONVERT(FIELDVALUE, UNSIGNED))
        INTO RESULT;
    ELSE
        SELECT FIELD_VALUE
        INTO RESULT
        FROM CUSTOM_FIELD
        WHERE ENTITY_ID = ENTITYID
        AND ENTITY_TYPE = ENTITYTYPE
        AND FIELD_NAME =
        	CASE
        		WHEN FIELDNAME LIKE '%.%' THEN REPLACE(FIELDNAME, '.', '.other_')
        		ELSE CONCAT('other_', FIELDNAME)
        	END;
    END IF;

    RETURN RESULT;
END$$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$


--
-- Definition of function `GENERATE_VIEWS`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `CREATE_VIEW`(VIEWTEXT TEXT)
BEGIN
	SET @execString = VIEWTEXT;
	PREPARE createViewStatement FROM @execString;
	EXECUTE createViewStatement;
	DEALLOCATE PREPARE createViewStatement;
END;$$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$


--
-- Definition of function `GETCUSTOMTABLETITLEFIELDVALUES`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `GETCUSTOMTABLETITLEFIELDVALUES`(CUSTOMTABLENAME VARCHAR(255), CUSTOMTABLEROWID BIGINT)
	RETURNS VARCHAR(8000) CHARSET utf8
	DETERMINISTIC
BEGIN
	DECLARE RESULT VARCHAR(8000);

	SELECT 
		GROUP_CONCAT(FIELD_VALUE SEPARATOR ' - ')
	INTO RESULT
	FROM 
	(SELECT *
		FROM CUSTOM_FIELD
		WHERE ENTITY_ID = CUSTOMTABLEROWID AND ENTITY_TYPE = 'customtablerow'
		AND FIELD_NAME IN
			(SELECT CUSTOM_TABLE_FIELD_NAME FROM CUSTOM_TABLE 
			JOIN CUSTOM_TABLE_FIELD ON CUSTOM_TABLE.CUSTOM_TABLE_ID = CUSTOM_TABLE_FIELD.CUSTOM_TABLE_ID
			WHERE CUSTOM_TABLE_NAME = CUSTOMTABLENAME
			AND ((CUSTOM_TABLE_FIELD_TITLE = 1)
			OR ((SELECT COUNT(*) FROM CUSTOM_TABLE_FIELD B WHERE CUSTOM_TABLE.CUSTOM_TABLE_ID = B.CUSTOM_TABLE_ID AND CUSTOM_TABLE_FIELD_TITLE = 1) = 0
			AND CUSTOM_TABLE_FIELD_ID = (SELECT CUSTOM_TABLE_FIELD_ID FROM CUSTOM_TABLE_FIELD C WHERE CUSTOM_TABLE.CUSTOM_TABLE_ID = C.CUSTOM_TABLE_ID ORDER BY C.CUSTOM_TABLE_FIELD_ORDER LIMIT 1))))
		AND CURDATE() BETWEEN START_DATE AND END_DATE
		ORDER BY 
			(SELECT CUSTOM_TABLE_FIELD_ORDER FROM CUSTOM_TABLE 
			JOIN CUSTOM_TABLE_FIELD ON CUSTOM_TABLE.CUSTOM_TABLE_ID = CUSTOM_TABLE_FIELD.CUSTOM_TABLE_ID
			WHERE CUSTOM_TABLE_NAME = CUSTOMTABLENAME
			AND CUSTOM_TABLE_FIELD_NAME = FIELD_NAME) ASC)
	AS TITLEVALUE;

	RETURN(RESULT);	-- return
END$$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$


--
-- Definition of function `GETCUSTOMTABLETITLEFIELDVALUESCONCATENATED`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `GETCUSTOMTABLETITLEFIELDVALUESCONCATENATED`(CUSTOMTABLENAME VARCHAR(255), ENTITYID INT, ENTITYTYPE VARCHAR(255), FIELDNAME VARCHAR(255))
	RETURNS VARCHAR(8000) CHARSET utf8
	DETERMINISTIC
BEGIN
	DECLARE RESULT VARCHAR(8000);

	SELECT GROUP_CONCAT(GETCUSTOMTABLETITLEFIELDVALUES(CUSTOMTABLENAME, FIELD_NUMERIC_VALUE) SEPARATOR '; ')
	INTO RESULT
	FROM CUSTOM_FIELD
	WHERE ENTITY_ID = ENTITYID
  	AND ENTITY_TYPE = ENTITYTYPE
	AND FIELD_NAME = FIELDNAME
	AND CURDATE() BETWEEN START_DATE AND END_DATE
	GROUP BY FIELD_NAME
	ORDER BY GETCONSTITUENTDISPLAYNAME(FIELD_VALUE);

	RETURN RESULT;
END$$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$


--
-- Definition of procedure `EXECUTE_THEGURU_SEGMENTATION`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `EXECUTE_THEGURU_SEGMENTATION`(SEGMENTATIONID BIGINT, SEGMENTATION_QUERY TEXT)
BEGIN
	DECLARE VAR_NEW_LINE VARCHAR(10);
	DECLARE VAR_TAB VARCHAR(10);
	DECLARE EXECUTION_START DATETIME;
	DECLARE EXECUTION_END DATETIME;
	DECLARE RESULT_COUNT BIGINT;

	SET VAR_NEW_LINE = '\r\n';
	SET VAR_TAB = '\t';

	IF SEGMENTATION_QUERY IS NOT NULL THEN
		DELETE FROM THEGURU_SEGMENTATION_RESULT WHERE REPORT_ID = SEGMENTATIONID;

		SELECT CONCAT('INSERT THEGURU_SEGMENTATION_RESULT', VAR_NEW_LINE, VAR_TAB, '(REPORT_ID, ENTITY_ID)', 
			VAR_NEW_LINE, SEGMENTATION_QUERY) INTO @execString;
		PREPARE statement FROM @execString;
		SET EXECUTION_START = NOW();
		EXECUTE statement;
		SET EXECUTION_END = NOW();
		DEALLOCATE PREPARE statement;

		SELECT COUNT(*) INTO RESULT_COUNT FROM THEGURU_SEGMENTATION_RESULT WHERE REPORT_ID = SEGMENTATIONID;

		SELECT CONCAT('UPDATE ', DATABASE(), 'theguru.', 'REPORTWIZARD', VAR_NEW_LINE,
			'SET LAST_RUN_DATETIME = ''', EXECUTION_START, ''',', VAR_NEW_LINE,
			'EXECUTION_TIME = ', TIME_TO_SEC(TIMEDIFF(EXECUTION_END, EXECUTION_START)) * 1000, ',', VAR_NEW_LINE,
			'RESULT_COUNT = ', RESULT_COUNT, VAR_NEW_LINE,
			'WHERE REPORTWIZARD_ID = ', SEGMENTATIONID, ';') INTO @execString;
		PREPARE statement FROM @execString;
		EXECUTE statement;
		DEALLOCATE PREPARE statement;

		SELECT
			SEGMENTATIONID AS SEGMENTATION_ID,
			EXECUTION_START AS LAST_RUN_DATETIME,
			TIME_TO_SEC(TIMEDIFF(EXECUTION_END, EXECUTION_START)) * 1000 AS EXECUTION_TIME,
			RESULT_COUNT AS RESULT_COUNT;
	END IF;
END;$$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$


--
-- Definition of function `AGE`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `AGE`(DATE_1 DATETIME, DATE_2 DATETIME)
	RETURNS INTEGER
	DETERMINISTIC
BEGIN
	DECLARE YEARDIFF INT;
	DECLARE DATE_3 DATETIME;
	DECLARE RESULT DECIMAL(5, 3);

	SET YEARDIFF = EXTRACT(YEAR from DATE_2) - EXTRACT(YEAR from DATE_1);

	-- Birthday is not always on same day of year, so day of year diff must be done with same year.
	SET DATE_3 = DATE_ADD(DATE_1, INTERVAL YEARDIFF YEAR);

	-- If the date is 2/29 and the new day and month on the new date don't match, add a day.  
	-- In MySQL, adding a year to 2/29/2000 results in 2/28/2001 when this calculation needs it to 
	-- be 3/1/2001 since that is the 60th day of the year
	IF (MONTH(DATE_1) = 2 AND DAY(DATE_1) = 29 AND (MONTH(DATE_1) <> MONTH(DATE_3) OR DAY(DATE_1) <> DAY(DATE_3))) THEN
		SET DATE_3 = DATE_ADD(DATE_3, INTERVAL 1 DAY);
	END IF;
	
	-- Round down so that age will not increment before anniversary date
	-- Multiply by 1000, Floor it and then divide by 1000 to get the proper number of decimal places
	SET RESULT = CAST(YEARDIFF + (FLOOR(((DAYOFYEAR(DATE_2) - DAYOFYEAR(DATE_3)) / 365.25) * 1000) / 1000) AS DECIMAL(5, 3));
	-- Update - Function should now just return an integer and not include the decimal places.  
	SET RESULT = FLOOR(RESULT);
	
	RETURN RESULT;
END$$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$


/*!40101 SET SQL_MODE=@OLD_SQL_MODE */$$
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */$$
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */$$
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */$$
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */$$
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */$$
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */$$
