-- ***********************************************************************************************************
-- ***********************************************************************************************************
-- This has been moved to tangerine and renamed to theguru-functions.sql
-- You should now maintain theguru-functions.sql in tangerine and also write an update script in tangerine as
-- well.
-- ***********************************************************************************************************
-- ***********************************************************************************************************












-- ******************* Un-comment out the below line when running this script in mySql Query Browser ***************************************
-- DELIMITER $$

-- Drop old functions
DROP FUNCTION IF EXISTS GETCONSTITUENTCUSTOMFIELD$$
DROP FUNCTION IF EXISTS GETGIFTCUSTOMFIELD$$
DROP FUNCTION IF EXISTS GETDISTROLINECUSTOMFIELD$$
DROP FUNCTION IF EXISTS GETCOMMITMENTCUSTOMFIELD$$

-- Create function to retrieve custom fields
DROP FUNCTION IF EXISTS GETCUSTOMFIELD$$

CREATE FUNCTION `GETCUSTOMFIELD`(ENTITYID INT, ENTITYTYPE VARCHAR(255), FIELDNAME VARCHAR(255))
	RETURNS VARCHAR(255)
	DETERMINISTIC
BEGIN
	DECLARE FIELDVALUE VARCHAR(255);

	SELECT
        CASE
            WHEN FIELD_DATE_VALUE IS NOT NULL THEN CONCAT(CONVERT(YEAR(FIELD_DATE_VALUE), CHAR(4)), '-', CONVERT(MONTH(FIELD_DATE_VALUE), CHAR(2)), '-', CONVERT(DAY(FIELD_DATE_VALUE), CHAR(2)))
            ELSE FIELD_VALUE
        END
		INTO FIELDVALUE
		FROM CUSTOM_FIELD
		WHERE ENTITY_ID = ENTITYID
    	AND ENTITY_TYPE = ENTITYTYPE
		AND FIELD_NAME = FIELDNAME
		AND CURDATE() BETWEEN START_DATE AND END_DATE;

	RETURN FIELDVALUE;
END$$

-- Create function to retrieve date custom fields
DROP FUNCTION IF EXISTS GETCUSTOMDATEFIELD$$

CREATE FUNCTION `GETCUSTOMDATEFIELD`(ENTITYID INT, ENTITYTYPE VARCHAR(255), FIELDNAME VARCHAR(255))
	RETURNS VARCHAR(255)
	DETERMINISTIC
BEGIN
	DECLARE FIELDVALUE VARCHAR(255);
	SELECT DATE(FIELD_DATE_VALUE) INTO FIELDVALUE
		FROM CUSTOM_FIELD
		WHERE ENTITY_ID = ENTITYID
    	AND ENTITY_TYPE = ENTITYTYPE
		AND FIELD_NAME = FIELDNAME
		AND CURDATE() BETWEEN START_DATE AND END_DATE;
	RETURN FIELDVALUE;
END$$


DROP FUNCTION IF EXISTS `GETCUSTOMFIELDCONCATENATED` $$
CREATE FUNCTION `GETCUSTOMFIELDCONCATENATED`(ENTITYID INT, ENTITYTYPE VARCHAR(255), FIELDNAME VARCHAR(255))
	RETURNS VARCHAR(255)
	DETERMINISTIC
BEGIN
	DECLARE FIELDVALUE VARCHAR(255);

  SELECT GROUP_CONCAT(DISTINCT FIELD_VALUE SEPARATOR ', ')
  INTO FIELDVALUE
  FROM CUSTOM_FIELD
	WHERE ENTITY_ID = ENTITYID
  	AND ENTITY_TYPE = ENTITYTYPE
	AND FIELD_NAME = FIELDNAME
	AND CURDATE() BETWEEN START_DATE AND END_DATE
  GROUP BY FIELD_NAME
  ORDER BY FIELD_VALUE;

  RETURN FIELDVALUE;
END$$


DROP FUNCTION IF EXISTS `GETCUSTOMFIELDVALUESANDDISPLAYVALUESCONCATENATED` $$
CREATE FUNCTION `GETCUSTOMFIELDVALUESANDDISPLAYVALUESCONCATENATED`(ENTITYID INT, ENTITYTYPE VARCHAR(255), FIELDNAME VARCHAR(255), PICKLISTCUSTOMFIELDNAME VARCHAR(255), PICKLISTITEMNAME VARCHAR(255))
	RETURNS VARCHAR(8000)
	DETERMINISTIC
BEGIN
	DECLARE FIELDVALUE1 VARCHAR(8000);
  DECLARE FIELDVALUE2 VARCHAR(8000);
  DECLARE FIELDVALUE VARCHAR(8000);

  SET FIELDVALUE1 = GETCUSTOMFIELDDISPLAYVALUECONCATENATED(ENTITYID, ENTITYTYPE, PICKLISTCUSTOMFIELDNAME, PICKLISTITEMNAME);
  SET FIELDVALUE2 = GETCUSTOMFIELDCONCATENATED(ENTITYID, ENTITYTYPE, FIELDNAME);

  IF FIELDVALUE1 IS NOT NULL THEN
    SET FIELDVALUE = FIELDVALUE1;
  END IF;

  IF FIELDVALUE2 IS NOT NULL THEN
    IF FIELDVALUE IS NOT NULL THEN
      SET FIELDVALUE = CONCAT(FIELDVALUE, ', ', FIELDVALUE2);
    ELSE
      SET FIELDVALUE = FIELDVALUE2;
    END IF;
  END IF;

	RETURN FIELDVALUE;
END$$


DROP FUNCTION IF EXISTS `GETCUSTOMFIELDDISPLAYVALUECONCATENATED` $$
CREATE FUNCTION `GETCUSTOMFIELDDISPLAYVALUECONCATENATED`(ENTITYID INT, ENTITYTYPE VARCHAR(255), FIELDNAME VARCHAR(255), PICKLISTITEMNAME VARCHAR(255))
	RETURNS VARCHAR(8000)
	DETERMINISTIC
BEGIN
	DECLARE FIELDVALUE VARCHAR(8000);

  SELECT GROUP_CONCAT(DISTINCT GETPICKLISTDISPLAYVALUE(PICKLISTITEMNAME, FIELD_VALUE) SEPARATOR ', ')
  INTO FIELDVALUE
  FROM CUSTOM_FIELD
	WHERE ENTITY_ID = ENTITYID
  	AND ENTITY_TYPE = ENTITYTYPE
	AND FIELD_NAME = FIELDNAME
	AND CURDATE() BETWEEN START_DATE AND END_DATE
  GROUP BY FIELD_NAME
  ORDER BY GETPICKLISTDISPLAYVALUE(PICKLISTITEMNAME, FIELD_VALUE);

	RETURN FIELDVALUE;
END$$

DROP FUNCTION IF EXISTS `GETCUSTOMFIELDLONGDESCRIPTIONCONCATENATED` $$
CREATE FUNCTION `GETCUSTOMFIELDLONGDESCRIPTIONCONCATENATED`(ENTITYID INT, ENTITYTYPE VARCHAR(255), FIELDNAME VARCHAR(255), PICKLISTITEMNAME VARCHAR(255))
	RETURNS VARCHAR(8000)
	DETERMINISTIC
BEGIN
	DECLARE FIELDVALUE VARCHAR(8000);

  SELECT GROUP_CONCAT(DISTINCT GETPICKLISTLONGDESCRIPTION(PICKLISTITEMNAME, FIELD_VALUE) SEPARATOR ', ')
  INTO FIELDVALUE
  FROM CUSTOM_FIELD
	WHERE ENTITY_ID = ENTITYID
  	AND ENTITY_TYPE = ENTITYTYPE
	AND FIELD_NAME = FIELDNAME
	AND CURDATE() BETWEEN START_DATE AND END_DATE
  GROUP BY FIELD_NAME
  ORDER BY GETPICKLISTLONGDESCRIPTION(PICKLISTITEMNAME, FIELD_VALUE);

	RETURN FIELDVALUE;
END$$


DROP FUNCTION IF EXISTS `GETCUSTOMFIELDPICKLISTDETAILCONCATENATED` $$
CREATE FUNCTION `GETCUSTOMFIELDPICKLISTDETAILCONCATENATED`(ENTITYID INT, ENTITYTYPE VARCHAR(255), FIELDNAME VARCHAR(255), PICKLISTITEMNAME VARCHAR(255))
	RETURNS VARCHAR(8000)
	DETERMINISTIC
BEGIN
	DECLARE FIELDVALUE VARCHAR(8000);

  SELECT GROUP_CONCAT(DISTINCT GETPICKLISTDETAIL(PICKLISTITEMNAME, FIELD_VALUE) SEPARATOR ', ')
  INTO FIELDVALUE
  FROM CUSTOM_FIELD
	WHERE ENTITY_ID = ENTITYID
  	AND ENTITY_TYPE = ENTITYTYPE
	AND FIELD_NAME = FIELDNAME
	AND CURDATE() BETWEEN START_DATE AND END_DATE
  GROUP BY FIELD_NAME
  ORDER BY GETPICKLISTDETAIL(PICKLISTITEMNAME, FIELD_VALUE);

	RETURN FIELDVALUE;
END$$


DROP FUNCTION IF EXISTS `GETCONSTITUENTDISPLAYNAME` $$
CREATE FUNCTION GETCONSTITUENTDISPLAYNAME(CONSTITUENTID BIGINT)
RETURNS VARCHAR(510)
DETERMINISTIC
BEGIN
	DECLARE RESULT VARCHAR(510);

	SELECT CASE WHEN CONSTITUENT_TYPE = 'individual' THEN CONCAT_WS(', ', LAST_NAME, FIRST_NAME) WHEN CONSTITUENT_TYPE = 'organization' THEN ORGANIZATION_NAME ELSE CONSTITUENT_ID END
	INTO RESULT
	FROM CONSTITUENT
	WHERE CONSTITUENT_ID = CONSTITUENTID;

	RETURN(RESULT);	-- return
END$$


DROP FUNCTION IF EXISTS `GETCONSTITUENTACCOUNTNUMBER` $$
CREATE FUNCTION GETCONSTITUENTACCOUNTNUMBER(CONSTITUENTID BIGINT)
RETURNS BIGINT
DETERMINISTIC
BEGIN
	DECLARE RESULT BIGINT;

	SELECT ACCOUNT_NUMBER
	INTO RESULT
	FROM CONSTITUENT
	WHERE CONSTITUENT_ID = CONSTITUENTID;

	RETURN(RESULT);	-- return
END$$

DROP FUNCTION IF EXISTS `GETCONSTITUENTDISPLAYNAMES`$$
CREATE FUNCTION GETCONSTITUENTDISPLAYNAMES(str TEXT, delim VARCHAR(124))
RETURNS TEXT
DETERMINISTIC
BEGIN
	DECLARE i INT DEFAULT 0;	-- total number of delimiters
	DECLARE ctr INT DEFAULT 0;	-- counter for the loop
	DECLARE str_len INT;		-- string length,self explanatory
	DECLARE out_str text DEFAULT '';	-- return string holder
	DECLARE temp_str text DEFAULT '';	-- temporary string holder
	DECLARE temp_val VARCHAR(255) DEFAULT '';	-- temporary string holder for query

	-- get length
	SET str_len=LENGTH(str);

	IF (str_len > 0) THEN
		SET i = (LENGTH(str)-LENGTH(REPLACE(str, delim, '')))/LENGTH(delim) + 1;
		-- get total number delimeters and add 1
		-- add 1 since total separated values are 1 more than the number of delimiters

		-- start of while loop
		WHILE(ctr<i) DO
			-- add 1 to the counter, which will also be used to get the value of the string
			SET ctr=ctr+1;

			-- get value separated by delimiter using ctr as the index
			SET temp_str = REPLACE(SUBSTRING(SUBSTRING_INDEX(str, delim, ctr), LENGTH(SUBSTRING_INDEX(str, delim,ctr - 1)) + 1), delim, '');

			-- query real value and insert into temporary value holder, temp_str contains the exploded ID
			SELECT GETCONSTITUENTDISPLAYNAME(temp_str) INTO temp_val;

			-- concat real value into output string separated by delimiter
			SET out_str=CONCAT(out_str, temp_val, '; ');
		END WHILE;
		-- end of while loop
	END IF;

	-- trim delimiter from end of string
	SET out_str=TRIM(TRAILING delim FROM out_str);
	RETURN(out_str);	-- return

END$$


DROP FUNCTION IF EXISTS `GETCUSTOMRELATIONSHIPNAMESCONCATENATED` $$
CREATE FUNCTION `GETCUSTOMRELATIONSHIPNAMESCONCATENATED`(ENTITYID INT, ENTITYTYPE VARCHAR(255), FIELDNAME VARCHAR(255))
	RETURNS VARCHAR(8000)
	DETERMINISTIC
BEGIN
	DECLARE FIELDVALUE VARCHAR(8000);

  SELECT GROUP_CONCAT(DISTINCT GETCONSTITUENTDISPLAYNAME(FIELD_VALUE) SEPARATOR '; ')
  INTO FIELDVALUE
  FROM CUSTOM_FIELD
	WHERE ENTITY_ID = ENTITYID
  	AND ENTITY_TYPE = ENTITYTYPE
	AND FIELD_NAME = FIELDNAME
	AND CURDATE() BETWEEN START_DATE AND END_DATE
  GROUP BY FIELD_NAME
  ORDER BY GETCONSTITUENTDISPLAYNAME(FIELD_VALUE);

	RETURN FIELDVALUE;
END$$


DROP FUNCTION IF EXISTS `GETCUSTOMRELATIONSHIPACCOUNTNUMBERSCONCATENATED` $$
CREATE FUNCTION `GETCUSTOMRELATIONSHIPACCOUNTNUMBERSCONCATENATED`(ENTITYID INT, ENTITYTYPE VARCHAR(255), FIELDNAME VARCHAR(255))
	RETURNS VARCHAR(8000)
	DETERMINISTIC
BEGIN
	DECLARE FIELDVALUE VARCHAR(8000);

  SELECT GROUP_CONCAT(DISTINCT GETCONSTITUENTACCOUNTNUMBER(FIELD_VALUE) SEPARATOR ', ')
  INTO FIELDVALUE
  FROM CUSTOM_FIELD
	WHERE ENTITY_ID = ENTITYID
  	AND ENTITY_TYPE = ENTITYTYPE
	AND FIELD_NAME = FIELDNAME
	AND CURDATE() BETWEEN START_DATE AND END_DATE
  GROUP BY FIELD_NAME
  ORDER BY GETCONSTITUENTACCOUNTNUMBER(FIELD_VALUE);

	RETURN FIELDVALUE;
END$$


DROP FUNCTION IF EXISTS `COUNTOFVALUES` $$
CREATE FUNCTION COUNTOFVALUES(FIELDVALUE TEXT, DELIM VARCHAR(124))
RETURNS INT
DETERMINISTIC
BEGIN
	DECLARE i INT DEFAULT 0;	-- total number of delimiters
	IF LENGTH(FIELDVALUE) <> 0 THEN
		SET i = (LENGTH(FIELDVALUE)-LENGTH(REPLACE(FIELDVALUE, DELIM, '')))/LENGTH(DELIM) + 1;
	END IF;
	RETURN(i);	-- return
END$$


DROP FUNCTION IF EXISTS `GETVALUE` $$
CREATE FUNCTION GETVALUE(FIELDVALUE TEXT, DELIM VARCHAR(124), VALUEINDEX INT)
RETURNS TEXT
DETERMINISTIC
BEGIN
	DECLARE TEMP_STR text DEFAULT '';	-- temporary string holder
	-- get value separated by delimiter
	SET TEMP_STR = REPLACE(SUBSTRING(SUBSTRING_INDEX(FIELDVALUE, DELIM, VALUEINDEX), LENGTH(SUBSTRING_INDEX(FIELDVALUE, DELIM, VALUEINDEX - 1)) + 1), DELIM, '');
	RETURN(TEMP_STR);	-- return
END$$


DROP FUNCTION IF EXISTS `SPLITCAMELCASEDSTRING`$$
CREATE FUNCTION SPLITCAMELCASEDSTRING(STRING TEXT)
RETURNS TEXT
DETERMINISTIC
BEGIN
	DECLARE COUNTER INT DEFAULT 0;	-- counter for the loop
	DECLARE STRING_LENGTH INT;		-- string length,self explanatory
	DECLARE RESULT TEXT DEFAULT '';	-- return string holder
	DECLARE TEMP_STRING text DEFAULT '';	-- temporary string holder
	DECLARE NEXT_CHARACTER_UPPER_CASE BIT DEFAULT FALSE;

	-- if the string contains brackets, pull the value from inside them.  Otherwise, pull the string.
	SET STRING = REPLACE(SUBSTRING_INDEX(STRING, '[', -1), ']', '');
	-- get length of string
	SET STRING_LENGTH = LENGTH(STRING);

	-- start of while loop
	WHILE (COUNTER < STRING_LENGTH) DO
		-- add 1 to the counter, which will also be used to get the value of the string
		SET COUNTER = COUNTER + 1;
		SET TEMP_STRING = SUBSTRING(STRING, COUNTER, 1);
	-- upper case the first character
	IF (COUNTER = 1 OR NEXT_CHARACTER_UPPER_CASE) THEN
		SET RESULT = CONCAT(RESULT, UCASE(TEMP_STRING));
		SET NEXT_CHARACTER_UPPER_CASE = FALSE;
	ELSE
		IF ASCII(TEMP_STRING) BETWEEN 65 AND 90 THEN
				-- if the character is upper case then add a space before it
				SET RESULT = CONCAT(RESULT, ' ', TEMP_STRING);
		ELSE
			IF TEMP_STRING = '.' THEN
				SET RESULT = CONCAT(RESULT, ' ');
				SET NEXT_CHARACTER_UPPER_CASE = TRUE;
			ELSE
				-- otherwise just add it to the result
				SET RESULT = CONCAT(RESULT, TEMP_STRING);
			END IF;
		END IF;
	END IF;
	END WHILE;
	-- end of while loop

	RETURN(RESULT);	-- return
END$$


DROP PROCEDURE IF EXISTS `INSERTREPORTFIELD`$$
CREATE PROCEDURE INSERTREPORTFIELD(PRIMARYKEYS VARCHAR(255), COLUMNNAME VARCHAR(255), DISPLAYNAME VARCHAR(255), ISDEFAULT BIT, FIELDTYPE INT, FIELDGROUPID LONG)
BEGIN
	INSERT INTO REPORTFIELD
		(AVERAGE, CAN_BE_SUMMARIZED, COLUMN_NAME, ALIAS_NAME, DISPLAY_NAME, IS_DEFAULT, IS_SUMMARIZED, LARGEST_VALUE, PERFORMSUMMARY, IS_SELECTED, SMALLEST_VALUE, FIELD_TYPE, RECORD_COUNT, PRIMARY_KEYS)
	VALUES
		(b'0', b'0', COLUMNNAME, COLUMNNAME, DISPLAYNAME, ISDEFAULT, b'0', b'0', b'0', b'0', b'0', FIELDTYPE, b'0', PRIMARYKEYS);

	SET @REPORTFIELD_ID = LAST_INSERT_ID();

	INSERT REPORTFIELD_REPORTFIELDGROUP
		(FIELDS_REPORTFIELD_ID, REPORTFIELDGROUP_ID, REPORTFIELDGROUP_REPORTFIELDGROUP_ID, REPORTFIELD_ID)
	VALUES
		(@REPORTFIELD_ID, FIELDGROUPID, FIELDGROUPID ,@REPORTFIELD_ID);
END$$


DROP PROCEDURE IF EXISTS `INSERTREPORTFIELDWITHALIAS`$$
CREATE PROCEDURE INSERTREPORTFIELDWITHALIAS(PRIMARYKEYS VARCHAR(255), ALIASNAME VARCHAR(255), COLUMNNAME VARCHAR(255), DISPLAYNAME VARCHAR(255), ISDEFAULT BIT, FIELDTYPE INT, FIELDGROUPID LONG)
BEGIN
	INSERT INTO REPORTFIELD
		(AVERAGE, CAN_BE_SUMMARIZED, COLUMN_NAME, ALIAS_NAME, DISPLAY_NAME, IS_DEFAULT, IS_SUMMARIZED, LARGEST_VALUE, PERFORMSUMMARY, IS_SELECTED, SMALLEST_VALUE, FIELD_TYPE, RECORD_COUNT, PRIMARY_KEYS)
	VALUES
		(b'0', b'0', COLUMNNAME, ALIASNAME, DISPLAYNAME, ISDEFAULT, b'0', b'0', b'0', b'0', b'0', FIELDTYPE, b'0', PRIMARYKEYS);

	SET @REPORTFIELD_ID = LAST_INSERT_ID();

	INSERT REPORTFIELD_REPORTFIELDGROUP
		(FIELDS_REPORTFIELD_ID, REPORTFIELDGROUP_ID, REPORTFIELDGROUP_REPORTFIELDGROUP_ID, REPORTFIELD_ID)
	VALUES
		(@REPORTFIELD_ID, FIELDGROUPID, FIELDGROUPID ,@REPORTFIELD_ID);
END$$


DROP PROCEDURE IF EXISTS `INSERTREPORTFIELDGROUP`$$
CREATE PROCEDURE INSERTREPORTFIELDGROUP(REPORTFIELDGROUPNAME VARCHAR(255), REPORTSUBSOURCE_ID LONG, OUT REPORTFIELDGROUP_ID LONG)
BEGIN
	INSERT INTO REPORTFIELDGROUP
		(NAME)
	VALUES
		(REPORTFIELDGROUPNAME);

	SET @REPORTFIELDGROUP_ID = LAST_INSERT_ID();

	SET @MAXREPORTSUBSOURCE_ID = (SELECT IFNULL(MAX(REPORTSUBSOURCE_ID),0) + 1 FROM REPORTFIELDGROUP_REPORTDATASUBSOURCE);

	INSERT REPORTFIELDGROUP_REPORTDATASUBSOURCE
		(REPORTFIELDGROUP_REPORTFIELDGROUP_ID, REPORTDATASUBSOURCE_REPORTSUBSOURCE_ID, REPORTSUBSOURCE_ID)
	VALUES
		(@REPORTFIELDGROUP_ID, REPORTSUBSOURCE_ID, @MAXREPORTSUBSOURCE_ID);

	SET REPORTFIELDGROUP_ID = @REPORTFIELDGROUP_ID;
END$$

DROP PROCEDURE IF EXISTS `ASSOCIATECUSTOMFILTERSWITHDATASUBSOURCES`$$
CREATE PROCEDURE ASSOCIATECUSTOMFILTERSWITHDATASUBSOURCES()
BEGIN
	DECLARE CSR_END INT DEFAULT 0;
	DECLARE FIELDNAME VARCHAR(100) DEFAULT '';
	DECLARE CUSTOMFILTERID BIGINT DEFAULT 0;
	DECLARE CUSTOMFILTERDISPLAYTEXT LONGTEXT DEFAULT 0;
	DECLARE SUBSOURCEID BIGINT DEFAULT 0;
	DECLARE MAXCUSTOMFILTERSUBSOURCEID BIGINT DEFAULT 0;

	DECLARE CSR_FIELDNAMES CURSOR FOR
		SELECT DISTINCT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS
		WHERE TABLE_NAME LIKE 'VW%'
		AND (COLUMN_NAME LIKE '%CONSTITUENT_ID'
			OR COLUMN_NAME = 'GIFT_GIFT_ID'
			OR COLUMN_NAME = 'ADDRESS_TEMPORARY_START_DATE'
			OR COLUMN_NAME = 'EMAIL_TEMPORARY_START_DATE'
			OR COLUMN_NAME = 'PHONE_TEMPORARY_START_DATE');

	DECLARE CSR_CUSTOMFILTERS CURSOR FOR
		SELECT REPORTCUSTOMFILTERDEFINITION_ID, DISPLAY_TEXT FROM REPORTCUSTOMFILTERDEFINITION
		WHERE SQL_TEXT LIKE CONCAT('%', FIELDNAME, '%');

	DECLARE CSR_SUBSOURCES CURSOR FOR
		SELECT REPORTSUBSOURCE_ID FROM REPORTDATASUBSOURCE
		WHERE VIEW_NAME IN
			(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS
			WHERE TABLE_NAME LIKE 'VW%' AND COLUMN_NAME = FIELDNAME)
		AND REPORTSUBSOURCE_ID NOT IN
			(SELECT reportDataSubSource_REPORTSUBSOURCE_ID FROM REPORTCUSTOMFILTERDEFINITION_REPORTDATASUBSOURCE
			WHERE reportCustomFilterDefinitions_REPORTCUSTOMFILTERDEFINITION_ID = CUSTOMFILTERID
			OR (SELECT DISPLAY_TEXT FROM REPORTCUSTOMFILTERDEFINITION WHERE REPORTCUSTOMFILTERDEFINITION.REPORTCUSTOMFILTERDEFINITION_ID = reportCustomFilterDefinitions_REPORTCUSTOMFILTERDEFINITION_ID) = CUSTOMFILTERDISPLAYTEXT);

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET CSR_END = 1;

	OPEN CSR_FIELDNAMES;

	FIELDNAMES_LOOP: LOOP
		FETCH CSR_FIELDNAMES INTO FIELDNAME;

		IF CSR_END THEN
			LEAVE FIELDNAMES_LOOP;
		END IF;

		OPEN CSR_CUSTOMFILTERS;
		CUSTOMFILTERS_LOOP: LOOP
			FETCH CSR_CUSTOMFILTERS INTO CUSTOMFILTERID, CUSTOMFILTERDISPLAYTEXT;

			IF CSR_END THEN
				LEAVE CUSTOMFILTERS_LOOP;
			END IF;

			OPEN CSR_SUBSOURCES;

			SUBSOURCES_LOOP: LOOP
				FETCH CSR_SUBSOURCES INTO SUBSOURCEID;

				IF CSR_END THEN
					LEAVE SUBSOURCES_LOOP;
				END IF;

				SET MAXCUSTOMFILTERSUBSOURCEID = (SELECT IFNULL(MAX(REPORTCUSTOMFILTERDEFINITION_ID),0) + 1 FROM REPORTCUSTOMFILTERDEFINITION_REPORTDATASUBSOURCE);
				INSERT REPORTCUSTOMFILTERDEFINITION_REPORTDATASUBSOURCE (reportCustomFilterDefinitions_REPORTCUSTOMFILTERDEFINITION_ID, reportDataSubSource_REPORTSUBSOURCE_ID, REPORTSUBSOURCE_ID, REPORTCUSTOMFILTERDEFINITION_ID) VALUES (CUSTOMFILTERID, SUBSOURCEID, SUBSOURCEID, MAXCUSTOMFILTERSUBSOURCEID);
			END LOOP;
			SET CSR_END = 0;
			CLOSE CSR_SUBSOURCES;
		END LOOP;
		SET CSR_END = 0;
		CLOSE CSR_CUSTOMFILTERS;
	END LOOP;
	SET CSR_END = 0;
	CLOSE CSR_FIELDNAMES;
END$$

DROP FUNCTION IF EXISTS `GETPICKLISTDISPLAYVALUE` $$
CREATE FUNCTION `GETPICKLISTDISPLAYVALUE`(PICKLISTNAME VARCHAR(255), PICKLISTITEMNAME VARCHAR(255))
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
	DECLARE RESULT VARCHAR(255);

  SELECT DEFAULT_DISPLAY_VALUE
  INTO RESULT
  FROM PICKLIST PROJECTCODE_PICKLIST
  LEFT JOIN PICKLIST_ITEM PROJECTCODE_PICKLIST_ITEM ON PROJECTCODE_PICKLIST.PICKLIST_ID = PROJECTCODE_PICKLIST_ITEM.PICKLIST_ID
  WHERE PROJECTCODE_PICKLIST.PICKLIST_NAME = PICKLISTNAME
  AND PROJECTCODE_PICKLIST_ITEM.ITEM_NAME = PICKLISTITEMNAME
  ORDER BY IFNULL(SITE_NAME, '0') DESC LIMIT 0,1;

	RETURN(RESULT);	-- return
END$$

DROP FUNCTION IF EXISTS `GETPICKLISTLONGDESCRIPTION` $$
CREATE FUNCTION `GETPICKLISTLONGDESCRIPTION`(PICKLISTNAME VARCHAR(255), PICKLISTITEMNAME VARCHAR(255))
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
	DECLARE RESULT VARCHAR(255);

  SELECT LONG_DESCRIPTION
  INTO RESULT
  FROM PICKLIST PROJECTCODE_PICKLIST
  LEFT JOIN PICKLIST_ITEM PROJECTCODE_PICKLIST_ITEM ON PROJECTCODE_PICKLIST.PICKLIST_ID = PROJECTCODE_PICKLIST_ITEM.PICKLIST_ID
  WHERE PROJECTCODE_PICKLIST.PICKLIST_NAME = PICKLISTNAME
  AND PROJECTCODE_PICKLIST_ITEM.ITEM_NAME = PICKLISTITEMNAME
  ORDER BY IFNULL(SITE_NAME, '0') DESC LIMIT 0,1;

	RETURN(RESULT);	-- return
END$$

DROP FUNCTION IF EXISTS `GETPICKLISTDETAIL` $$
CREATE FUNCTION `GETPICKLISTDETAIL`(PICKLISTNAME VARCHAR(255), PICKLISTITEMNAME VARCHAR(255))
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
	DECLARE RESULT VARCHAR(255);

  SELECT DETAIL
  INTO RESULT
  FROM PICKLIST PROJECTCODE_PICKLIST
  LEFT JOIN PICKLIST_ITEM PROJECTCODE_PICKLIST_ITEM ON PROJECTCODE_PICKLIST.PICKLIST_ID = PROJECTCODE_PICKLIST_ITEM.PICKLIST_ID
  WHERE PROJECTCODE_PICKLIST.PICKLIST_NAME = PICKLISTNAME
  AND PROJECTCODE_PICKLIST_ITEM.ITEM_NAME = PICKLISTITEMNAME
  ORDER BY IFNULL(SITE_NAME, '0') DESC LIMIT 0,1;

	RETURN(RESULT);	-- return
END$$


DROP FUNCTION IF EXISTS `GETPICKLISTITEMIDBYITEMNAME` $$
CREATE FUNCTION `GETPICKLISTITEMIDBYITEMNAME`(PICKLISTNAME VARCHAR(255), PICKLISTITEMNAME VARCHAR(255))
RETURNS BIGINT
DETERMINISTIC
BEGIN
	DECLARE RESULT BIGINT;

  SELECT PICKLIST_ITEM_ID
  INTO RESULT
  FROM PICKLIST PROJECTCODE_PICKLIST
  LEFT JOIN PICKLIST_ITEM PROJECTCODE_PICKLIST_ITEM ON PROJECTCODE_PICKLIST.PICKLIST_ID = PROJECTCODE_PICKLIST_ITEM.PICKLIST_ID
  WHERE PROJECTCODE_PICKLIST.PICKLIST_NAME = PICKLISTNAME
  AND PROJECTCODE_PICKLIST_ITEM.ITEM_NAME = PICKLISTITEMNAME
  ORDER BY IFNULL(SITE_NAME, '0') DESC LIMIT 0,1;

	RETURN(RESULT);	-- return
END$$

-- Deprecated - Fields should now be storing the item name instead of the default display value
DROP FUNCTION IF EXISTS `GETPICKLISTITEMIDBYDEFAULTDISPLAYVALUE` $$
CREATE FUNCTION `GETPICKLISTITEMIDBYDEFAULTDISPLAYVALUE`(PICKLISTNAME VARCHAR(255), PICKLISTITEMNAME VARCHAR(255))
RETURNS BIGINT
DETERMINISTIC
BEGIN
	DECLARE RESULT BIGINT;

  SELECT PICKLIST_ITEM_ID
  INTO RESULT
  FROM PICKLIST PROJECTCODE_PICKLIST
  LEFT JOIN PICKLIST_ITEM PROJECTCODE_PICKLIST_ITEM ON PROJECTCODE_PICKLIST.PICKLIST_ID = PROJECTCODE_PICKLIST_ITEM.PICKLIST_ID
  WHERE PROJECTCODE_PICKLIST.PICKLIST_NAME = PICKLISTNAME
  AND PROJECTCODE_PICKLIST_ITEM.DEFAULT_DISPLAY_VALUE = PICKLISTITEMNAME
  ORDER BY IFNULL(SITE_NAME, '0') DESC LIMIT 0,1;

	RETURN(RESULT);	-- return
END$$


DROP FUNCTION IF EXISTS `GETCONSTITUENTQUERYLOOKUPOTHER` $$
CREATE FUNCTION `GETCONSTITUENTQUERYLOOKUPOTHER`(ENTITYID INT, ENTITYTYPE VARCHAR(255), FIELDNAME VARCHAR(255))
	RETURNS VARCHAR(8000)
	DETERMINISTIC
BEGIN
	DECLARE FIELDVALUE VARCHAR(255);
    DECLARE RESULT VARCHAR(8000);

	SELECT FIELD_VALUE INTO FIELDVALUE
    FROM CUSTOM_FIELD
    WHERE ENTITY_ID = ENTITYID
    AND ENTITY_TYPE = ENTITYTYPE
    AND FIELD_NAME = FIELDNAME
    AND CURDATE() BETWEEN START_DATE AND END_DATE;

    IF (FIELDVALUE IS NOT NULL) THEN
        SELECT GETCONSTITUENTDISPLAYNAME(CONVERT(FIELDVALUE, UNSIGNED))
        INTO RESULT;
    ELSE
        SELECT FIELD_VALUE
        INTO RESULT
        FROM CUSTOM_FIELD
        WHERE ENTITY_ID = ENTITYID
        AND ENTITY_TYPE = ENTITYTYPE
        AND FIELD_NAME =
        	CASE
        		WHEN FIELDNAME LIKE '%.%' THEN REPLACE(FIELDNAME, '.', '.other_')
        		ELSE CONCAT('other_', FIELDNAME)
        	END
        AND CURDATE() BETWEEN START_DATE AND END_DATE;
    END IF;

    RETURN RESULT;
END$$


DROP PROCEDURE IF EXISTS `RENAMEPICKLISTITEMCUSTOMFIELD`$$
CREATE PROCEDURE `RENAMEPICKLISTITEMCUSTOMFIELD`(PICKLISTNAMEID VARCHAR(255), OLDPICKLISTITEMNAME VARCHAR(255), NEWPICKLISTITEMNAME VARCHAR(255))
BEGIN
  UPDATE REPORTFIELD
  SET COLUMN_NAME = REPLACE(COLUMN_NAME, CONCAT('''', OLDPICKLISTITEMNAME, ''''), CONCAT('''', NEWPICKLISTITEMNAME, '''')),
  DISPLAY_NAME = NEWPICKLISTITEMNAME
  WHERE COLUMN_NAME LIKE CONCAT('%GETCUSTOMFIELD(GETPICKLISTITEMIDBYDEFAULTDISPLAYVALUE(''', PICKLISTNAMEID, '''%''picklistItem'',%''', OLDPICKLISTITEMNAME, '''%');
END$$

DROP PROCEDURE IF EXISTS `INSERTCUSTOMFIELDDEFINITION`$$
CREATE PROCEDURE INSERTCUSTOMFIELDDEFINITION(REPORTFIELDGROUPNAME VARCHAR(255), PRIMARYKEY VARCHAR(255), ALIASNAME VARCHAR(255), PICKLISTNAMEID VARCHAR(255), PICKLISTVIEWFIELDNAME VARCHAR(255), CUSTOMFIELDNAME VARCHAR(255), DISPLAYNAME VARCHAR(255))
BEGIN
	DECLARE CSR_END INT DEFAULT 0;
	DECLARE REPORTFIELDGROUPID BIGINT DEFAULT 0;

	DECLARE CSR_FIELDGROUPS CURSOR FOR
    SELECT REPORTFIELDGROUP_ID FROM REPORTFIELDGROUP WHERE NAME = REPORTFIELDGROUPNAME;

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET CSR_END = 1;

	OPEN CSR_FIELDGROUPS;

	FIELDGROUPS_LOOP: LOOP
		FETCH CSR_FIELDGROUPS INTO REPORTFIELDGROUPID;

		IF CSR_END THEN
			LEAVE FIELDGROUPS_LOOP;
		END IF;
    CALL INSERTREPORTFIELDWITHALIAS(PRIMARYKEY, ALIASNAME,
      CONCAT('GETCUSTOMFIELD(GETPICKLISTITEMIDBYDEFAULTDISPLAYVALUE(''', PICKLISTNAMEID, ''', ',
             PICKLISTVIEWFIELDNAME, '), ''picklistItem'', ''', CUSTOMFIELDNAME, ''')'),
      DISPLAYNAME, b'0', 1, REPORTFIELDGROUPID);
  END LOOP;
	SET CSR_END = 0;
	CLOSE CSR_FIELDGROUPS;

END$$


DROP PROCEDURE IF EXISTS `INSERTPROJECTCODECUSTOMFIELDDEFINITION`$$
CREATE PROCEDURE INSERTPROJECTCODECUSTOMFIELDDEFINITION(CUSTOMFIELDNAME VARCHAR(255))
BEGIN
  CALL INSERTCUSTOMFIELDDEFINITION('Gift Distribution', 'DISTRO_LINE_DISTRO_LINE_ID', CONCAT('DISTRO_LINE_PROJECT_CODE_', REPLACE(CUSTOMFIELDNAME, ' ', '_')), 'projectCode', 'DISTRO_LINE_PROJECT_CODE', CUSTOMFIELDNAME, CONCAT('Designation ', CUSTOMFIELDNAME));
  CALL INSERTCUSTOMFIELDDEFINITION('Gift In Kind Details', 'GIFT_IN_KIND_DETAIL_GIK_DETAIL_ID', CONCAT('GIFT_IN_KIND_DETAIL_PROJECT_CODE_', REPLACE(CUSTOMFIELDNAME, ' ', '_')), 'projectCode', 'GIFT_IN_KIND_DETAIL_PROJECT_CODE', CUSTOMFIELDNAME, CONCAT('Designation ', CUSTOMFIELDNAME));
END$$


DROP PROCEDURE IF EXISTS `PERIODIC_RECEIPT_OUPUT`$$

CREATE PROCEDURE PERIODIC_RECEIPT_OUPUT(BEGIN_DATE DATETIME, END_DATE DATETIME, HARDGIFTS BIT, SOFTGIFTS BIT, GIFTSINKIND BIT)
BEGIN
  DECLARE CSR_END INT DEFAULT 0;
	DECLARE VAR_INDEX INT DEFAULT 0;
	DECLARE VAR_GIFT_TYPE VARCHAR(20);
	DECLARE VAR_CONSTITUENT_ID BIGINT;
	DECLARE VAR_ACCOUNT_NUMBER BIGINT;
	DECLARE VAR_GIFT_ID BIGINT;
	DECLARE VAR_DONATION_DATE DATETIME;
	DECLARE VAR_GIFT_AMOUNT DECIMAL(19,2);
	DECLARE VAR_CURRENCY_CODE VARCHAR(255);
	DECLARE VAR_DISTRO_LINE_ID BIGINT;
	DECLARE VAR_DISTRO_LINE_AMOUNT DECIMAL(19,2);
	DECLARE VAR_PROJECT_CODE VARCHAR(255);
	DECLARE VAR_PROJECT_CODE_DESCRIPTION VARCHAR(255);
	DECLARE VAR_DEDUCTIBLE VARCHAR(10);
	DECLARE VAR_PREVIOUS_ACCOUNT_NUMBER BIGINT DEFAULT 0;
	DECLARE VAR_PERIODIC_OUTPUT_ID BIGINT;

  DECLARE CSR_GIFTS CURSOR FOR
	SELECT GIFT_TYPE, CONSTITUENT_ID, ACCOUNT_NUMBER, GIFT_ID, DONATION_DATE, GIFT_AMOUNT, CURRENCY_CODE, DISTRO_LINE_ID,
	DISTRO_LINE_AMOUNT, PROJECT_CODE, PROJECT_CODE_DESCRIPTION, DEDUCTIBLE FROM TMP_PERIODIC_DATA
	ORDER BY ACCOUNT_NUMBER, CASE GIFT_TYPE WHEN 'Hard Gift' THEN 1 WHEN 'Soft Gift' THEN 2 ELSE 3 END, DONATION_DATE, GIFT_ID;

  DECLARE CSR_GIFT_CURRENCYCODES CURSOR FOR
	SELECT DISTINCT CONSTITUENT_ID, ACCOUNT_NUMBER, CURRENCY_CODE
  FROM TMP_PERIODIC_DATA
	ORDER BY ACCOUNT_NUMBER, CURRENCY_CODE;

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET CSR_END = 1;

	CREATE TEMPORARY TABLE TMP_PERIODIC_DATA (
	GIFT_TYPE VARCHAR(20),
	CONSTITUENT_ID BIGINT,
	ACCOUNT_NUMBER BIGINT,
	GIFT_ID BIGINT,
	DONATION_DATE DATETIME,
	GIFT_AMOUNT DECIMAL(19,2),
	CURRENCY_CODE VARCHAR(255),
	DISTRO_LINE_ID BIGINT,
	DISTRO_LINE_AMOUNT DECIMAL(19,2),
	PROJECT_CODE VARCHAR(255),
	PROJECT_CODE_DESCRIPTION VARCHAR(255),
	DEDUCTIBLE VARCHAR(10));

	CREATE TEMPORARY TABLE TMP_PERIODIC_OUTPUT (
	PERIODIC_OUTPUT_ID BIGINT NOT NULL AUTO_INCREMENT,
	ACCOUNT_NUMBER BIGINT,
	CONSTITUENT_TYPE VARCHAR(255),
	TITLE VARCHAR(255),
	FIRST_NAME VARCHAR(255),
	LAST_NAME VARCHAR(255),
	SUFFIX VARCHAR(255),
	ORGANIZATION_NAME VARCHAR(255),
	ADDRESS_LINE_1 VARCHAR(255),
	ADDRESS_LINE_2 VARCHAR(255),
	ADDRESS_LINE_3 VARCHAR(255),
	CITY VARCHAR(255),
	STATE_PROVINCE VARCHAR(255),
	COUNTRY VARCHAR(255),
	POSTAL_CODE VARCHAR(255),
	EMAIL_ADDRESS VARCHAR(255),
	PHONE_NUMBER VARCHAR(255),
	GIFT_TYPE_1 VARCHAR(20), GIFT_ID_1 BIGINT, DONATION_DATE_1 DATETIME, GIFT_AMOUNT_1 DECIMAL(19,2), CURRENCY_CODE_1 VARCHAR(255), DISTRO_LINE_ID_1 BIGINT, DISTRO_LINE_AMOUNT_1 DECIMAL(19,2), PROJECT_CODE_1 VARCHAR(255), PROJECT_CODE_DESCRIPTION_1 VARCHAR(255), DEDUCTIBLE_1 VARCHAR(10),
	GIFT_TYPE_2 VARCHAR(20), GIFT_ID_2 BIGINT, DONATION_DATE_2 DATETIME, GIFT_AMOUNT_2 DECIMAL(19,2), CURRENCY_CODE_2 VARCHAR(255), DISTRO_LINE_ID_2 BIGINT, DISTRO_LINE_AMOUNT_2 DECIMAL(19,2), PROJECT_CODE_2 VARCHAR(255), PROJECT_CODE_DESCRIPTION_2 VARCHAR(255), DEDUCTIBLE_2 VARCHAR(10),
	GIFT_TYPE_3 VARCHAR(20), GIFT_ID_3 BIGINT, DONATION_DATE_3 DATETIME, GIFT_AMOUNT_3 DECIMAL(19,2), CURRENCY_CODE_3 VARCHAR(255), DISTRO_LINE_ID_3 BIGINT, DISTRO_LINE_AMOUNT_3 DECIMAL(19,2), PROJECT_CODE_3 VARCHAR(255), PROJECT_CODE_DESCRIPTION_3 VARCHAR(255), DEDUCTIBLE_3 VARCHAR(10),
	GIFT_TYPE_4 VARCHAR(20), GIFT_ID_4 BIGINT, DONATION_DATE_4 DATETIME, GIFT_AMOUNT_4 DECIMAL(19,2), CURRENCY_CODE_4 VARCHAR(255), DISTRO_LINE_ID_4 BIGINT, DISTRO_LINE_AMOUNT_4 DECIMAL(19,2), PROJECT_CODE_4 VARCHAR(255), PROJECT_CODE_DESCRIPTION_4 VARCHAR(255), DEDUCTIBLE_4 VARCHAR(10),
	GIFT_TYPE_5 VARCHAR(20), GIFT_ID_5 BIGINT, DONATION_DATE_5 DATETIME, GIFT_AMOUNT_5 DECIMAL(19,2), CURRENCY_CODE_5 VARCHAR(255), DISTRO_LINE_ID_5 BIGINT, DISTRO_LINE_AMOUNT_5 DECIMAL(19,2), PROJECT_CODE_5 VARCHAR(255), PROJECT_CODE_DESCRIPTION_5 VARCHAR(255), DEDUCTIBLE_5 VARCHAR(10),
	GIFT_TYPE_6 VARCHAR(20), GIFT_ID_6 BIGINT, DONATION_DATE_6 DATETIME, GIFT_AMOUNT_6 DECIMAL(19,2), CURRENCY_CODE_6 VARCHAR(255), DISTRO_LINE_ID_6 BIGINT, DISTRO_LINE_AMOUNT_6 DECIMAL(19,2), PROJECT_CODE_6 VARCHAR(255), PROJECT_CODE_DESCRIPTION_6 VARCHAR(255), DEDUCTIBLE_6 VARCHAR(10),
	GIFT_TYPE_7 VARCHAR(20), GIFT_ID_7 BIGINT, DONATION_DATE_7 DATETIME, GIFT_AMOUNT_7 DECIMAL(19,2), CURRENCY_CODE_7 VARCHAR(255), DISTRO_LINE_ID_7 BIGINT, DISTRO_LINE_AMOUNT_7 DECIMAL(19,2), PROJECT_CODE_7 VARCHAR(255), PROJECT_CODE_DESCRIPTION_7 VARCHAR(255), DEDUCTIBLE_7 VARCHAR(10),
	GIFT_TYPE_8 VARCHAR(20), GIFT_ID_8 BIGINT, DONATION_DATE_8 DATETIME, GIFT_AMOUNT_8 DECIMAL(19,2), CURRENCY_CODE_8 VARCHAR(255), DISTRO_LINE_ID_8 BIGINT, DISTRO_LINE_AMOUNT_8 DECIMAL(19,2), PROJECT_CODE_8 VARCHAR(255), PROJECT_CODE_DESCRIPTION_8 VARCHAR(255), DEDUCTIBLE_8 VARCHAR(10),
	GIFT_TYPE_9 VARCHAR(20), GIFT_ID_9 BIGINT, DONATION_DATE_9 DATETIME, GIFT_AMOUNT_9 DECIMAL(19,2), CURRENCY_CODE_9 VARCHAR(255), DISTRO_LINE_ID_9 BIGINT, DISTRO_LINE_AMOUNT_9 DECIMAL(19,2), PROJECT_CODE_9 VARCHAR(255), PROJECT_CODE_DESCRIPTION_9 VARCHAR(255), DEDUCTIBLE_9 VARCHAR(10),
	GIFT_TYPE_10 VARCHAR(20), GIFT_ID_10 BIGINT, DONATION_DATE_10 DATETIME, GIFT_AMOUNT_10 DECIMAL(19,2), CURRENCY_CODE_10 VARCHAR(255), DISTRO_LINE_ID_10 BIGINT, DISTRO_LINE_AMOUNT_10 DECIMAL(19,2), PROJECT_CODE_10 VARCHAR(255), PROJECT_CODE_DESCRIPTION_10 VARCHAR(255), DEDUCTIBLE_10 VARCHAR(10),
	GIFT_TYPE_11 VARCHAR(20), GIFT_ID_11 BIGINT, DONATION_DATE_11 DATETIME, GIFT_AMOUNT_11 DECIMAL(19,2), CURRENCY_CODE_11 VARCHAR(255), DISTRO_LINE_ID_11 BIGINT, DISTRO_LINE_AMOUNT_11 DECIMAL(19,2), PROJECT_CODE_11 VARCHAR(255), PROJECT_CODE_DESCRIPTION_11 VARCHAR(255), DEDUCTIBLE_11 VARCHAR(10),
	GIFT_TYPE_12 VARCHAR(20), GIFT_ID_12 BIGINT, DONATION_DATE_12 DATETIME, GIFT_AMOUNT_12 DECIMAL(19,2), CURRENCY_CODE_12 VARCHAR(255), DISTRO_LINE_ID_12 BIGINT, DISTRO_LINE_AMOUNT_12 DECIMAL(19,2), PROJECT_CODE_12 VARCHAR(255), PROJECT_CODE_DESCRIPTION_12 VARCHAR(255), DEDUCTIBLE_12 VARCHAR(10),
	HARDGIFT_TOTAL DECIMAL(19,2), HARDGIFT_DEDUCTIBLE_TOTAL DECIMAL(19,2), HARDGIFT_NONDEDUCTIBLE_TOTAL DECIMAL(19,2),
	HARDGIFT_CURRENCYCODE_1 VARCHAR(255), HARDGIFT_CURRENCYCODE_1_TOTAL DECIMAL(19,2),
	HARDGIFT_CURRENCYCODE_2 VARCHAR(255), HARDGIFT_CURRENCYCODE_2_TOTAL DECIMAL(19,2),
	HARDGIFT_CURRENCYCODE_3 VARCHAR(255), HARDGIFT_CURRENCYCODE_3_TOTAL DECIMAL(19,2),
	HARDGIFT_CURRENCYCODE_4 VARCHAR(255), HARDGIFT_CURRENCYCODE_4_TOTAL DECIMAL(19,2),
	HARDGIFT_CURRENCYCODE_5 VARCHAR(255), HARDGIFT_CURRENCYCODE_5_TOTAL DECIMAL(19,2),
	SOFTGIFT_TOTAL DECIMAL(19,2), SOFTGIFT_DEDUCTIBLE_TOTAL DECIMAL(19,2), SOFTGIFT_NONDEDUCTIBLE_TOTAL DECIMAL(19,2),
	SOFTGIFT_CURRENCYCODE_1 VARCHAR(255), SOFTGIFT_CURRENCYCODE_1_TOTAL DECIMAL(19,2),
	SOFTGIFT_CURRENCYCODE_2 VARCHAR(255), SOFTGIFT_CURRENCYCODE_2_TOTAL DECIMAL(19,2),
	SOFTGIFT_CURRENCYCODE_3 VARCHAR(255), SOFTGIFT_CURRENCYCODE_3_TOTAL DECIMAL(19,2),
	SOFTGIFT_CURRENCYCODE_4 VARCHAR(255), SOFTGIFT_CURRENCYCODE_4_TOTAL DECIMAL(19,2),
	SOFTGIFT_CURRENCYCODE_5 VARCHAR(255), SOFTGIFT_CURRENCYCODE_5_TOTAL DECIMAL(19,2),
	GIFTINKIND_TOTAL DECIMAL(19,2), GIFTINKIND_DEDUCTIBLE_TOTAL DECIMAL(19,2), GIFTINKIND_NONDEDUCTIBLE_TOTAL DECIMAL(19,2),
	GIFTINKIND_CURRENCYCODE_1 VARCHAR(255), GIFTINKIND_CURRENCYCODE_1_TOTAL DECIMAL(19,2),
	GIFTINKIND_CURRENCYCODE_2 VARCHAR(255), GIFTINKIND_CURRENCYCODE_2_TOTAL DECIMAL(19,2),
	GIFTINKIND_CURRENCYCODE_3 VARCHAR(255), GIFTINKIND_CURRENCYCODE_3_TOTAL DECIMAL(19,2),
	GIFTINKIND_CURRENCYCODE_4 VARCHAR(255), GIFTINKIND_CURRENCYCODE_4_TOTAL DECIMAL(19,2),
	GIFTINKIND_CURRENCYCODE_5 VARCHAR(255), GIFTINKIND_CURRENCYCODE_5_TOTAL DECIMAL(19,2),
	OVERALLPERIOD_TOTAL DECIMAL(19,2), OVERALLPERIOD_DEDUCTIBLE_TOTAL DECIMAL(19,2), OVERALLPERIOD_NONDEDUCTIBLE_TOTAL DECIMAL(19,2),
	OVERALLPERIOD_CURRENCYCODE_1 VARCHAR(255), OVERALLPERIOD_CURRENCYCODE_1_TOTAL DECIMAL(19,2),
	OVERALLPERIOD_CURRENCYCODE_2 VARCHAR(255), OVERALLPERIOD_CURRENCYCODE_2_TOTAL DECIMAL(19,2),
	OVERALLPERIOD_CURRENCYCODE_3 VARCHAR(255), OVERALLPERIOD_CURRENCYCODE_3_TOTAL DECIMAL(19,2),
	OVERALLPERIOD_CURRENCYCODE_4 VARCHAR(255), OVERALLPERIOD_CURRENCYCODE_4_TOTAL DECIMAL(19,2),
	OVERALLPERIOD_CURRENCYCODE_5 VARCHAR(255), OVERALLPERIOD_CURRENCYCODE_5_TOTAL DECIMAL(19,2),
	PRIMARY KEY (`PERIODIC_OUTPUT_ID`));

  IF HARDGIFTS THEN
  	-- Hard Gifts
  	INSERT TMP_PERIODIC_DATA
  	(GIFT_TYPE, CONSTITUENT_ID, ACCOUNT_NUMBER, GIFT_ID, DONATION_DATE, GIFT_AMOUNT, CURRENCY_CODE, DISTRO_LINE_ID,
  	DISTRO_LINE_AMOUNT, PROJECT_CODE, PROJECT_CODE_DESCRIPTION, DEDUCTIBLE)
		SELECT
			'Hard Gift' AS GIFT_TYPE,
			GIFT.CONSTITUENT_ID,
			GETCONSTITUENTACCOUNTNUMBER(GIFT.CONSTITUENT_ID) AS ACCOUNT_NUMBER,
			GIFT.GIFT_ID,
			GIFT.DONATION_DATE,
			GIFT.AMOUNT AS GIFT_AMOUNT,
			GIFT.CURRENCY_CODE,
			DISTRO_LINE.DISTRO_LINE_ID,
			DISTRO_LINE.AMOUNT AS DISTRO_LINE_AMOUNT,
			GETPICKLISTDISPLAYVALUE('projectCode', DISTRO_LINE.PROJECT_CODE),
			GETPICKLISTLONGDESCRIPTION('projectCode', PROJECT_CODE),
			CASE GETCUSTOMFIELD(DISTRO_LINE.DISTRO_LINE_ID, 'distributionline', 'taxDeductible') WHEN 'true' THEN 'Yes' ELSE 'No' END AS DEDUCTIBLE
		FROM GIFT
		LEFT JOIN DISTRO_LINE ON GIFT.GIFT_ID = DISTRO_LINE.GIFT_ID
		WHERE CAST(GIFT.DONATION_DATE AS DATE) BETWEEN BEGIN_DATE AND END_DATE
		AND GIFT.GIFT_STATUS = 'Paid';

  	INSERT TMP_PERIODIC_DATA
  	(GIFT_TYPE, CONSTITUENT_ID, ACCOUNT_NUMBER, GIFT_ID, DONATION_DATE, GIFT_AMOUNT, CURRENCY_CODE, DISTRO_LINE_ID,
  	DISTRO_LINE_AMOUNT, PROJECT_CODE, PROJECT_CODE_DESCRIPTION, DEDUCTIBLE)
		SELECT
			'Hard Gift' AS GIFT_TYPE,
			ADJUSTED_GIFT.CONSTITUENT_ID,
			GETCONSTITUENTACCOUNTNUMBER(ADJUSTED_GIFT.CONSTITUENT_ID) AS ACCOUNT_NUMBER,
			ADJUSTED_GIFT.GIFT_ID,
			CAST(ADJUSTED_GIFT.ADJUSTED_TRANSACTION_DATE AS DATE),
      ADJUSTED_GIFT.ADJUSTED_AMOUNT AS GIFT_AMOUNT,
			(SELECT GIFT.CURRENCY_CODE FROM GIFT WHERE ADJUSTED_GIFT.GIFT_ID = GIFT.GIFT_ID),
			DISTRO_LINE.DISTRO_LINE_ID,
			DISTRO_LINE.AMOUNT AS DISTRO_LINE_AMOUNT,
			GETPICKLISTDISPLAYVALUE('projectCode', DISTRO_LINE.PROJECT_CODE),
			GETPICKLISTLONGDESCRIPTION('projectCode', PROJECT_CODE),
			CASE GETCUSTOMFIELD(DISTRO_LINE.DISTRO_LINE_ID, 'distributionline', 'taxDeductible') WHEN 'true' THEN 'Yes' ELSE 'No' END AS DEDUCTIBLE
    FROM ADJUSTED_GIFT
    LEFT JOIN DISTRO_LINE ON ADJUSTED_GIFT.ADJUSTED_GIFT_ID = DISTRO_LINE.GIFT_ID
		WHERE CAST(ADJUSTED_GIFT.ADJUSTED_TRANSACTION_DATE AS DATE) BETWEEN BEGIN_DATE AND END_DATE
		AND ADJUSTED_GIFT.ADJUSTED_STATUS = 'Paid';
  END IF;

  IF SOFTGIFTS THEN
  	-- Soft Gifts
  	INSERT TMP_PERIODIC_DATA
  	(GIFT_TYPE, CONSTITUENT_ID, ACCOUNT_NUMBER, GIFT_ID, DONATION_DATE, GIFT_AMOUNT, CURRENCY_CODE, DISTRO_LINE_ID,
  	DISTRO_LINE_AMOUNT, PROJECT_CODE, PROJECT_CODE_DESCRIPTION, DEDUCTIBLE)
		SELECT
			'Soft Gift' AS GIFT_TYPE,
			GETCUSTOMFIELD(DISTRO_LINE.DISTRO_LINE_ID, 'distributionline', 'onBehalfOf'),
			GETCONSTITUENTACCOUNTNUMBER(GETCUSTOMFIELD(DISTRO_LINE.DISTRO_LINE_ID, 'distributionline', 'onBehalfOf')) AS ACCOUNT_NUMBER,
			GIFT.GIFT_ID,
			GIFT.DONATION_DATE,
			(SELECT SUM(GIFT_TOTAL.AMOUNT) FROM DISTRO_LINE GIFT_TOTAL WHERE GIFT_TOTAL.GIFT_ID = GIFT.GIFT_ID AND GETCUSTOMFIELD(GIFT_TOTAL.DISTRO_LINE_ID, 'distributionline', 'onBehalfOf') = GETCUSTOMFIELD(DISTRO_LINE.DISTRO_LINE_ID, 'distributionline', 'onBehalfOf')) AS GIFT_AMOUNT,
			GIFT.CURRENCY_CODE,
			DISTRO_LINE.DISTRO_LINE_ID,
			DISTRO_LINE.AMOUNT AS DISTRO_LINE_AMOUNT,
			GETPICKLISTDISPLAYVALUE('projectCode', DISTRO_LINE.PROJECT_CODE),
			GETPICKLISTLONGDESCRIPTION('projectCode', PROJECT_CODE),
			CASE GETCUSTOMFIELD(DISTRO_LINE.DISTRO_LINE_ID, 'distributionline', 'taxDeductible') WHEN 'true' THEN 'Yes' ELSE 'No' END AS DEDUCTIBLE
		FROM GIFT
		LEFT JOIN DISTRO_LINE ON GIFT.GIFT_ID = DISTRO_LINE.GIFT_ID
		WHERE CAST(GIFT.DONATION_DATE AS DATE) BETWEEN BEGIN_DATE AND END_DATE
		AND GIFT.GIFT_STATUS = 'Paid'
		AND GETCUSTOMFIELD(DISTRO_LINE.DISTRO_LINE_ID, 'distributionline', 'onBehalfOf') IS NOT NULL;

  	INSERT TMP_PERIODIC_DATA
  	(GIFT_TYPE, CONSTITUENT_ID, ACCOUNT_NUMBER, GIFT_ID, DONATION_DATE, GIFT_AMOUNT, CURRENCY_CODE, DISTRO_LINE_ID,
  	DISTRO_LINE_AMOUNT, PROJECT_CODE, PROJECT_CODE_DESCRIPTION, DEDUCTIBLE)
		SELECT
			'Soft Gift' AS GIFT_TYPE,
			GETCUSTOMFIELD(DISTRO_LINE.DISTRO_LINE_ID, 'distributionline', 'onBehalfOf'),
			GETCONSTITUENTACCOUNTNUMBER(GETCUSTOMFIELD(DISTRO_LINE.DISTRO_LINE_ID, 'distributionline', 'onBehalfOf')) AS ACCOUNT_NUMBER,
			ADJUSTED_GIFT.GIFT_ID,
			CAST(ADJUSTED_GIFT.ADJUSTED_TRANSACTION_DATE AS DATE),
			(SELECT SUM(GIFT_TOTAL.AMOUNT) FROM DISTRO_LINE GIFT_TOTAL WHERE GIFT_TOTAL.ADJUSTED_GIFT_ID = ADJUSTED_GIFT.ADJUSTED_GIFT_ID AND GETCUSTOMFIELD(GIFT_TOTAL.DISTRO_LINE_ID, 'distributionline', 'onBehalfOf') = GETCUSTOMFIELD(DISTRO_LINE.DISTRO_LINE_ID, 'distributionline', 'onBehalfOf')) AS GIFT_AMOUNT,
			(SELECT GIFT.CURRENCY_CODE FROM GIFT WHERE ADJUSTED_GIFT.GIFT_ID = GIFT.GIFT_ID),
			DISTRO_LINE.DISTRO_LINE_ID,
			DISTRO_LINE.AMOUNT AS DISTRO_LINE_AMOUNT,
			GETPICKLISTDISPLAYVALUE('projectCode', DISTRO_LINE.PROJECT_CODE),
			GETPICKLISTLONGDESCRIPTION('projectCode', PROJECT_CODE),
			CASE GETCUSTOMFIELD(DISTRO_LINE.DISTRO_LINE_ID, 'distributionline', 'taxDeductible') WHEN 'true' THEN 'Yes' ELSE 'No' END AS DEDUCTIBLE
		FROM ADJUSTED_GIFT
		LEFT JOIN DISTRO_LINE ON ADJUSTED_GIFT.ADJUSTED_GIFT_ID = DISTRO_LINE.ADJUSTED_GIFT_ID
		WHERE CAST(ADJUSTED_GIFT.ADJUSTED_TRANSACTION_DATE AS DATE) BETWEEN '2009-11-1' AND '2009-11-11' -- BEGIN_DATE AND END_DATE
		AND ADJUSTED_GIFT.ADJUSTED_STATUS = 'Paid'
		AND GETCUSTOMFIELD(DISTRO_LINE.DISTRO_LINE_ID, 'distributionline', 'onBehalfOf') IS NOT NULL;

  END IF;

  IF GIFTSINKIND THEN
    -- Gifts In Kind
  	INSERT TMP_PERIODIC_DATA
  	(GIFT_TYPE, CONSTITUENT_ID, ACCOUNT_NUMBER, GIFT_ID, DONATION_DATE, GIFT_AMOUNT, CURRENCY_CODE, DISTRO_LINE_ID,
  	DISTRO_LINE_AMOUNT, PROJECT_CODE, PROJECT_CODE_DESCRIPTION, DEDUCTIBLE)
		SELECT
			'Gift In Kind' AS GIFT_TYPE,
			GIFT_IN_KIND.CONSTITUENT_ID,
			GETCONSTITUENTACCOUNTNUMBER(GIFT_IN_KIND.CONSTITUENT_ID) AS ACCOUNT_NUMBER,
			GIFT_IN_KIND.GIFT_IN_KIND_ID AS GIFT_ID,
			GIFT_IN_KIND.DONATION_DATE,
			GIFT_IN_KIND.FAIR_MARKET_VALUE AS GIFT_FAIR_MARKET_VALUE,
			GIFT_IN_KIND.CURRENCY_CODE,
			GIFT_IN_KIND_DETAIL.GIK_DETAIL_ID,
			GIFT_IN_KIND_DETAIL.FAIR_MARKET_VALUE AS GIFT_IN_KIND_DETAIL_FAIR_MARKET_VALUE,
			GETPICKLISTDISPLAYVALUE('projectCode', GIFT_IN_KIND_DETAIL.PROJECT_CODE),
			GETPICKLISTLONGDESCRIPTION('projectCode', GIFT_IN_KIND_DETAIL.PROJECT_CODE),
			CASE TAX_DEDUCTIBLE WHEN 1 THEN 'Yes' ELSE 'No' END AS DEDUCTIBLE
		FROM GIFT_IN_KIND
		LEFT JOIN GIFT_IN_KIND_DETAIL ON GIFT_IN_KIND_DETAIL.GIFT_IN_KIND_ID = GIFT_IN_KIND.GIFT_IN_KIND_ID
		WHERE CAST(GIFT_IN_KIND.DONATION_DATE AS DATE) BETWEEN BEGIN_DATE AND END_DATE;
  END IF;

  OPEN CSR_GIFTS;

  FIELDGIFTS_LOOP: LOOP
		FETCH CSR_GIFTS INTO
			VAR_GIFT_TYPE, VAR_CONSTITUENT_ID, VAR_ACCOUNT_NUMBER, VAR_GIFT_ID, VAR_DONATION_DATE, VAR_GIFT_AMOUNT, VAR_CURRENCY_CODE,
			VAR_DISTRO_LINE_ID, VAR_DISTRO_LINE_AMOUNT, VAR_PROJECT_CODE, VAR_PROJECT_CODE_DESCRIPTION, VAR_DEDUCTIBLE;

		IF CSR_END THEN
			LEAVE FIELDGIFTS_LOOP;
    END IF;

		IF (VAR_PREVIOUS_ACCOUNT_NUMBER <> VAR_ACCOUNT_NUMBER) THEN
      SET VAR_PREVIOUS_ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;
			SET VAR_INDEX = 0;

			INSERT TMP_PERIODIC_OUTPUT
				(ACCOUNT_NUMBER, CONSTITUENT_TYPE, TITLE, FIRST_NAME, LAST_NAME, SUFFIX, ORGANIZATION_NAME, ADDRESS_LINE_1, ADDRESS_LINE_2,
				ADDRESS_LINE_3, CITY, STATE_PROVINCE, COUNTRY, POSTAL_CODE, EMAIL_ADDRESS, PHONE_NUMBER)
			SELECT DISTINCT
				CONSTITUENT.ACCOUNT_NUMBER,
				CONSTITUENT.CONSTITUENT_TYPE,
				CONSTITUENT.TITLE,
				CONSTITUENT.FIRST_NAME,
				CONSTITUENT.LAST_NAME,
				CONSTITUENT.SUFFIX,
				CONSTITUENT.ORGANIZATION_NAME,
				ADDRESS_ADDRESS_LINE_1,
				ADDRESS_ADDRESS_LINE_2,
				ADDRESS_ADDRESS_LINE_3,
				ADDRESS_CITY,
				ADDRESS_STATE_PROVINCE,
				ADDRESS_COUNTRY,
				ADDRESS_POSTAL_CODE,
				EMAIL_EMAIL_ADDRESS,
				PHONE_NUMBER
			FROM CONSTITUENT
      LEFT JOIN VW_CONSTITUENTS_PRIMARYCONTACTINFORMATION ON CONSTITUENT.CONSTITUENT_ID = VW_CONSTITUENTS_PRIMARYCONTACTINFORMATION.CONSTITUENT_CONSTITUENT_ID
			WHERE CONSTITUENT.CONSTITUENT_ID = VAR_CONSTITUENT_ID;

			SET VAR_PERIODIC_OUTPUT_ID = LAST_INSERT_ID();
		END IF;

		SET VAR_INDEX = VAR_INDEX + 1;

    -- If 12 gifts have been populated for the account, insert a new continuation row and start inserting at Gift 1
    IF VAR_INDEX > 12 THEN
      SET VAR_INDEX = 1;

			INSERT TMP_PERIODIC_OUTPUT
				(ACCOUNT_NUMBER, ADDRESS_LINE_1)
			SELECT DISTINCT
				CONSTITUENT.ACCOUNT_NUMBER,
        'Continuation'
			FROM CONSTITUENT
      WHERE CONSTITUENT.CONSTITUENT_ID = VAR_CONSTITUENT_ID;

			SET VAR_PERIODIC_OUTPUT_ID = LAST_INSERT_ID();
    END IF;

    IF VAR_INDEX = 1 THEN
      UPDATE TMP_PERIODIC_OUTPUT
      SET GIFT_TYPE_1 = VAR_GIFT_TYPE,
      GIFT_ID_1 = VAR_GIFT_ID,
      DONATION_DATE_1 = VAR_DONATION_DATE,
      GIFT_AMOUNT_1 = VAR_GIFT_AMOUNT,
      CURRENCY_CODE_1 = VAR_CURRENCY_CODE,
      DISTRO_LINE_ID_1 = VAR_DISTRO_LINE_ID,
      DISTRO_LINE_AMOUNT_1 = VAR_DISTRO_LINE_AMOUNT,
      PROJECT_CODE_1 = VAR_PROJECT_CODE,
      PROJECT_CODE_DESCRIPTION_1 = VAR_PROJECT_CODE_DESCRIPTION,
      DEDUCTIBLE_1 = VAR_DEDUCTIBLE
      WHERE PERIODIC_OUTPUT_ID = VAR_PERIODIC_OUTPUT_ID;
    ELSEIF VAR_INDEX = 2 THEN
      UPDATE TMP_PERIODIC_OUTPUT
      SET GIFT_TYPE_2 = VAR_GIFT_TYPE,
      GIFT_ID_2 = VAR_GIFT_ID,
      DONATION_DATE_2 = VAR_DONATION_DATE,
      GIFT_AMOUNT_2 = VAR_GIFT_AMOUNT,
      CURRENCY_CODE_2 = VAR_CURRENCY_CODE,
      DISTRO_LINE_ID_2 = VAR_DISTRO_LINE_ID,
      DISTRO_LINE_AMOUNT_2 = VAR_DISTRO_LINE_AMOUNT,
      PROJECT_CODE_2 = VAR_PROJECT_CODE,
      PROJECT_CODE_DESCRIPTION_2 = VAR_PROJECT_CODE_DESCRIPTION,
      DEDUCTIBLE_2 = VAR_DEDUCTIBLE
      WHERE PERIODIC_OUTPUT_ID = VAR_PERIODIC_OUTPUT_ID;
    ELSEIF VAR_INDEX = 3 THEN
      UPDATE TMP_PERIODIC_OUTPUT
      SET GIFT_TYPE_3 = VAR_GIFT_TYPE,
      GIFT_ID_3 = VAR_GIFT_ID,
      DONATION_DATE_3 = VAR_DONATION_DATE,
      GIFT_AMOUNT_3 = VAR_GIFT_AMOUNT,
      CURRENCY_CODE_3 = VAR_CURRENCY_CODE,
      DISTRO_LINE_ID_3 = VAR_DISTRO_LINE_ID,
      DISTRO_LINE_AMOUNT_3 = VAR_DISTRO_LINE_AMOUNT,
      PROJECT_CODE_3 = VAR_PROJECT_CODE,
      PROJECT_CODE_DESCRIPTION_3 = VAR_PROJECT_CODE_DESCRIPTION,
      DEDUCTIBLE_3 = VAR_DEDUCTIBLE
      WHERE PERIODIC_OUTPUT_ID = VAR_PERIODIC_OUTPUT_ID;
    ELSEIF VAR_INDEX = 4 THEN
      UPDATE TMP_PERIODIC_OUTPUT
      SET GIFT_TYPE_4 = VAR_GIFT_TYPE,
      GIFT_ID_4 = VAR_GIFT_ID,
      DONATION_DATE_4 = VAR_DONATION_DATE,
      GIFT_AMOUNT_4 = VAR_GIFT_AMOUNT,
      CURRENCY_CODE_4 = VAR_CURRENCY_CODE,
      DISTRO_LINE_ID_4 = VAR_DISTRO_LINE_ID,
      DISTRO_LINE_AMOUNT_4 = VAR_DISTRO_LINE_AMOUNT,
      PROJECT_CODE_4 = VAR_PROJECT_CODE,
      PROJECT_CODE_DESCRIPTION_4 = VAR_PROJECT_CODE_DESCRIPTION,
      DEDUCTIBLE_4 = VAR_DEDUCTIBLE
      WHERE PERIODIC_OUTPUT_ID = VAR_PERIODIC_OUTPUT_ID;
    ELSEIF VAR_INDEX = 5 THEN
      UPDATE TMP_PERIODIC_OUTPUT
      SET GIFT_TYPE_5 = VAR_GIFT_TYPE,
      GIFT_ID_5 = VAR_GIFT_ID,
      DONATION_DATE_5 = VAR_DONATION_DATE,
      GIFT_AMOUNT_5 = VAR_GIFT_AMOUNT,
      CURRENCY_CODE_5 = VAR_CURRENCY_CODE,
      DISTRO_LINE_ID_5 = VAR_DISTRO_LINE_ID,
      DISTRO_LINE_AMOUNT_5 = VAR_DISTRO_LINE_AMOUNT,
      PROJECT_CODE_5 = VAR_PROJECT_CODE,
      PROJECT_CODE_DESCRIPTION_5 = VAR_PROJECT_CODE_DESCRIPTION,
      DEDUCTIBLE_5 = VAR_DEDUCTIBLE
      WHERE PERIODIC_OUTPUT_ID = VAR_PERIODIC_OUTPUT_ID;
    ELSEIF VAR_INDEX = 6 THEN
      UPDATE TMP_PERIODIC_OUTPUT
      SET GIFT_TYPE_6 = VAR_GIFT_TYPE,
      GIFT_ID_6 = VAR_GIFT_ID,
      DONATION_DATE_6 = VAR_DONATION_DATE,
      GIFT_AMOUNT_6 = VAR_GIFT_AMOUNT,
      CURRENCY_CODE_6 = VAR_CURRENCY_CODE,
      DISTRO_LINE_ID_6 = VAR_DISTRO_LINE_ID,
      DISTRO_LINE_AMOUNT_6 = VAR_DISTRO_LINE_AMOUNT,
      PROJECT_CODE_6 = VAR_PROJECT_CODE,
      PROJECT_CODE_DESCRIPTION_6 = VAR_PROJECT_CODE_DESCRIPTION,
      DEDUCTIBLE_6 = VAR_DEDUCTIBLE
      WHERE PERIODIC_OUTPUT_ID = VAR_PERIODIC_OUTPUT_ID;
    ELSEIF VAR_INDEX = 7 THEN
      UPDATE TMP_PERIODIC_OUTPUT
      SET GIFT_TYPE_7 = VAR_GIFT_TYPE,
      GIFT_ID_7 = VAR_GIFT_ID,
      DONATION_DATE_7 = VAR_DONATION_DATE,
      GIFT_AMOUNT_7 = VAR_GIFT_AMOUNT,
      CURRENCY_CODE_7 = VAR_CURRENCY_CODE,
      DISTRO_LINE_ID_7 = VAR_DISTRO_LINE_ID,
      DISTRO_LINE_AMOUNT_7 = VAR_DISTRO_LINE_AMOUNT,
      PROJECT_CODE_7 = VAR_PROJECT_CODE,
      PROJECT_CODE_DESCRIPTION_7 = VAR_PROJECT_CODE_DESCRIPTION,
      DEDUCTIBLE_7 = VAR_DEDUCTIBLE
      WHERE PERIODIC_OUTPUT_ID = VAR_PERIODIC_OUTPUT_ID;
    ELSEIF VAR_INDEX = 8 THEN
      UPDATE TMP_PERIODIC_OUTPUT
      SET GIFT_TYPE_8 = VAR_GIFT_TYPE,
      GIFT_ID_8 = VAR_GIFT_ID,
      DONATION_DATE_8 = VAR_DONATION_DATE,
      GIFT_AMOUNT_8 = VAR_GIFT_AMOUNT,
      CURRENCY_CODE_8 = VAR_CURRENCY_CODE,
      DISTRO_LINE_ID_8 = VAR_DISTRO_LINE_ID,
      DISTRO_LINE_AMOUNT_8 = VAR_DISTRO_LINE_AMOUNT,
      PROJECT_CODE_8 = VAR_PROJECT_CODE,
      PROJECT_CODE_DESCRIPTION_8 = VAR_PROJECT_CODE_DESCRIPTION,
      DEDUCTIBLE_8 = VAR_DEDUCTIBLE
      WHERE PERIODIC_OUTPUT_ID = VAR_PERIODIC_OUTPUT_ID;
    ELSEIF VAR_INDEX = 9 THEN
      UPDATE TMP_PERIODIC_OUTPUT
      SET GIFT_TYPE_9 = VAR_GIFT_TYPE,
      GIFT_ID_9 = VAR_GIFT_ID,
      DONATION_DATE_9 = VAR_DONATION_DATE,
      GIFT_AMOUNT_9 = VAR_GIFT_AMOUNT,
      CURRENCY_CODE_9 = VAR_CURRENCY_CODE,
      DISTRO_LINE_ID_9 = VAR_DISTRO_LINE_ID,
      DISTRO_LINE_AMOUNT_9 = VAR_DISTRO_LINE_AMOUNT,
      PROJECT_CODE_9 = VAR_PROJECT_CODE,
      PROJECT_CODE_DESCRIPTION_9 = VAR_PROJECT_CODE_DESCRIPTION,
      DEDUCTIBLE_9 = VAR_DEDUCTIBLE
      WHERE PERIODIC_OUTPUT_ID = VAR_PERIODIC_OUTPUT_ID;
    ELSEIF VAR_INDEX = 10 THEN
      UPDATE TMP_PERIODIC_OUTPUT
      SET GIFT_TYPE_10 = VAR_GIFT_TYPE,
      GIFT_ID_10 = VAR_GIFT_ID,
      DONATION_DATE_10 = VAR_DONATION_DATE,
      GIFT_AMOUNT_10 = VAR_GIFT_AMOUNT,
      CURRENCY_CODE_10 = VAR_CURRENCY_CODE,
      DISTRO_LINE_ID_10 = VAR_DISTRO_LINE_ID,
      DISTRO_LINE_AMOUNT_10 = VAR_DISTRO_LINE_AMOUNT,
      PROJECT_CODE_10 = VAR_PROJECT_CODE,
      PROJECT_CODE_DESCRIPTION_10 = VAR_PROJECT_CODE_DESCRIPTION,
      DEDUCTIBLE_10 = VAR_DEDUCTIBLE
      WHERE PERIODIC_OUTPUT_ID = VAR_PERIODIC_OUTPUT_ID;
    ELSEIF VAR_INDEX = 11 THEN
      UPDATE TMP_PERIODIC_OUTPUT
      SET GIFT_TYPE_11 = VAR_GIFT_TYPE,
      GIFT_ID_11 = VAR_GIFT_ID,
      DONATION_DATE_11 = VAR_DONATION_DATE,
      GIFT_AMOUNT_11 = VAR_GIFT_AMOUNT,
      CURRENCY_CODE_11 = VAR_CURRENCY_CODE,
      DISTRO_LINE_ID_11 = VAR_DISTRO_LINE_ID,
      DISTRO_LINE_AMOUNT_11 = VAR_DISTRO_LINE_AMOUNT,
      PROJECT_CODE_11 = VAR_PROJECT_CODE,
      PROJECT_CODE_DESCRIPTION_11 = VAR_PROJECT_CODE_DESCRIPTION,
      DEDUCTIBLE_11 = VAR_DEDUCTIBLE
      WHERE PERIODIC_OUTPUT_ID = VAR_PERIODIC_OUTPUT_ID;
    ELSEIF VAR_INDEX = 12 THEN
      UPDATE TMP_PERIODIC_OUTPUT
      SET GIFT_TYPE_12 = VAR_GIFT_TYPE,
      GIFT_ID_12 = VAR_GIFT_ID,
      DONATION_DATE_12 = VAR_DONATION_DATE,
      GIFT_AMOUNT_12 = VAR_GIFT_AMOUNT,
      CURRENCY_CODE_12 = VAR_CURRENCY_CODE,
      DISTRO_LINE_ID_12 = VAR_DISTRO_LINE_ID,
      DISTRO_LINE_AMOUNT_12 = VAR_DISTRO_LINE_AMOUNT,
      PROJECT_CODE_12 = VAR_PROJECT_CODE,
      PROJECT_CODE_DESCRIPTION_12 = VAR_PROJECT_CODE_DESCRIPTION,
      DEDUCTIBLE_12 = VAR_DEDUCTIBLE
      WHERE PERIODIC_OUTPUT_ID = VAR_PERIODIC_OUTPUT_ID;
    END IF;
	END LOOP;
	CLOSE CSR_GIFTS;

  UPDATE TMP_PERIODIC_OUTPUT
  SET HARDGIFT_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Hard Gift' AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER);

  UPDATE TMP_PERIODIC_OUTPUT
  SET HARDGIFT_DEDUCTIBLE_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Hard Gift' AND DEDUCTIBLE = 'Yes' AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER);

  UPDATE TMP_PERIODIC_OUTPUT
  SET HARDGIFT_NONDEDUCTIBLE_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Hard Gift' AND DEDUCTIBLE = 'No' AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER);


  UPDATE TMP_PERIODIC_OUTPUT
  SET SOFTGIFT_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Soft Gift' AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER);

  UPDATE TMP_PERIODIC_OUTPUT
  SET SOFTGIFT_DEDUCTIBLE_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Soft Gift' AND DEDUCTIBLE = 'Yes' AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER);

  UPDATE TMP_PERIODIC_OUTPUT
  SET SOFTGIFT_NONDEDUCTIBLE_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Soft Gift' AND DEDUCTIBLE = 'No' AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER);


  UPDATE TMP_PERIODIC_OUTPUT
  SET GIFTINKIND_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Gift In Kind' AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER);

  UPDATE TMP_PERIODIC_OUTPUT
  SET GIFTINKIND_DEDUCTIBLE_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Gift In Kind' AND DEDUCTIBLE = 'Yes' AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER);

  UPDATE TMP_PERIODIC_OUTPUT
  SET GIFTINKIND_NONDEDUCTIBLE_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Gift In Kind' AND DEDUCTIBLE = 'No' AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER);


  UPDATE TMP_PERIODIC_OUTPUT
  SET OVERALLPERIOD_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER);

  UPDATE TMP_PERIODIC_OUTPUT
  SET OVERALLPERIOD_DEDUCTIBLE_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE DEDUCTIBLE = 'Yes' AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER);

  UPDATE TMP_PERIODIC_OUTPUT
  SET OVERALLPERIOD_NONDEDUCTIBLE_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE DEDUCTIBLE = 'No' AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER);


  SET VAR_INDEX = 0;
	SET CSR_END = 0;
  OPEN CSR_GIFT_CURRENCYCODES;

  FIELDGIFT_CURRENCYCODES_LOOP: LOOP
		FETCH CSR_GIFT_CURRENCYCODES INTO
			VAR_CONSTITUENT_ID, VAR_ACCOUNT_NUMBER, VAR_CURRENCY_CODE;

		IF CSR_END THEN
			LEAVE FIELDGIFT_CURRENCYCODES_LOOP;
    END IF;

		IF (VAR_PREVIOUS_ACCOUNT_NUMBER <> VAR_ACCOUNT_NUMBER) THEN
      SET VAR_PREVIOUS_ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;
			SET VAR_INDEX = 0;
		END IF;

		SET VAR_INDEX = VAR_INDEX + 1;

    IF VAR_INDEX = 1 THEN
		  UPDATE TMP_PERIODIC_OUTPUT
			SET HARDGIFT_CURRENCYCODE_1 = VAR_CURRENCY_CODE,
			HARDGIFT_CURRENCYCODE_1_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Hard Gift' AND TMP_PERIODIC_DATA.CURRENCY_CODE = VAR_CURRENCY_CODE AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER)
			WHERE ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;

		  UPDATE TMP_PERIODIC_OUTPUT
			SET SOFTGIFT_CURRENCYCODE_1 = VAR_CURRENCY_CODE,
			SOFTGIFT_CURRENCYCODE_1_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Soft Gift' AND TMP_PERIODIC_DATA.CURRENCY_CODE = VAR_CURRENCY_CODE AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER)
			WHERE ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;

		  UPDATE TMP_PERIODIC_OUTPUT
			SET GIFTINKIND_CURRENCYCODE_1 = VAR_CURRENCY_CODE,
			GIFTINKIND_CURRENCYCODE_1_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Gift In Kind' AND TMP_PERIODIC_DATA.CURRENCY_CODE = VAR_CURRENCY_CODE AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER)
			WHERE ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;

		  UPDATE TMP_PERIODIC_OUTPUT
			SET OVERALLPERIOD_CURRENCYCODE_1 = VAR_CURRENCY_CODE,
			OVERALLPERIOD_CURRENCYCODE_1_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE TMP_PERIODIC_DATA.CURRENCY_CODE = VAR_CURRENCY_CODE AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER)
			WHERE ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;

			UPDATE TMP_PERIODIC_OUTPUT
			SET HARDGIFT_CURRENCYCODE_1 = NULL
			WHERE HARDGIFT_CURRENCYCODE_1_TOTAL IS NULL;

			UPDATE TMP_PERIODIC_OUTPUT
			SET SOFTGIFT_CURRENCYCODE_1 = NULL
			WHERE SOFTGIFT_CURRENCYCODE_1_TOTAL IS NULL;

			UPDATE TMP_PERIODIC_OUTPUT
			SET GIFTINKIND_CURRENCYCODE_1 = NULL
			WHERE GIFTINKIND_CURRENCYCODE_1_TOTAL IS NULL;

			UPDATE TMP_PERIODIC_OUTPUT
			SET OVERALLPERIOD_CURRENCYCODE_1 = NULL
			WHERE OVERALLPERIOD_CURRENCYCODE_1_TOTAL IS NULL;
    ELSEIF VAR_INDEX = 2 THEN
		  UPDATE TMP_PERIODIC_OUTPUT
			SET HARDGIFT_CURRENCYCODE_2 = VAR_CURRENCY_CODE,
			HARDGIFT_CURRENCYCODE_2_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Hard Gift' AND TMP_PERIODIC_DATA.CURRENCY_CODE = VAR_CURRENCY_CODE AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER)
			WHERE ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;

		  UPDATE TMP_PERIODIC_OUTPUT
			SET SOFTGIFT_CURRENCYCODE_2 = VAR_CURRENCY_CODE,
			SOFTGIFT_CURRENCYCODE_2_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Soft Gift' AND TMP_PERIODIC_DATA.CURRENCY_CODE = VAR_CURRENCY_CODE AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER)
			WHERE ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;

		  UPDATE TMP_PERIODIC_OUTPUT
			SET GIFTINKIND_CURRENCYCODE_2 = VAR_CURRENCY_CODE,
			GIFTINKIND_CURRENCYCODE_2_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Gift In Kind' AND TMP_PERIODIC_DATA.CURRENCY_CODE = VAR_CURRENCY_CODE AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER)
			WHERE ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;

		  UPDATE TMP_PERIODIC_OUTPUT
			SET OVERALLPERIOD_CURRENCYCODE_2 = VAR_CURRENCY_CODE,
			OVERALLPERIOD_CURRENCYCODE_2_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE TMP_PERIODIC_DATA.CURRENCY_CODE = VAR_CURRENCY_CODE AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER)
			WHERE ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;

			UPDATE TMP_PERIODIC_OUTPUT
			SET HARDGIFT_CURRENCYCODE_2 = NULL
			WHERE HARDGIFT_CURRENCYCODE_2_TOTAL IS NULL;

			UPDATE TMP_PERIODIC_OUTPUT
			SET SOFTGIFT_CURRENCYCODE_2 = NULL
			WHERE SOFTGIFT_CURRENCYCODE_2_TOTAL IS NULL;

			UPDATE TMP_PERIODIC_OUTPUT
			SET GIFTINKIND_CURRENCYCODE_2 = NULL
			WHERE GIFTINKIND_CURRENCYCODE_2_TOTAL IS NULL;

			UPDATE TMP_PERIODIC_OUTPUT
			SET OVERALLPERIOD_CURRENCYCODE_2 = NULL
			WHERE OVERALLPERIOD_CURRENCYCODE_2_TOTAL IS NULL;
		ELSEIF VAR_INDEX = 3 THEN
		  UPDATE TMP_PERIODIC_OUTPUT
			SET HARDGIFT_CURRENCYCODE_3 = VAR_CURRENCY_CODE,
			HARDGIFT_CURRENCYCODE_3_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Hard Gift' AND TMP_PERIODIC_DATA.CURRENCY_CODE = VAR_CURRENCY_CODE AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER)
			WHERE ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;

		  UPDATE TMP_PERIODIC_OUTPUT
			SET SOFTGIFT_CURRENCYCODE_3 = VAR_CURRENCY_CODE,
			SOFTGIFT_CURRENCYCODE_3_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Soft Gift' AND TMP_PERIODIC_DATA.CURRENCY_CODE = VAR_CURRENCY_CODE AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER)
			WHERE ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;

		  UPDATE TMP_PERIODIC_OUTPUT
			SET GIFTINKIND_CURRENCYCODE_3 = VAR_CURRENCY_CODE,
			GIFTINKIND_CURRENCYCODE_3_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Gift In Kind' AND TMP_PERIODIC_DATA.CURRENCY_CODE = VAR_CURRENCY_CODE AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER)
			WHERE ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;

		  UPDATE TMP_PERIODIC_OUTPUT
			SET OVERALLPERIOD_CURRENCYCODE_3 = VAR_CURRENCY_CODE,
			OVERALLPERIOD_CURRENCYCODE_3_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE TMP_PERIODIC_DATA.CURRENCY_CODE = VAR_CURRENCY_CODE AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER)
			WHERE ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;

			UPDATE TMP_PERIODIC_OUTPUT
			SET HARDGIFT_CURRENCYCODE_3 = NULL
			WHERE HARDGIFT_CURRENCYCODE_3_TOTAL IS NULL;

			UPDATE TMP_PERIODIC_OUTPUT
			SET SOFTGIFT_CURRENCYCODE_3 = NULL
			WHERE SOFTGIFT_CURRENCYCODE_3_TOTAL IS NULL;

			UPDATE TMP_PERIODIC_OUTPUT
			SET GIFTINKIND_CURRENCYCODE_3 = NULL
			WHERE GIFTINKIND_CURRENCYCODE_3_TOTAL IS NULL;

			UPDATE TMP_PERIODIC_OUTPUT
			SET OVERALLPERIOD_CURRENCYCODE_3 = NULL
			WHERE OVERALLPERIOD_CURRENCYCODE_3_TOTAL IS NULL;
    ELSEIF VAR_INDEX = 4 THEN
		  UPDATE TMP_PERIODIC_OUTPUT
			SET HARDGIFT_CURRENCYCODE_4 = VAR_CURRENCY_CODE,
			HARDGIFT_CURRENCYCODE_4_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Hard Gift' AND TMP_PERIODIC_DATA.CURRENCY_CODE = VAR_CURRENCY_CODE AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER)
			WHERE ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;

		  UPDATE TMP_PERIODIC_OUTPUT
			SET SOFTGIFT_CURRENCYCODE_4 = VAR_CURRENCY_CODE,
			SOFTGIFT_CURRENCYCODE_4_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Soft Gift' AND TMP_PERIODIC_DATA.CURRENCY_CODE = VAR_CURRENCY_CODE AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER)
			WHERE ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;

		  UPDATE TMP_PERIODIC_OUTPUT
			SET GIFTINKIND_CURRENCYCODE_4 = VAR_CURRENCY_CODE,
			GIFTINKIND_CURRENCYCODE_4_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Gift In Kind' AND TMP_PERIODIC_DATA.CURRENCY_CODE = VAR_CURRENCY_CODE AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER)
			WHERE ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;

		  UPDATE TMP_PERIODIC_OUTPUT
			SET OVERALLPERIOD_CURRENCYCODE_4 = VAR_CURRENCY_CODE,
			OVERALLPERIOD_CURRENCYCODE_4_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE TMP_PERIODIC_DATA.CURRENCY_CODE = VAR_CURRENCY_CODE AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER)
			WHERE ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;

			UPDATE TMP_PERIODIC_OUTPUT
			SET HARDGIFT_CURRENCYCODE_4 = NULL
			WHERE HARDGIFT_CURRENCYCODE_4_TOTAL IS NULL;

			UPDATE TMP_PERIODIC_OUTPUT
			SET SOFTGIFT_CURRENCYCODE_4 = NULL
			WHERE SOFTGIFT_CURRENCYCODE_4_TOTAL IS NULL;

			UPDATE TMP_PERIODIC_OUTPUT
			SET GIFTINKIND_CURRENCYCODE_4 = NULL
			WHERE GIFTINKIND_CURRENCYCODE_4_TOTAL IS NULL;

			UPDATE TMP_PERIODIC_OUTPUT
			SET OVERALLPERIOD_CURRENCYCODE_4 = NULL
			WHERE OVERALLPERIOD_CURRENCYCODE_4_TOTAL IS NULL;
		ELSEIF VAR_INDEX = 5 THEN
		  UPDATE TMP_PERIODIC_OUTPUT
			SET HARDGIFT_CURRENCYCODE_5 = VAR_CURRENCY_CODE,
			HARDGIFT_CURRENCYCODE_5_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Hard Gift' AND TMP_PERIODIC_DATA.CURRENCY_CODE = VAR_CURRENCY_CODE AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER)
			WHERE ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;

		  UPDATE TMP_PERIODIC_OUTPUT
			SET SOFTGIFT_CURRENCYCODE_5 = VAR_CURRENCY_CODE,
			SOFTGIFT_CURRENCYCODE_5_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Soft Gift' AND TMP_PERIODIC_DATA.CURRENCY_CODE = VAR_CURRENCY_CODE AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER)
			WHERE ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;

		  UPDATE TMP_PERIODIC_OUTPUT
			SET GIFTINKIND_CURRENCYCODE_5 = VAR_CURRENCY_CODE,
			GIFTINKIND_CURRENCYCODE_5_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE GIFT_TYPE = 'Gift In Kind' AND TMP_PERIODIC_DATA.CURRENCY_CODE = VAR_CURRENCY_CODE AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER)
			WHERE ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;

		  UPDATE TMP_PERIODIC_OUTPUT
			SET OVERALLPERIOD_CURRENCYCODE_5 = VAR_CURRENCY_CODE,
			OVERALLPERIOD_CURRENCYCODE_5_TOTAL = (SELECT SUM(DISTRO_LINE_AMOUNT) FROM TMP_PERIODIC_DATA WHERE TMP_PERIODIC_DATA.CURRENCY_CODE = VAR_CURRENCY_CODE AND TMP_PERIODIC_OUTPUT.ACCOUNT_NUMBER = TMP_PERIODIC_DATA.ACCOUNT_NUMBER)
			WHERE ACCOUNT_NUMBER = VAR_ACCOUNT_NUMBER;

			UPDATE TMP_PERIODIC_OUTPUT
			SET HARDGIFT_CURRENCYCODE_5 = NULL
			WHERE HARDGIFT_CURRENCYCODE_5_TOTAL IS NULL;

			UPDATE TMP_PERIODIC_OUTPUT
			SET SOFTGIFT_CURRENCYCODE_5 = NULL
			WHERE SOFTGIFT_CURRENCYCODE_5_TOTAL IS NULL;

			UPDATE TMP_PERIODIC_OUTPUT
			SET GIFTINKIND_CURRENCYCODE_5 = NULL
			WHERE GIFTINKIND_CURRENCYCODE_5_TOTAL IS NULL;

			UPDATE TMP_PERIODIC_OUTPUT
			SET OVERALLPERIOD_CURRENCYCODE_5 = NULL
			WHERE OVERALLPERIOD_CURRENCYCODE_5_TOTAL IS NULL;
    END IF;
	END LOOP;
	CLOSE CSR_GIFT_CURRENCYCODES;

	SELECT * FROM TMP_PERIODIC_OUTPUT
	ORDER BY ACCOUNT_NUMBER, PERIODIC_OUTPUT_ID;

  DROP TEMPORARY TABLE TMP_PERIODIC_DATA;
  DROP TEMPORARY TABLE TMP_PERIODIC_OUTPUT;

END$$



DROP PROCEDURE IF EXISTS `DELETE_REPORTWIZARD`$$

CREATE PROCEDURE DELETE_REPORTWIZARD(REPORTWIZARDID INT)
BEGIN
	IF NOT EXISTS (SELECT REPORTWIZARD_REPORTFILTER.REPORTWIZARD_REPORTWIZARD_ID FROM REPORTWIZARD_REPORTFILTER
		JOIN REPORTFILTER ON REPORTFILTER.REPORTFILTER_ID = REPORTWIZARD_REPORTFILTER.REPORTFILTERS_REPORTFILTER_ID
		JOIN REPORTCUSTOMFILTER ON REPORTCUSTOMFILTER.REPORTCUSTOMFILTER_ID = REPORTFILTER.REPORTCUSTOMFILTER_REPORTCUSTOMFILTER_ID
		JOIN REPORTCUSTOMFILTERDEFINITION ON REPORTCUSTOMFILTER.REPORTCUSTOMFILTERDEFINITION_ID = REPORTCUSTOMFILTERDEFINITION.REPORTCUSTOMFILTERDEFINITION_ID
		JOIN REPORTCUSTOMFILTER_REPORTCUSTOMFILTERCRITERIA ON REPORTCUSTOMFILTER_REPORTCUSTOMFILTERCRITERIA.REPORTCUSTOMFILTER_REPORTCUSTOMFILTER_ID = REPORTCUSTOMFILTER.REPORTCUSTOMFILTER_ID
		JOIN REPORTCUSTOMFILTERCRITERIA ON REPORTCUSTOMFILTERCRITERIA.REPORTCUSTOMFILTERCRITERIA_ID = REPORTCUSTOMFILTER_REPORTCUSTOMFILTERCRITERIA.REPORTCUSTOMFILTERCRITERIA_REPORTCUSTOMFILTERCRITERIA_ID
		WHERE REPORTCUSTOMFILTERDEFINITION.DISPLAY_HTML LIKE '%SEGMENTATION%'
		AND CRITERIA = REPORTWIZARDID)
	THEN
		-- Delete chart settings
		DROP TABLE IF EXISTS TEMP_REPORTCHARTSETTINGS;

		CREATE TEMPORARY TABLE TEMP_REPORTCHARTSETTINGS
		SELECT reportChartSettings_REPORTCHARTSETTINGS_ID FROM REPORTWIZARD_REPORTCHARTSETTINGS WHERE REPORTWIZARD_REPORTWIZARD_ID = REPORTWIZARDID;

		DELETE FROM REPORTWIZARD_REPORTCHARTSETTINGS WHERE REPORTWIZARD_REPORTWIZARD_ID = REPORTWIZARDID;

		DELETE FROM REPORTCHARTSETTINGS WHERE REPORTCHARTSETTINGS_ID IN
		(SELECT reportChartSettings_REPORTCHARTSETTINGS_ID FROM TEMP_REPORTCHARTSETTINGS);

		DROP TABLE IF EXISTS TEMP_REPORTCHARTSETTINGS;

		-- Delete filters
		DROP TABLE IF EXISTS TEMP_REPORTFILTER;

		CREATE TEMPORARY TABLE TEMP_REPORTFILTER
		SELECT REPORTFILTER_ID, reportCustomFilter_REPORTCUSTOMFILTER_ID, reportStandardFilter_REPORTSTANDARDFILTER_ID
		FROM REPORTFILTER WHERE REPORTFILTER_ID IN
		(SELECT reportFilters_REPORTFILTER_ID FROM REPORTWIZARD_REPORTFILTER WHERE REPORTWIZARD_REPORTWIZARD_ID = REPORTWIZARDID);

		DELETE FROM REPORTWIZARD_REPORTFILTER WHERE REPORTWIZARD_REPORTWIZARD_ID = REPORTWIZARDID;

		DELETE FROM REPORTFILTER WHERE REPORTFILTER_ID IN
		(SELECT REPORTFILTER_ID FROM TEMP_REPORTFILTER);

		DELETE FROM REPORTSTANDARDFILTER WHERE REPORTSTANDARDFILTER_ID IN
		(SELECT reportStandardFilter_REPORTSTANDARDFILTER_ID FROM TEMP_REPORTFILTER);

		DELETE FROM REPORTCUSTOMFILTER_REPORTCUSTOMFILTERCRITERIA WHERE REPORTCUSTOMFILTER_REPORTCUSTOMFILTER_ID IN
		(SELECT reportCustomFilter_REPORTCUSTOMFILTER_ID FROM TEMP_REPORTFILTER);

		DELETE FROM REPORTCUSTOMFILTERCRITERIA WHERE REPORTCUSTOMFILTERCRITERIA_ID IN
		(SELECT reportCustomFilterCriteria_REPORTCUSTOMFILTERCRITERIA_ID FROM REPORTCUSTOMFILTER_REPORTCUSTOMFILTERCRITERIA WHERE REPORTCUSTOMFILTER_REPORTCUSTOMFILTER_ID IN
		(SELECT reportCustomFilter_REPORTCUSTOMFILTER_ID FROM TEMP_REPORTFILTER));

		DELETE FROM REPORTCUSTOMFILTER WHERE REPORTCUSTOMFILTER_ID IN
		(SELECT reportCustomFilter_REPORTCUSTOMFILTER_ID FROM TEMP_REPORTFILTER);

		DROP TABLE IF EXISTS TEMP_REPORTFILTER;


		-- Delete selected fields
		DROP TABLE IF EXISTS TEMP_REPORTSELECTEDFIELD;

		CREATE TEMPORARY TABLE TEMP_REPORTCROSSTABROWS
		SELECT reportSelectedFields_REPORTSELECTEDFIELD_ID FROM REPORTWIZARD_REPORTSELECTEDFIELD WHERE REPORTWIZARD_REPORTWIZARD_ID = REPORTWIZARDID;

		DELETE FROM REPORTWIZARD_REPORTSELECTEDFIELD WHERE REPORTWIZARD_REPORTWIZARD_ID = REPORTWIZARDID;

		DELETE FROM REPORTSELECTEDFIELD WHERE REPORTSELECTEDFIELD_ID IN
		(SELECT reportSelectedFields_REPORTSELECTEDFIELD_ID FROM TEMP_REPORTCROSSTABROWS);

		DROP TABLE IF EXISTS TEMP_REPORTSELECTEDFIELD;


		DROP TABLE IF EXISTS TEMP_REPORTCROSSTABROWS;

		CREATE TEMPORARY TABLE TEMP_REPORTCROSSTABROWS
		SELECT reportCrossTabRows_REPORTCROSSTABROWS_ID FROM REPORTCROSSTABFIELDS_REPORTCROSSTABROW
		WHERE REPORTCROSSTABFIELDS_REPORTCROSSTABFIELDS_ID IN
		(SELECT reportCrossTabFields_REPORTCROSSTABFIELDS_ID FROM REPORTWIZARD WHERE REPORTWIZARD_ID = REPORTWIZARDID);

		DELETE FROM REPORTCROSSTABFIELDS_REPORTCROSSTABROW
		WHERE REPORTCROSSTABFIELDS_REPORTCROSSTABFIELDS_ID IN
		(SELECT reportCrossTabFields_REPORTCROSSTABFIELDS_ID FROM REPORTWIZARD WHERE REPORTWIZARD_ID = REPORTWIZARDID);

		DELETE FROM REPORTCROSSTABROW WHERE REPORTCROSSTABROWS_ID IN
		(SELECT reportCrossTabRows_REPORTCROSSTABROWS_ID FROM TEMP_REPORTCROSSTABROWS);

		DROP TABLE IF EXISTS TEMP_REPORTCROSSTABROWS;


		DROP TABLE IF EXISTS TEMP_REPORTCROSSTABCOLUMNS;

		CREATE TEMPORARY TABLE TEMP_REPORTCROSSTABCOLUMNS
		SELECT reportCrossTabColumns_REPORTCROSSTABCOLUMN_ID FROM REPORTCROSSTABFIELDS_REPORTCROSSTABCOLUMN
		WHERE REPORTCROSSTABFIELDS_REPORTCROSSTABFIELDS_ID IN
		(SELECT reportCrossTabFields_REPORTCROSSTABFIELDS_ID FROM REPORTWIZARD WHERE REPORTWIZARD_ID = REPORTWIZARDID);

		DELETE FROM REPORTCROSSTABFIELDS_REPORTCROSSTABCOLUMN
		WHERE REPORTCROSSTABFIELDS_REPORTCROSSTABFIELDS_ID IN
		(SELECT reportCrossTabFields_REPORTCROSSTABFIELDS_ID FROM REPORTWIZARD WHERE REPORTWIZARD_ID = REPORTWIZARDID);

		DELETE FROM REPORTCROSSTABCOLUMN WHERE REPORTCROSSTABCOLUMN_ID IN
		(SELECT reportCrossTabColumns_REPORTCROSSTABCOLUMN_ID FROM TEMP_REPORTCROSSTABCOLUMNS);

		DROP TABLE IF EXISTS TEMP_REPORTCROSSTABCOLUMNS;


		DROP TABLE IF EXISTS TEMP_REPORTCROSSTABMEASURES;

		CREATE TEMPORARY TABLE TEMP_REPORTCROSSTABMEASURES
		SELECT reportCrossTabMeasure_REPORTCROSSTABMEASURE_ID FROM REPORTCROSSTABFIELDS_REPORTCROSSTABMEASURE
		WHERE REPORTCROSSTABFIELDS_REPORTCROSSTABFIELDS_ID IN
		(SELECT reportCrossTabFields_REPORTCROSSTABFIELDS_ID FROM REPORTWIZARD WHERE REPORTWIZARD_ID = REPORTWIZARDID);

		DELETE FROM REPORTCROSSTABFIELDS_REPORTCROSSTABMEASURE
		WHERE REPORTCROSSTABFIELDS_REPORTCROSSTABFIELDS_ID IN
		(SELECT reportCrossTabFields_REPORTCROSSTABFIELDS_ID FROM REPORTWIZARD WHERE REPORTWIZARD_ID = REPORTWIZARDID);

		DELETE FROM REPORTCROSSTABMEASURE WHERE REPORTCROSSTABMEASURE_ID IN
		(SELECT reportCrossTabMeasure_REPORTCROSSTABMEASURE_ID FROM TEMP_REPORTCROSSTABMEASURES);

		DROP TABLE IF EXISTS TEMP_REPORTCROSSTABMEASURES;


		DROP TABLE IF EXISTS TEMP_REPORTCROSSTABFIELDS;

		CREATE TEMPORARY TABLE TEMP_REPORTCROSSTABFIELDS
		SELECT reportCrossTabFields_REPORTCROSSTABFIELDS_ID FROM REPORTWIZARD WHERE REPORTWIZARD_ID = REPORTWIZARDID;

		DELETE FROM REPORTWIZARD WHERE REPORTWIZARD_ID = REPORTWIZARDID;

		DELETE FROM REPORTCROSSTABFIELDS WHERE REPORTCROSSTABFIELDS_ID IN
		(SELECT reportCrossTabFields_REPORTCROSSTABFIELDS_ID FROM TEMP_REPORTCROSSTABFIELDS);

		DROP TABLE IF EXISTS TEMP_REPORTCROSSTABFIELDS;
	END IF;
END$$


DROP PROCEDURE IF EXISTS `IS_SEGMENTATION_IN_USE`$$

CREATE PROCEDURE IS_SEGMENTATION_IN_USE(REPORTWIZARDID INT)
BEGIN
	IF EXISTS (SELECT REPORTWIZARD_REPORTFILTER.REPORTWIZARD_REPORTWIZARD_ID FROM REPORTWIZARD_REPORTFILTER
		JOIN REPORTFILTER ON REPORTFILTER.REPORTFILTER_ID = REPORTWIZARD_REPORTFILTER.REPORTFILTERS_REPORTFILTER_ID
		JOIN REPORTCUSTOMFILTER ON REPORTCUSTOMFILTER.REPORTCUSTOMFILTER_ID = REPORTFILTER.REPORTCUSTOMFILTER_REPORTCUSTOMFILTER_ID
		JOIN REPORTCUSTOMFILTERDEFINITION ON REPORTCUSTOMFILTER.REPORTCUSTOMFILTERDEFINITION_ID = REPORTCUSTOMFILTERDEFINITION.REPORTCUSTOMFILTERDEFINITION_ID
		JOIN REPORTCUSTOMFILTER_REPORTCUSTOMFILTERCRITERIA ON REPORTCUSTOMFILTER_REPORTCUSTOMFILTERCRITERIA.REPORTCUSTOMFILTER_REPORTCUSTOMFILTER_ID = REPORTCUSTOMFILTER.REPORTCUSTOMFILTER_ID
		JOIN REPORTCUSTOMFILTERCRITERIA ON REPORTCUSTOMFILTERCRITERIA.REPORTCUSTOMFILTERCRITERIA_ID = REPORTCUSTOMFILTER_REPORTCUSTOMFILTERCRITERIA.REPORTCUSTOMFILTERCRITERIA_REPORTCUSTOMFILTERCRITERIA_ID
		WHERE REPORTCUSTOMFILTERDEFINITION.DISPLAY_HTML LIKE '%SEGMENTATION%'
		AND CRITERIA = REPORTWIZARDID)
	THEN
		SELECT 1 AS IN_USE;
	ELSE
		SELECT 0 AS IN_USE;
	END IF;
END$$


DROP PROCEDURE IF EXISTS CREATE_VIEW;$$

CREATE PROCEDURE CREATE_VIEW(VIEWTEXT VARCHAR(65535))
BEGIN
	SET @execString = VIEWTEXT;
	PREPARE createViewStatement FROM @execString;
	EXECUTE createViewStatement;
	DEALLOCATE PREPARE createViewStatement;
END;
$$

