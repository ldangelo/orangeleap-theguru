<?xml version="1.0" encoding="UTF-8"?>
<project name="${app.name}" basedir=".." default="usage">

	<property name="war.dir" value="${basedir}/war" />
	<property name="stage.dir" value="${basedir}/build/stage" />
	<property name="src.dir" value="${basedir}/src" />
	<property name="test.src.dir" value="${basedir}/test" />
	<property name="config.dir" value="${basedir}/config" />
	<property name="lib.dir" value="${basedir}/lib" />
	<property name="compile.lib.dir" value="${lib.dir}/compile/bin" />
	<property name="war.lib.dir" value="${lib.dir}/war/bin" />
	<property file="${basedir}/build/build.properties" />

	<path id="axis.classpath">
	  <fileset dir="${basedir}/lib/compile/bin">
	    <include name="**/*.jar" />
	  </fileset>
	</path>
	
	<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
	  <classpath>
	    <fileset dir="${basedir}/lib/compile/bin" includes="*.jar" />
	  </classpath>
	</taskdef>
	
	<taskdef resource="axis-tasks.properties" classpathref="axis.classpath" />
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${lib.dir}/test/bin/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<fileset id="compile.lib" dir="${compile.lib.dir}" description="compile-time dependencies">
		<include name="**/*.jar" />
	</fileset>

	<fileset id="war.lib" dir="${war.lib.dir}" description="war dependencies">
		<include name="**/*.jar" />
	</fileset>

	<target name="deploy-integrated-war" depends="build-integrated-war">
		<copy todir="${deploy.path}" file="${stage.dir}/${app.name}.war" />
	</target>

	<target name="deploy-exploded-war" depends="build-exploded-war">
		<copy todir="${deploy.path}/${app.name}">
			<fileset dir="${stage.dir}/${app.name}.war" />
		</copy>
		<delete dir="${stage.dir}/${app.name}.war" quiet="true" />
	</target>

	<target name="undeploy-war">
		<delete dir="${deploy.path}/${app.name}.war" />
		<delete dir="${deploy.path}/${app.name}" />
		<delete>
			<fileset dir="${deploy.path}" includes="${app.name}.war" />
			<fileset dir="${deploy.path}" includes="${app.name}" />
		</delete>
	</target>

	<target name="build-integrated-war" depends="setup-war">
		<war destfile="${stage.dir}/${app.name}.war" basedir="${stage.dir}/war">
			<include name="**/*.*" />
		</war>
		<delete dir="${stage.dir}/war" />
	</target>

	<target name="build-exploded-war" depends="setup-war">
		<mkdir dir="${stage.dir}/${app.name}.war" />
		<copy todir="${stage.dir}/${app.name}.war">
			<fileset dir="${stage.dir}/war">
				<include name="**/*.*" />
			</fileset>
		</copy>
		<delete dir="${stage.dir}/war" />
	</target>

	<target name="setup-war" depends="classes-jar">
		<mkdir dir="${stage.dir}/war" />
		<mkdir dir="${stage.dir}/war/META-INF" />
		<mkdir dir="${stage.dir}/war/WEB-INF" />
		<mkdir dir="${stage.dir}/war/WEB-INF/lib" />
		<mkdir dir="${stage.dir}/war/WEB-INF/classes" />

		<copy todir="${stage.dir}/war" includeemptydirs="true">
			<fileset dir="${war.dir}">
				<include name="**/*.*" />
			</fileset>
		</copy>

		<copy todir="${stage.dir}/war/WEB-INF/lib">
			<fileset dir="${stage.dir}">
				<include name="${app.name}.jar" />
			</fileset>
		</copy>

		<copy todir="${stage.dir}/war/WEB-INF/lib">
			<fileset dir="${war.lib.dir}">
				<include name="**/*.jar" />
			</fileset>
		</copy>

		<replace file="${stage.dir}/war/WEB-INF/jsp/layouts/footer.jsp" token="${build.version}" value="${build.TODAY}"/>
	</target>

	<target name="classes-jar" depends="setup">
		<mkdir dir="${stage.dir}/classes-jar" />

		<path id="compile-lib">
			<fileset refid="compile.lib" />
			<fileset refid="war.lib" />
			<fileset file="${stage.dir}/*.jar" />
		</path>

		<echo>Compiling with debug=${debug.compile}</echo>
		<javac destdir="${stage.dir}/classes-jar"
			srcdir="${src.dir}" classpathref="compile-lib" debug="${debug.compile}"/>

		<copy todir="${stage.dir}/classes-jar">
			<fileset dir="${src.dir}">
				<include name="**/*.*" />
				<exclude name="**/*.java" />
				<exclude name="META-INF/persistence-container.xml"/>
			</fileset>
			<fileset dir="${config.dir}">
				<include name="**/*.properties" />
				<include name="**/*.xml" />
			</fileset>
		</copy>

		<if>
			<equals arg1="${build.env}" arg2="dev" casesensitive="false" />
			<then>
				<copy tofile="${stage.dir}/classes-jar/META-INF/persistence.xml">
					<fileset dir="${src.dir}">
						<include name="META-INF/persistence-container.xml" />
					</fileset>
				</copy>
				<replace file="${stage.dir}/classes-jar/META-INF/persistence.xml"
					token="@@DIALECT@@" value="${mysql.db.dialect}"/>
			</then>
			<elseif>
				<equals arg1="${build.env}" arg2="unit-test" casesensitive="false" />
				<then>
					<!-- We have a special file for unit tests -->
					<copy todir="${stage.dir}/classes-jar">
						<fileset dir="${test.src.dir}">
							<include name="META-INF/persistence.xml"/>
						</fileset>
					</copy>

				</then>
			</elseif>
			<else>
				<copy tofile="${stage.dir}/classes-jar/META-INF/persistence.xml">
					<fileset dir="${src.dir}">
						<include name="META-INF/persistence-container.xml" />
					</fileset>
				</copy>
				<replace file="${stage.dir}/classes-jar/META-INF/persistence.xml"
					token="@@DIALECT@@" value="${sqlserver.db.dialect}"/>
			</else>
		</if>

		<jar jarfile="${stage.dir}/${app.name}.jar" basedir="${stage.dir}/classes-jar">
			<include name="**/*.class" />
			<include name="**/*.properties" />
			<include name="**/*.xml" />
			<include name="META-INF/**" />
			<exclude name="**/test/**/*.class" />
		</jar>
		<delete dir="${stage.dir}/classes-jar" />
	</target>

	<target name="setup" depends="clean">
		<echo>Setting up for environment = ${build.env}</echo>
		<mkdir dir="${stage.dir}" />
		<if>
			<equals arg1="${build.env}" arg2="dev" />
			<then>
				<property name="debug.compile" value="true" />
			</then>
			<elseif>
				<equals arg1="${build.env}" arg2="test" />
				<then>
					<property name="debug.compile" value="true" />
				</then>
			</elseif>
			<else>
				<property name="debug.compile" value="false" />
			</else>
		</if>
	</target>

	<target name="clean">
		<delete dir="${stage.dir}" />
		<delete dir="${test.output.dir}" />
	</target>

	<target name="generate-javadocs">
		<mkdir dir="${stage.dir}/javadocs" />

		<path id="compile-lib">
			<fileset refid="compile.lib" />
			<fileset file="war.lib" />
		</path>

		<javadoc packagenames="com.mpower.*" destdir="${stage.dir}/javadocs" classpathref="compile-lib" useexternalfile="true">
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
		</javadoc>
	</target>

	<target name="app.synch">
		<echo>Synchronizing App</echo>
		<sync todir="${deploy.path}/${app.name}/css">
			<fileset dir="${war.dir}/css">
				<include name="**/*.*"/>
			</fileset>
		</sync>
		<sync todir="${deploy.path}/${app.name}/js">
			<fileset dir="${war.dir}/js">
				<include name="**/*.*"/>
			</fileset>
		</sync>
		<sync todir="${deploy.path}/${app.name}/images">
			<fileset dir="${war.dir}/images">
				<include name="**/*.*"/>
			</fileset>
		</sync>
		<sync todir="${deploy.path}/${app.name}/WEB-INF/jsp">
			<fileset dir="${war.dir}/WEB-INF/jsp">
				<include name="**/*.*"/>
			</fileset>
		</sync>
	</target>

	<target name="create.load.schema" description="Create and loads the Guru database and loads the views and functions into the Orange Leap database.">
		<tempfile property="refresh.stub.tempfile"
			destdir="${basedir}/db/prod/domain/"
			prefix="SQLExec"
			suffix=".sql"/>
		<concat destfile="${refresh.stub.tempfile}">
			<header filtering="no" trimleading="yes">
				REM Generated ANT SQL Exec Stub
				REM You can delete this file
			</header>
			<path path="${basedir}/db/prod/domain/JasperDatasourceUpdate.sql"/>
			<filterchain>
				<replacetokens begintoken="$" endtoken="$">
					<token key="jdbcurl" value="${localhost.mysql.db.url}"/>
					<token key="username" value="${orangeleap.mysql.db.user}"/>
					<!-- setting the password to the encrypted value for 'orangeleap' -->
					<token key="password" value="${orangeleap.mysql.db.encrypted.pw}"/>
			   </replacetokens>
			</filterchain>
		</concat>

	     <sql driver="${mysql.db.driver}"
		          url="${mysql.db.url}"
		          userid="${mysql.db.user}"
		          password="${mysql.db.pw}"
		          encoding="UTF-8"
		          classpath="${mysql.db.classpath}"
	              delimiter=";"
	     	>
		    <transaction src="${basedir}/db/prod/domain/TheguruCreateAndLoadSchema-NoFunctions.sql"/>
		    <transaction src="${basedir}/db/prod/domain/TheguruCreateFunctions-Part1.sql"/>
	     	<transaction src="${basedir}/db/prod/domain/${jasperserverCreateAndLoadSchema}"/>
			<transaction src="${refresh.stub.tempfile}"/>
   	     </sql>

		 <delete file="${refresh.stub.tempfile}"/>

	     <sql driver="${mysql.db.driver}"
		          url="${mysql.db.url}"
		          userid="${mysql.db.user}"
		          password="${mysql.db.pw}"
		          encoding="UTF-8"
		          classpath="${mysql.db.classpath}"
	              delimiter="$$"
	     	>
	     	<transaction src="${basedir}/db/prod/domain/TheguruCreateFunctions-Part2.sql"/>
  	     </sql>


		<!-- Add the views to the Orangeleap schema-->

		<sql driver="${orangeleap.mysql.db.driver}"
			          url="${orangeleap.mysql.db.url}"
			          userid="${orangeleap.mysql.db.user}"
			          password="${orangeleap.mysql.db.pw}"
			          encoding="UTF-8"
			          classpath="${orangeleap.mysql.db.classpath}"
					  delimiter="$$">
					<!-- Add functions to orangeleap database-->
					<transaction src="${basedir}/db/prod/domain/functions.sql"/>
		</sql>

		<sql driver="${orangeleap.mysql.db.driver}"
			          url="${orangeleap.mysql.db.url}"
			          userid="${orangeleap.mysql.db.user}"
			          password="${orangeleap.mysql.db.pw}"
			          encoding="UTF-8"
					  classpath="${orangeleap.mysql.db.classpath}">
					<!-- Add views to orangeleap database-->
			     	<transaction src="${basedir}/db/prod/domain/orangeLeapReportViews.sql"/>
		</sql>
	</target>

	<target name="wsdl2java">
		<axis-wsdl2java output="src/com/mpower/ws/axis"
		testcase="true"
		verbose="true"
		url="${basedir}/war/WEB-INF/theguru.wsdl"
		helpergen="true"/>
	</target>
		
	<target name="xjc.generate">
		<xjc schema="war/WEB-INF/theguru.xsd" destdir="src" package="com.mpower.ws.axis"/>
	</target>

	<target name="usage">
		<echo>This is the internal build file for TheGuru.</echo>
		<echo>Please use build.xml</echo>
	</target>

</project>
