-- MySQL Administrator dump 1.4
--
-- ------------------------------------------------------
-- Server version	5.0.45


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */$$
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */$$
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */$$
/*!40101 SET NAMES utf8 */$$

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */$$
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */$$
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */$$

-- DELIMITER $$

--
-- Definition of function `COUNTOFVALUES`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `COUNTOFVALUES`(FIELDVALUE TEXT, DELIM VARCHAR(124)) RETURNS int(11)
    DETERMINISTIC
BEGIN DECLARE i INT DEFAULT 0;	-- total number of delimiters
 IF LENGTH(FIELDVALUE) <> 0 THEN SET i = (LENGTH(FIELDVALUE)-LENGTH(REPLACE(FIELDVALUE, DELIM, '')))/LENGTH(DELIM) + 1; END IF; RETURN(i);	-- return
 END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$


--
-- Definition of function `GETCONSTITUENTDISPLAYNAME`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `GETCONSTITUENTDISPLAYNAME`(CONSTITUENTID BIGINT) RETURNS varchar(510) CHARSET utf8
    DETERMINISTIC
BEGIN DECLARE RESULT VARCHAR(510);  SELECT CASE WHEN CONSTITUENT_TYPE = 'individual' THEN CONCAT_WS(', ', LAST_NAME, FIRST_NAME) WHEN CONSTITUENT_TYPE = 'organization' THEN ORGANIZATION_NAME ELSE CONSTITUENT_ID END INTO RESULT FROM CONSTITUENT WHERE CONSTITUENT_ID = CONSTITUENTID;  RETURN(RESULT);	-- return
 END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of function `GETCONSTITUENTDISPLAYNAMES`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `GETCONSTITUENTDISPLAYNAMES`(str TEXT, delim VARCHAR(124)) RETURNS text CHARSET utf8
    DETERMINISTIC
BEGIN DECLARE i INT DEFAULT 0;	-- total number of delimiters
 DECLARE ctr INT DEFAULT 0;	-- counter for the loop
 DECLARE str_len INT;		-- string length,self explanatory
 DECLARE out_str text DEFAULT '';	-- return string holder
 DECLARE temp_str text DEFAULT '';	-- temporary string holder
 DECLARE temp_val VARCHAR(255) DEFAULT '';	-- temporary string holder for query
 SET str_len=LENGTH(str);  IF (str_len > 0) THEN SET i = (LENGTH(str)-LENGTH(REPLACE(str, delim, '')))/LENGTH(delim) + 1;  WHILE(ctr<i) DO SET ctr=ctr+1;  SET temp_str = REPLACE(SUBSTRING(SUBSTRING_INDEX(str, delim, ctr), LENGTH(SUBSTRING_INDEX(str, delim,ctr - 1)) + 1), delim, '');  SELECT GETCONSTITUENTDISPLAYNAME(temp_str) INTO temp_val;  SET out_str=CONCAT(out_str, temp_val, '; '); END WHILE; END IF;  SET out_str=TRIM(TRAILING delim FROM out_str); RETURN(out_str);	-- return
 END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of function `GETCUSTOMFIELD`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `GETCUSTOMFIELD`(ENTITYID INT, ENTITYTYPE VARCHAR(255), FIELDNAME VARCHAR(255)) RETURNS varchar(255) CHARSET utf8
BEGIN DECLARE FIELDVALUE VARCHAR(255);  SELECT FIELD_VALUE INTO FIELDVALUE FROM CUSTOM_FIELD WHERE ENTITY_ID = ENTITYID AND ENTITY_TYPE = ENTITYTYPE AND FIELD_NAME = FIELDNAME;  RETURN FIELDVALUE; END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of function `GETVALUE`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `GETVALUE`(FIELDVALUE TEXT, DELIM VARCHAR(124), VALUEINDEX INT) RETURNS text CHARSET utf8
    DETERMINISTIC
BEGIN DECLARE TEMP_STR text DEFAULT '';	-- temporary string holder
 SET TEMP_STR = REPLACE(SUBSTRING(SUBSTRING_INDEX(FIELDVALUE, DELIM, VALUEINDEX), LENGTH(SUBSTRING_INDEX(FIELDVALUE, DELIM, VALUEINDEX - 1)) + 1), DELIM, ''); RETURN(TEMP_STR);	-- return
 END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of function `SPLITCAMELCASEDSTRING`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `SPLITCAMELCASEDSTRING`(STRING TEXT) RETURNS text CHARSET utf8
    DETERMINISTIC
BEGIN DECLARE COUNTER INT DEFAULT 0;	-- counter for the loop
 DECLARE STRING_LENGTH INT;		-- string length,self explanatory
 DECLARE RESULT TEXT DEFAULT '';	-- return string holder
 DECLARE TEMP_STRING text DEFAULT '';	-- temporary string holder
 DECLARE NEXT_CHARACTER_UPPER_CASE BIT DEFAULT FALSE;  SET STRING = REPLACE(SUBSTRING_INDEX(STRING, '[', -1), ']', ''); SET STRING_LENGTH = LENGTH(STRING);  WHILE (COUNTER < STRING_LENGTH) DO SET COUNTER = COUNTER + 1; SET TEMP_STRING = SUBSTRING(STRING, COUNTER, 1); IF (COUNTER = 1 OR NEXT_CHARACTER_UPPER_CASE) THEN SET RESULT = CONCAT(RESULT, UCASE(TEMP_STRING)); SET NEXT_CHARACTER_UPPER_CASE = FALSE; ELSE IF ASCII(TEMP_STRING) BETWEEN 65 AND 90 THEN SET RESULT = CONCAT(RESULT, ' ', TEMP_STRING); ELSE IF TEMP_STRING = '.' THEN SET RESULT = CONCAT(RESULT, ' '); SET NEXT_CHARACTER_UPPER_CASE = TRUE; ELSE SET RESULT = CONCAT(RESULT, TEMP_STRING); END IF; END IF; END IF; END WHILE;  RETURN(RESULT);	-- return
 END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of procedure `ASSOCIATECUSTOMFILTERSWITHDATASUBSOURCES`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `ASSOCIATECUSTOMFILTERSWITHDATASUBSOURCES`()
BEGIN DECLARE CSR_END INT DEFAULT 0; DECLARE FIELDNAME VARCHAR(100) DEFAULT ''; DECLARE CUSTOMFILTERID BIGINT DEFAULT 0; DECLARE SUBSOURCEID BIGINT DEFAULT 0; DECLARE MAXCUSTOMFILTERSUBSOURCEID BIGINT DEFAULT 0;  DECLARE CSR_FIELDNAMES CURSOR FOR SELECT DISTINCT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME LIKE 'VW%' AND (COLUMN_NAME LIKE '%CONSTITUENT_ID' OR COLUMN_NAME = 'ADDRESS_TEMPORARY_START_DATE' OR COLUMN_NAME = 'EMAIL_TEMPORARY_START_DATE' OR COLUMN_NAME = 'PHONE_TEMPORARY_START_DATE');  DECLARE CSR_CUSTOMFILTERS CURSOR FOR SELECT REPORTCUSTOMFILTERDEFINITION_ID FROM REPORTCUSTOMFILTERDEFINITION WHERE SQL_TEXT LIKE CONCAT('%', FIELDNAME, '%');  DECLARE CSR_SUBSOURCES CURSOR FOR SELECT REPORTSUBSOURCE_ID FROM REPORTDATASUBSOURCE WHERE VIEW_NAME IN (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME LIKE 'VW%' AND COLUMN_NAME = FIELDNAME) AND REPORTSUBSOURCE_ID NOT IN (SELECT reportDataSubSource_REPORTSUBSOURCE_ID FROM REPORTCUSTOMFILTERDEFINITION_REPORTDATASUBSOURCE WHERE reportCustomFilterDefinitions_REPORTCUSTOMFILTERDEFINITION_ID = CUSTOMFILTERID);  DECLARE CONTINUE HANDLER FOR NOT FOUND SET CSR_END = 1;  OPEN CSR_FIELDNAMES;  FIELDNAMES_LOOP: LOOP FETCH CSR_FIELDNAMES INTO FIELDNAME;  IF CSR_END THEN LEAVE FIELDNAMES_LOOP; END IF;  OPEN CSR_CUSTOMFILTERS; CUSTOMFILTERS_LOOP: LOOP FETCH CSR_CUSTOMFILTERS INTO CUSTOMFILTERID;  IF CSR_END THEN LEAVE CUSTOMFILTERS_LOOP; END IF;  OPEN CSR_SUBSOURCES;  SUBSOURCES_LOOP: LOOP FETCH CSR_SUBSOURCES INTO SUBSOURCEID;  IF CSR_END THEN LEAVE SUBSOURCES_LOOP; END IF;  SET MAXCUSTOMFILTERSUBSOURCEID = (SELECT IFNULL(MAX(REPORTCUSTOMFILTERDEFINITION_ID),0) + 1 FROM REPORTCUSTOMFILTERDEFINITION_REPORTDATASUBSOURCE); INSERT REPORTCUSTOMFILTERDEFINITION_REPORTDATASUBSOURCE (reportCustomFilterDefinitions_REPORTCUSTOMFILTERDEFINITION_ID, reportDataSubSource_REPORTSUBSOURCE_ID, REPORTSUBSOURCE_ID, REPORTCUSTOMFILTERDEFINITION_ID) VALUES (CUSTOMFILTERID, SUBSOURCEID, SUBSOURCEID, MAXCUSTOMFILTERSUBSOURCEID); END LOOP; SET CSR_END = 0; CLOSE CSR_SUBSOURCES; END LOOP; SET CSR_END = 0; CLOSE CSR_CUSTOMFILTERS; END LOOP; SET CSR_END = 0; CLOSE CSR_FIELDNAMES; END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of procedure `INSERTREPORTFIELD`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `INSERTREPORTFIELD`(PRIMARYKEYS VARCHAR(255), COLUMNNAME VARCHAR(255), DISPLAYNAME VARCHAR(255), ISDEFAULT BIT, FIELDTYPE INT, FIELDGROUPID LONG)
BEGIN INSERT INTO REPORTFIELD (AVERAGE, CAN_BE_SUMMARIZED, COLUMN_NAME, ALIAS_NAME, DISPLAY_NAME, IS_DEFAULT, IS_SUMMARIZED, LARGEST_VALUE, PERFORMSUMMARY, IS_SELECTED, SMALLEST_VALUE, FIELD_TYPE, RECORD_COUNT, PRIMARY_KEYS) VALUES (b'0', b'0', COLUMNNAME, COLUMNNAME, DISPLAYNAME, ISDEFAULT, b'0', b'0', b'0', b'0', b'0', FIELDTYPE, b'0', PRIMARYKEYS);  SET @REPORTFIELD_ID = LAST_INSERT_ID();  INSERT REPORTFIELD_REPORTFIELDGROUP (FIELDS_REPORTFIELD_ID, REPORTFIELDGROUP_ID, REPORTFIELDGROUP_REPORTFIELDGROUP_ID, REPORTFIELD_ID) VALUES (@REPORTFIELD_ID, FIELDGROUPID, FIELDGROUPID ,@REPORTFIELD_ID); END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of procedure `INSERTREPORTFIELDGROUP`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `INSERTREPORTFIELDGROUP`(REPORTFIELDGROUPNAME VARCHAR(255), REPORTSUBSOURCE_ID LONG, OUT REPORTFIELDGROUP_ID LONG)
BEGIN INSERT INTO REPORTFIELDGROUP (NAME) VALUES (REPORTFIELDGROUPNAME);  SET @REPORTFIELDGROUP_ID = LAST_INSERT_ID();  SET @MAXREPORTSUBSOURCE_ID = (SELECT IFNULL(MAX(REPORTSUBSOURCE_ID),0) + 1 FROM REPORTFIELDGROUP_REPORTDATASUBSOURCE);  INSERT REPORTFIELDGROUP_REPORTDATASUBSOURCE (REPORTFIELDGROUP_REPORTFIELDGROUP_ID, REPORTDATASUBSOURCE_REPORTSUBSOURCE_ID, REPORTSUBSOURCE_ID) VALUES (@REPORTFIELDGROUP_ID, REPORTSUBSOURCE_ID, @MAXREPORTSUBSOURCE_ID);  SET REPORTFIELDGROUP_ID = @REPORTFIELDGROUP_ID; END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of procedure `INSERTREPORTFIELDWITHALIAS`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `INSERTREPORTFIELDWITHALIAS`(PRIMARYKEYS VARCHAR(255), ALIASNAME VARCHAR(255), COLUMNNAME VARCHAR(255), DISPLAYNAME VARCHAR(255), ISDEFAULT BIT, FIELDTYPE INT, FIELDGROUPID LONG)
BEGIN INSERT INTO REPORTFIELD (AVERAGE, CAN_BE_SUMMARIZED, COLUMN_NAME, ALIAS_NAME, DISPLAY_NAME, IS_DEFAULT, IS_SUMMARIZED, LARGEST_VALUE, PERFORMSUMMARY, IS_SELECTED, SMALLEST_VALUE, FIELD_TYPE, RECORD_COUNT, PRIMARY_KEYS) VALUES (b'0', b'0', COLUMNNAME, ALIASNAME, DISPLAYNAME, ISDEFAULT, b'0', b'0', b'0', b'0', b'0', FIELDTYPE, b'0', PRIMARYKEYS);  SET @REPORTFIELD_ID = LAST_INSERT_ID();  INSERT REPORTFIELD_REPORTFIELDGROUP (FIELDS_REPORTFIELD_ID, REPORTFIELDGROUP_ID, REPORTFIELDGROUP_REPORTFIELDGROUP_ID, REPORTFIELD_ID) VALUES (@REPORTFIELD_ID, FIELDGROUPID, FIELDGROUPID ,@REPORTFIELD_ID); END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

--
-- Definition of procedure `NUMBERBUILDER`
--

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `NUMBERBUILDER`()
BEGIN DECLARE I INT DEFAULT 0; DECLARE CTR INT DEFAULT 0; SET I = 1; SET CTR = 100; DROP TABLE IF EXISTS `NUMBERS`; CREATE TABLE NUMBERS (NUMBER INT); CREATE INDEX IDX_NUMBERS ON NUMBERS(NUMBER); WHILE (I <= CTR) DO INSERT NUMBERS SELECT I; SET I = I + 1; END WHILE; END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */$$
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */$$
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */$$
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */$$
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */$$
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */$$
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */$$
